<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tanjunze笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tanjunze.github.io/"/>
  <updated>2019-03-26T07:25:01.608Z</updated>
  <id>https://tanjunze.github.io/</id>
  
  <author>
    <name>tanjunze</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java JVM</title>
    <link href="https://tanjunze.github.io/2019/01/17/Java%20JVM/"/>
    <id>https://tanjunze.github.io/2019/01/17/Java JVM/</id>
    <published>2019-01-16T21:02:14.000Z</published>
    <updated>2019-03-26T07:25:01.608Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JVM机制"><a href="#JVM机制" class="headerlink" title="JVM机制"></a>JVM机制</h4><h5 id="java的构成及关系"><a href="#java的构成及关系" class="headerlink" title="java的构成及关系"></a>java的构成及关系</h5><p><img src="/images/jvm.png" alt></p><h5 id="java虚拟机的体系结构"><a href="#java虚拟机的体系结构" class="headerlink" title="java虚拟机的体系结构"></a>java虚拟机的体系结构</h5><p><img src="/images/jvm_runtime.png" alt></p><p><strong>每个Java虚拟机都有2中机制</strong></p><ul><li><p>类装载子系统</p><p>装载具有适合名称的类或接口。</p></li><li><p>执行引擎</p><p>负责执行包含在已装载的类或接口中的指令。</p></li></ul><h5 id="Java-垃圾回收原理"><a href="#Java-垃圾回收原理" class="headerlink" title="Java 垃圾回收原理"></a>Java 垃圾回收原理</h5><p>   整理至：<a href="https://segmentfault.com/a/1190000002579346" target="_blank" rel="noopener">JVM 的 工作原理，层次结构 以及 GC工作原理</a></p><p>   垃圾回收(Garbage Collection)是Java虚拟机(JVM)垃圾回收器提供的一种用于在空闲时间<strong>不定时回收</strong>无任何对象引用的对象占据的内存空间的一种机制。GC是后台的<strong>守护进程</strong>。它的特别之处是它是一个低优先级进程，但是可以根据内存的使用情况动态的调整他的优先级。因此，它是在内存中低到一定限度时才会自动运行，从而实现对内存的回收。<strong>这就是垃圾回收的时间不确定的原因。</strong></p><p><strong>为何要这样设计：</strong>因为GC也是进程，也要消耗CPU等资源，如果GC执行过于频繁会对java的程序的执行产生较大的影响（java解释器本来就不快），因此JVM的设计者们选着了不定期的gc。</p><p><strong>GC有关的是: </strong>runtime data area 中的 <strong>heap</strong>（对象实例会存储在这里） 和 <strong>gabage collector方法</strong>。</p><p>程序运行期间，所有对象实例存储在运行时数据区域的heap中，当一个对象不再被引用（使用），它就需要被收回。在GC过程中，这些不再被使用的对象从heap中收回，这样就会有空间被循环利用。</p><p>GC为内存中不再使用的对象进行回收，GC中调用回收的<code>方法</code>–<code>收集器garbage collector</code>. 由于GC要消耗一些资源和时间，Java 在对对象的生命周期特征（eden or survivor）进行分析之后，采用了<code>分代</code>的方式进行对象的收集，以缩短GC对应用造成的暂停。</p><h6 id="Java内存结构"><a href="#Java内存结构" class="headerlink" title="Java内存结构"></a>Java内存结构</h6><p><img src="/images/jvm_memory.png" alt></p><ul><li><p>新生代（Young Generation）</p><p>大多数对象在新生代中被创建，其中很多对象的生命周期很短。每次新生代的垃圾回收（又称Minor GC）后只有少量对象存活，所以选用<strong>复制算法</strong>，只需要少量的复制成本就可以完成回收。</p><p>新生代内又分三个区：一个Eden区，两个Survivor区（一般而言），大部分对象在Eden区中生成。当Eden区满时，还<strong>存活的对象将被复制到两个Survivor区（中的一个）</strong>。当这个Survivor区满时，此区的存活且不满足“晋升”条件的对象将被<strong>复制到另外一个Survivor区</strong>。对象每经历一次Minor GC，年龄加1，达到“晋升年龄阈值”后，被<strong>放到老年代</strong>，这个过程也称为“晋升”。显然，“晋升年龄阈值”的大小直接影响着对象在新生代中的停留时间，在Serial和ParNew GC两种回收器中，“晋升年龄阈值”通过参数MaxTenuringThreshold设定，默认值为15。</p></li><li><p>老年代（Old Generation）</p><p>在新生代中<strong>经历了N次垃圾回收后仍然存活的对象</strong>，就会被放到年老代，该区域中对象存活率高。老年代的垃圾回收（又称Major GC）通常使用<strong>“标记-清理”或“标记-整理”算法</strong>。整堆包括新生代和老年代的垃圾回收称为Full GC（HotSpot VM里，除了CMS之外，其它能收集老年代的GC都会同时收集整个GC堆，包括新生代）。</p></li><li><p>永久代（Perm Generation）</p><p>主要<strong>存放元数据</strong>，例如Class、Method的元信息，与垃圾回收要回收的Java对象关系不大。相对于新生代和年老代来说，该区域的划分对垃圾回收影响比较小。</p><p>永久代<a href="http://javapapers.com/java/java-8-features/" target="_blank" rel="noopener">在Java SE8特性</a>中已经被移除，引入了<strong>MetaSpace</strong> 。</p></li></ul><h6 id="常见的垃圾回收器"><a href="#常见的垃圾回收器" class="headerlink" title="常见的垃圾回收器"></a>常见的垃圾回收器</h6><p>不同的垃圾回收器，适用于不同的场景。常用的垃圾回收器：</p><ul><li>串行（Serial）回收器是单线程的一个回收器，简单、易实现、效率高。</li><li>并行（ParNew）回收器是Serial的多线程版，可以充分的利用CPU资源，减少回收的时间。</li><li>吞吐量优先（Parallel Scavenge）回收器，侧重于吞吐量的控制。</li><li>并发标记清除（CMS，Concurrent Mark Sweep）回收器是一种以获取最短回收停顿时间为目标的回收器，该回收器是基于“标记-清除”算法实现的。</li></ul><h6 id="Java对象的引用"><a href="#Java对象的引用" class="headerlink" title="Java对象的引用"></a>Java对象的引用</h6><ul><li><p>强引用（Strong Reference）</p><p>是最普遍的引用。如果一个对象具有强引用，那<strong>垃圾回收器</strong>绝不会回收它。</p></li><li><p>软引用（Soft Reference）</p><p><strong>SoftReference&lt;&gt; </strong>修饰的对象具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。</p></li><li><p>弱引用（Weak Reference）</p><p>弱引用与软引用的区别在于：<strong>只具有弱引用的对象拥有更短暂的生命周期</strong>。在垃圾回收器线程扫描它所管辖的内存区域的过程中，<strong>一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存</strong>。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p></li><li><p>虚引用（Phantom Reference）</p><p>“虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。</p><p>虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。</p></li></ul><table><thead><tr><th><strong>引用类型</strong></th><th><strong>被垃圾回收时间</strong></th><th><strong>用途</strong></th><th><strong>生存时间</strong></th></tr></thead><tbody><tr><td>强引用</td><td>从来不会</td><td>对象的一般状态</td><td>JVM停止运行时终止</td></tr><tr><td>软引用</td><td>在内存不足时</td><td>对象缓存</td><td>内存不足时终止</td></tr><tr><td>弱引用</td><td>在垃圾回收时</td><td>对象缓存</td><td>gc运行后终止</td></tr><tr><td>虚引用</td><td>Unknown</td><td>Unknown</td><td>Unknown</td></tr></tbody></table><hr><p>参考：</p><ol><li><a href="https://www.cnblogs.com/lishun1005/p/6019678.html" target="_blank" rel="noopener">(转)Java 详解 JVM 工作原理和流程</a></li><li><a href="https://segmentfault.com/a/1190000002579346" target="_blank" rel="noopener">JVM 的 工作原理，层次结构 以及 GC工作原理</a></li><li><a href="https://www.jianshu.com/p/5261a62e4d29" target="_blank" rel="noopener">浅析JAVA的垃圾回收机制（GC）</a></li><li><a href="https://tech.meituan.com/2017/12/29/jvm-optimize.html" target="_blank" rel="noopener">从实际案例聊聊Java应用的GC优化</a></li><li><a href="https://blog.csdn.net/mazhimazh/article/details/19752475" target="_blank" rel="noopener">Java 7之基础 - 强引用、弱引用、软引用、虚引用</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;JVM机制&quot;&gt;&lt;a href=&quot;#JVM机制&quot; class=&quot;headerlink&quot; title=&quot;JVM机制&quot;&gt;&lt;/a&gt;JVM机制&lt;/h4&gt;&lt;h5 id=&quot;java的构成及关系&quot;&gt;&lt;a href=&quot;#java的构成及关系&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="java" scheme="https://tanjunze.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://tanjunze.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java HashMap</title>
    <link href="https://tanjunze.github.io/2019/01/13/Java%20HashMap/"/>
    <id>https://tanjunze.github.io/2019/01/13/Java HashMap/</id>
    <published>2019-01-12T21:18:03.000Z</published>
    <updated>2019-03-26T07:24:22.403Z</updated>
    
    <content type="html"><![CDATA[<h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><h5 id="HashMap-1"><a href="#HashMap-1" class="headerlink" title="HashMap"></a>HashMap</h5><p>HashMap基于哈希表的 Map 接口的实现。此实现提供所有可选的映射操作，并<strong>允许使用 null 值和 null 键</strong>。（除了<strong>不同步</strong>和允许使用 null 之外，HashMap 类与 Hashtable 大致相同。）此类<strong>不保证映射的顺序</strong>，特别是它<strong>不保证该顺序恒久不变</strong>。<br>值得注意的是HashMap不是线程安全的，如果想要线程安全的HashMap，可以通过Collections类的静态方法synchronizedMap获得线程安全的HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map map = Collections.synchronizedMap(<span class="keyword">new</span> HashMap());</span><br></pre></td></tr></table></figure><h5 id="HashMap数据结构"><a href="#HashMap数据结构" class="headerlink" title="HashMap数据结构"></a>HashMap数据结构</h5><p>HashMap的底层主要基于<strong>数组</strong>和<strong>链表</strong>实现的，它之所以查询速度相当快主要因为它通过计算散列码来决定存储的位置。HashMap主要通过key的hashcode来计算hash值，只有hashcode相同，计算出来的hash值就一样，就会出现hash冲突。HashMap底层是通过链表来解决hash冲突的。</p><p><img src="/images/hashmap.png" alt></p><p>HashMap中有<strong>数组</strong>和<strong>链表</strong>(1.8之后根据阈值使用红黑数)来实现存储：</p><p><strong>数组：</strong></p><p>数组存储区间是连续的，占用内存严重，故空间复杂度大。但数组的二分查找时间复杂度小，为O(1)； 数组特点：寻址容易，插入和删除困难；</p><p><strong>链表</strong></p><p>链表存储区间离散，占用内存比较宽松，故空间复杂度很小，但时间复杂度很大，达O（N）。链表特点：寻址困难，插入和删除容易。</p><p><strong>哈希表</strong></p><p>综合两者的特性，做出一种寻址容易，插入删除也容易的数据结构，这就是<strong>哈希表</strong>。 <strong>哈希表有多种不同的实现方法</strong>，HashMap则使用的是<strong>拉链法</strong>，也叫作<strong>【链地址法】</strong>；</p><h5 id="HashMap的存储"><a href="#HashMap的存储" class="headerlink" title="HashMap的存储"></a>HashMap的存储</h5><p>HashMap中有两个很重要的参数，容量(Capacity)和负载因子(Load factor)</p><ul><li>size</li></ul><p>size表示HashMap中存放KV的数量（为链表和树中的KV的总和）</p><ul><li><p>Capacity</p><p>capacity就是指HashMap中桶(数组)的数量。默认值为16。一般第一次扩容时会扩容到64。<strong>容量都是2的幂</strong>。</p></li><li><p>loadFactor</p></li><li><p>装载因子。装载因子用来衡量HashMap满的程度。loadFactor的默认值为0.75f。计算HashMap的实时装载因子的方法为：size/capacity，而不是占用桶的数量去除以capacity。</p></li></ul><p><strong>put函数的实现</strong></p><ol><li>对key的hashCode()做hash，再计算（index = (array.length - 1) &amp; hash]）当前key需要存储数组的位置;（不顺序的原因）</li><li>如果没碰撞，直接放到数组中；</li><li>如果碰撞了，当前数组位置的链表中；</li><li>如果碰撞导致链表过长(大于等于TREEIFY_THRESHOLD)，就把链表转换成红黑树；</li><li>如果节点已经存在就替换old value(保证key的唯一性)</li><li>如果数组满了(超过load factor*current capacity)，就要resize。</li></ol><p><strong>get函数的实现</strong></p><ol><li>bucket（数组）里的第一个节点，直接命中；</li><li>如果有冲突，则通过key.equals(k)去查找对应的entry<br>若为树，则在树中通过key.equals(k)查找，O(logn)；<br>若为链表，则在链表中通过key.equals(k)查找，O(n)。</li></ol><hr><p>参考：</p><ol><li><a href="https://blog.csdn.net/jianyuerensheng/article/details/51579091" target="_blank" rel="noopener">数据结构】HashMap原理及实现学习总结</a></li><li><a href="https://zhuanlan.zhihu.com/p/38615394" target="_blank" rel="noopener">HashMap结构详解</a></li><li><a href="https://blog.csdn.net/CSDN_Terence/article/details/77711687" target="_blank" rel="noopener">HashMap设计原理、HashMap的数据结构、HashMap源码实现</a></li><li><a href="https://yikun.github.io/2015/04/01/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">Java HashMap工作原理及实现</a></li><li><a href="https://blog.csdn.net/fan2012huan/article/details/51087722" target="_blank" rel="noopener">HashMap中capacity、loadFactor、threshold、size等概念的解释</a></li><li><a href="https://crossoverjie.top/2018/07/23/java-senior/ConcurrentHashMap/" target="_blank" rel="noopener">HashMap? ConcurrentHashMap? 相信看完这篇没人能难住你！</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;HashMap&quot;&gt;&lt;a href=&quot;#HashMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap&quot;&gt;&lt;/a&gt;HashMap&lt;/h4&gt;&lt;h5 id=&quot;HashMap-1&quot;&gt;&lt;a href=&quot;#HashMap-1&quot; class=&quot;header
      
    
    </summary>
    
      <category term="java" scheme="https://tanjunze.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://tanjunze.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java数据结构</title>
    <link href="https://tanjunze.github.io/2018/12/30/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://tanjunze.github.io/2018/12/30/Java数据结构/</id>
    <published>2018-12-29T16:08:56.000Z</published>
    <updated>2019-03-26T07:28:30.028Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Collection.jpg" alt></p><hr><p>来源：</p><ol><li><a href="http://tengj.top/2016/04/12/javajhtotal/" target="_blank" rel="noopener">Java集合干货系列-集合总体大纲</a></li><li><a href="https://www.jianshu.com/p/047e33fdefd2" target="_blank" rel="noopener">深入Java源码解析容器类List、Set、Map</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/Collection.jpg&quot; alt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;来源：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://tengj.top/2016/04/12/javajhtotal/&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
      <category term="java" scheme="https://tanjunze.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://tanjunze.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础知识</title>
    <link href="https://tanjunze.github.io/2018/12/10/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://tanjunze.github.io/2018/12/10/Java基础知识/</id>
    <published>2018-12-09T23:38:33.000Z</published>
    <updated>2019-03-26T07:27:32.980Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java-三大特性"><a href="#Java-三大特性" class="headerlink" title="Java 三大特性"></a>Java 三大特性</h4><h5 id="1、封装"><a href="#1、封装" class="headerlink" title="1、封装"></a>1、封装</h5><p><strong>定义：</strong>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问。</p><p><strong>好处:</strong></p><ul><li>减少耦合</li><li>类内部的结构可以自由修改</li><li>可以对成员变量进行精准控制</li><li>隐藏信息，实现细节</li></ul><p><strong>权限修饰符</strong></p><table><thead><tr><th>修饰符</th><th>同一类</th><th>同一包</th><th>不同包的子类</th><th>不同包的非子类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td></td><td></td><td></td></tr><tr><td>default</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><h5 id="2、继承"><a href="#2、继承" class="headerlink" title="2、继承"></a>2、继承</h5><p><strong>定义：</strong> 子类继承父类的特征和行为。在java中使用<code>extends</code>实现继承父类</p><p><strong>好处：</strong></p><ul><li>实现代码的复用</li></ul><p><strong>分类：</strong></p><ul><li><p>单继承</p><p>子类只有一个父类的关系称为单继承。在java中使用<code>extends</code>实现</p></li><li><p>多继承</p><p>子类有多个父类的关系称为多继承。java 中不支持多继承，但可以使用<code>implements</code>实现多继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="3、多态"><a href="#3、多态" class="headerlink" title="3、多态"></a>3、多态</h5><p><strong>定义：</strong>多态是同一个行为具有多个不同表现形式或形态的能力</p><p><strong>好处：</strong></p><ul><li>类型间的解耦</li><li>扩展性和维护性</li></ul><p><strong>多态的必要条件：</strong></p><ul><li>继承</li><li>重写（重新定义父类方法）</li><li>向上转型（父类引用指向子类对象）</li></ul><p><strong>多态的实现：</strong></p><ul><li><p>基于继承实现</p><p>子类重写父类方法，使多个子类对同一方法的重写可以表现不同的行为。</p></li><li><p>基于接口实现</p><p>通过实现接口并覆盖接口中的方法，同一接口下的子类方法具有不同的行为。</p></li></ul><h4 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h4><h5 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h5><p><strong>定义：</strong>使用<code>abstract</code>修饰的类。</p><p><strong>特点：</strong></p><ul><li>抽象类不能直接实例化。</li><li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</li><li>抽象方法只是声明，不能实现，必须在子类中实现</li></ul><p>#####接口 </p><p><strong>定义：</strong>使用<code>interface</code>修饰的类</p><p><strong>特点：</strong>：</p><ul><li>接口是隐式抽象的，不必使用<code>abstract</code>关键字。</li><li>接口中每一个方法也是隐式抽象的。且是public</li><li>接口中的方法都是public。</li><li>接口允许继承和<strong>多继承</strong>。</li><li>一个类可以实现多个接口</li><li>接口中的变量会被隐式的指定为 <strong>public static final</strong> 变量</li></ul><p><strong>实现：</strong> 使用<code>implements</code>实现接口，可以继承接口，也一个多继承。</p><h4 id="String-、StringBuffer-、StringBuider"><a href="#String-、StringBuffer-、StringBuider" class="headerlink" title="String 、StringBuffer 、StringBuider"></a>String 、StringBuffer 、StringBuider</h4><p><strong>String：</strong>  是由final修饰的char数组构成的字符串常量，只能赋值一次，字符串长度不可变。String 使用‘+’号拼接时jvm会隐式的转换成StringBuilder拼接字符串。在单行用加号拼接字符串是没有性能损失的，有循环的情况下，仍然会有不必要的性能损耗 。</p><p>String不可变对象的理解。String 在赋值，替换等操作会创建新String对象，原对象没有改变，依然在内存中。指向原对象的引用在赋值，替换等操作后指向创建的新String对象。</p><p><strong>StringBuffer：</strong>线程安全的可变字符串。</p><p><strong>StringBuilder：</strong>非线程安全的可变字符串。</p><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><p><strong>定义：</strong>Java中允许<strong>运行时</strong>操作类或者获取对象内部属性的机制。</p><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><p><strong>定义：</strong>Java标注，可以在代码中插入<strong>元数据</strong>的语法。在代码使用注解可以通过反射获取标注的内容。</p><p><strong>作用：</strong></p><ul><li>编写文档：通过代码里标识的元数据生成文档；</li><li>代码分析：通过代码里标识的元数据对代码进行分析；</li><li>编译检查：通过代码里标识的元数据让编译器能实现基本的编译检查；</li></ul><p><strong>内置注解</strong>：</p><ul><li><code>@Override</code> - 检查该方法是否是重载方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</li><li><code>@Deprecated</code> - 标记过时方法。如果使用该方法，会报编译警告。</li><li><code>@SuppressWarnings</code> - 指示编译器去忽略注解中声明的警告。</li></ul><p><strong>注解的注解：</strong></p><ul><li><p>@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。</p><ul><li>RetentionPolicy.SOURCE 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽视。</li><li>RetentionPolicy.CLASS 注解只被保留到编译进行的时候，它并不会被加载到 JVM 中。</li><li>RetentionPolicy.RUNTIME 注解可以保留到程序运行的时候，它会被加载进入到 JVM 中，所以在程序运行时可以获取到它们。</li></ul></li><li><p><code>@Documented</code> - 标记这些注解是否包含在用户文档中。</p></li><li><p><code>@Target</code> - 标记这个注解应该是哪种 Java 成员。</p><ul><li>ElementType.ANNOTATION_TYPE 可以给一个注解进行注解</li><li>ElementType.CONSTRUCTOR 可以给构造方法进行注解</li><li>ElementType.FIELD 可以给属性进行注解</li><li>ElementType.LOCAL_VARIABLE 可以给局部变量进行注解</li><li>ElementType.METHOD 可以给方法进行注解</li><li>ElementType.PACKAGE 可以给一个包进行注解</li><li>ElementType.PARAMETER 可以给一个方法内的参数进行注解</li><li>ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举</li></ul></li><li><p><code>@Inherited</code> - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Inherited</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@interface InheritedTest &#123;&#125;</span><br><span class="line"></span><br><span class="line">@InheritedTest</span><br><span class="line">public class Parent&#123;&#125;</span><br><span class="line"></span><br><span class="line">public class Child extends Parent &#123;&#125;</span><br></pre></td></tr></table></figure><p>如代码所示，Child类继承了含有InheritedTest注解的Parent类，此时Child也含有相同的注解。</p></li><li><p><code>@SafeVarargs</code> - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</p></li><li><p><code>@FunctionalInterface</code> - Java 8 开始支持，标识一个匿名函数或函数式接口。</p></li><li><p>@Repeatable Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</p></li></ul><p><strong>自定义注解</strong></p><p>使用<code>@interface</code>声明注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、声明Test标注</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Test &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2、使用注解</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>注解中的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnnotation &#123;</span><br><span class="line"> <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "java"</span>;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">phone</span><span class="params">()</span> <span class="keyword">default</span> 1111111</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TestAnnotation</span>(name=<span class="string">"tanzj"</span>,phone=<span class="number">1788888888</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认注解，注解内仅有一个value属性。</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Check &#123;</span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Check</span>(<span class="string">"hi"</span>)</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="meta">@Check</span>(value=<span class="string">"hi"</span>)</span><br><span class="line"><span class="keyword">int</span> a;</span><br></pre></td></tr></table></figure><p>注解的提取</p><p>注解是的提取是使用反射获取的。</p><ol><li>通过 Class 对象的<strong>isAnnotationPresent() </strong>方法判断它是否应用了某个注解</li><li>通过<strong>getAnnotation() </strong>或 <strong>getAnnotations()</strong>方法来获取 Annotation 对象</li><li></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TestAnnotation</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line"><span class="keyword">boolean</span> hasAnnotation = Test.class.isAnnotationPresent(TestAnnotation.class);</span><br><span class="line"><span class="keyword">if</span> ( hasAnnotation ) &#123;</span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">TestAnnotation testAnnotation = Test.class.getAnnotation(TestAnnotation.class);System.out.println(<span class="string">"name:"</span>+testAnnotation.name());      System.out.println(<span class="string">"phone:"</span>+testAnnotation.phone());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>应用实例</strong></p><p>JUnit，ButterKnife，Dagger2，Retrofit等。</p><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><p>依赖抽象，用于代码的解耦。</p><h4 id="Java代理"><a href="#Java代理" class="headerlink" title="Java代理"></a>Java代理</h4><p>代理是一种设计模式，为其他对象提供一个代理已控制对象的访问。主要为了解耦操作。</p><p><strong>静态代理</strong></p><p><img src="/images/javaproxy.webp" alt></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、代理接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISubject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String something)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2、真实的委托类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">ISubject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String something)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在做："</span> + something);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3、代理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxySubject</span> <span class="keyword">implements</span> <span class="title">ISubject</span> </span>&#123;</span><br><span class="line">    <span class="comment">//代理类持有一个委托类的对象引用</span></span><br><span class="line">    <span class="keyword">private</span> ISubject delegate;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">ProxySubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ISubject <span class="title">getISubject</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delegate==<span class="keyword">null</span>) &#123;</span><br><span class="line">            delegate=<span class="keyword">new</span> RealSubject();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> delegate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String something)</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用真实的委托类处理</span></span><br><span class="line">        getISubject().doSomething(something);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 4、调用委托类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ISubject proxy =<span class="keyword">new</span> ProxySubject()</span><br><span class="line">        proxy.doSomething(<span class="string">"codeing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><p>业务类只需要关注业务逻辑本身，保证了业务类的重用性。这是代理的共有优点。</p><p><strong>缺点：</strong></p><p>1、代理对象的一个接口只服务于一种类型的对象，如果要代理的方法很多，势必要为每一种方法都进行代理，静态代理在程序规模稍大时就无法胜任了。</p><p>2、如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。</p><p><strong>动态代理</strong></p><p><strong>定义：</strong>在运行期间确定代理类和委托类之间的关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法 1: 该方法用于获取指定代理对象所关联的调用处理器  </span></span><br><span class="line"><span class="function"><span class="keyword">static</span> InvocationHandler <span class="title">getInvocationHandler</span><span class="params">(Object proxy)</span>   </span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="comment">// 方法 2：该方法用于获取关联于指定类装载器和一组接口的动态代理类的类对象  </span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Class <span class="title">getProxyClass</span><span class="params">(ClassLoader loader, Class[] interfaces)</span>   </span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="comment">// 方法 3：该方法用于判断指定类对象是否是一个动态代理类  </span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isProxyClass</span><span class="params">(Class cl)</span>   </span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="comment">// 方法 4：该方法用于为指定类装载器、一组接口及调用处理器生成动态代理类实例  </span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class[] interfaces, InvocationHandler h)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 动态代理类对应的调用处理程序类 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;  </span><br><span class="line">   </span><br><span class="line"> <span class="comment">//代理类持有一个委托类的对象引用  </span></span><br><span class="line"> <span class="keyword">private</span> Object delegate;  </span><br><span class="line">   </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">SubjectInvocationHandler</span><span class="params">(Object delegate)</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.delegate = delegate;  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="meta">@Override</span>  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;  </span><br><span class="line">  <span class="comment">//利用反射机制将请求分派给委托类处理。Method的invoke返回Object对象作为方法执行结果。  </span></span><br><span class="line">   Object result=method.invoke(delegate, args); </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span> </span>&#123;</span><br><span class="line">        ISubject delegate=<span class="keyword">new</span> RealSubject();</span><br><span class="line">        InvocationHandler handler=<span class="keyword">new</span> SubjectInvocationHandler(delegate);</span><br><span class="line">        Sales proxy=(Sales)Proxy.newProxyInstance(delegate.getClass().getClassLoader(), delegate.getClass().getInterfaces(), handler);</span><br><span class="line">        proxy.doSomething(<span class="string">"coding"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><p>动态代理类在运行时有Java反射生成，更加灵活。</p><p><strong>缺点：</strong></p><p>动态代理机制只能代理实现了接口的类</p><h4 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h4><ul><li><p>浅拷贝</p><p>浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是<a href="https://www.baidu.com/s?wd=%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">内存地址</a>（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。</p></li><li><p>深拷贝</p><p>深拷贝会拷贝所有的属性,并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝相比于浅拷贝速度较慢并且花销较大。</p></li></ul><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ol><li><p>多态的机制</p><p>动态绑定，即父类引用指向子类对象。</p></li><li><p>接口与类的区别</p><ul><li>接口不能示例化，类可以。</li><li>接口没有构造函数，类有。</li><li>接口中的所有方法都是抽象的。</li><li>接口不能被类继承只能实现。</li><li>接口支持多继承。</li></ul></li><li><p>接口与抽象类的区别</p><ul><li>抽象类中方法可以有方法的实现。接口方法不行。</li><li>抽象类中的成员变量可以是任意类型，接口中的成员变量只能是<strong>public static final</strong>类型的。</li><li>抽象类中可以有静态代码块和静态方法，接口没有。</li><li>一个类只能继承一个抽象类，一个类可以实现多个接口</li></ul></li><li><p>抽象类可以用final声明么？</p><p>不能，抽象类必须有子类，使用final 定义的类不能有子类。</p></li><li><p>抽象类可以用static声明么？</p><p>可以在内部抽象类中使用。使用static申明的内部类属于外部类。</p></li><li><p>父类的静态方法能不能被子类重写？</p><p>不能。</p></li><li><p>Java 中的 ==, equals 与 hashCode 的区别</p><ul><li><p>==</p><ol><li>基本数据类型时，判断<strong>值</strong>是否相等。</li><li>引用数据类型时，判断<strong>内存地址</strong>是否相等即是否是同一个对象。</li></ol></li><li><p>equals</p><p>判断对象是否一致</p></li><li><p>hashCode</p><p>表示对象的唯一性，用来快速检索对象。</p></li></ul></li></ol><hr><p>参考：</p><ol><li><a href="http://www.runoob.com/java/java-interfaces.html" target="_blank" rel="noopener">runoob</a></li><li><a href="https://blog.csdn.net/wei_zhi/article/details/52736350" target="_blank" rel="noopener">Java抽象类 详解</a></li><li><a href="https://blog.csdn.net/kingzone_2008/article/details/9220691" target="_blank" rel="noopener">Java：String、StringBuffer和StringBuilder的区别</a></li><li><a href="https://www.jianshu.com/p/16480390a847" target="_blank" rel="noopener">解读不可变的String</a></li><li><a href="https://blog.csdn.net/renfufei/article/details/16808775" target="_blank" rel="noopener">为什么String要设计成不可变的?</a></li><li><a href="https://blog.csdn.net/justloveyou_/article/details/52464440" target="_blank" rel="noopener">Java 中的 ==, equals 与 hashCode 的区别与联系</a></li><li><a href="https://zh.wikipedia.org/wiki/Java%E6%B3%A8%E8%A7%A3" target="_blank" rel="noopener">Java注解</a></li><li><a href="https://blog.csdn.net/briblue/article/details/73824058" target="_blank" rel="noopener">秒懂，Java 注解 （Annotation）你可以这样学</a></li><li><a href="https://www.jianshu.com/p/4068da3c8d3d" target="_blank" rel="noopener">Java注解深入理解</a></li><li><a href="https://www.jianshu.com/p/2f518a4a4c2b" target="_blank" rel="noopener">Java静态代理和动态代理</a></li><li><a href="https://www.jianshu.com/p/861223789d53" target="_blank" rel="noopener">Java代理和动态代理机制分析和应用</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Java-三大特性&quot;&gt;&lt;a href=&quot;#Java-三大特性&quot; class=&quot;headerlink&quot; title=&quot;Java 三大特性&quot;&gt;&lt;/a&gt;Java 三大特性&lt;/h4&gt;&lt;h5 id=&quot;1、封装&quot;&gt;&lt;a href=&quot;#1、封装&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="java" scheme="https://tanjunze.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://tanjunze.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>私有Dart Package Sever</title>
    <link href="https://tanjunze.github.io/2018/10/12/Dart%20Package%20Server/"/>
    <id>https://tanjunze.github.io/2018/10/12/Dart Package Server/</id>
    <published>2018-10-12T00:00:00.000Z</published>
    <updated>2018-12-28T05:43:44.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建私有-Dart-Package-Server"><a href="#搭建私有-Dart-Package-Server" class="headerlink" title="搭建私有 Dart Package Server"></a>搭建私有 Dart Package Server</h2><h3 id="1、搭建Dart-Package-Server"><a href="#1、搭建Dart-Package-Server" class="headerlink" title="1、搭建Dart Package Server"></a>1、搭建Dart Package Server</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;搭建私有-Dart-Package-Server&quot;&gt;&lt;a href=&quot;#搭建私有-Dart-Package-Server&quot; class=&quot;headerlink&quot; title=&quot;搭建私有 Dart Package Server&quot;&gt;&lt;/a&gt;搭建私有 Dart Pack
      
    
    </summary>
    
      <category term="前端" scheme="https://tanjunze.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Dart" scheme="https://tanjunze.github.io/tags/Dart/"/>
    
      <category term="Flutter" scheme="https://tanjunze.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Docker命令笔记</title>
    <link href="https://tanjunze.github.io/2018/08/17/Docker%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/"/>
    <id>https://tanjunze.github.io/2018/08/17/Docker命令笔记/</id>
    <published>2018-08-17T10:15:12.000Z</published>
    <updated>2019-02-26T07:18:10.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Docker-安装"><a href="#一、Docker-安装" class="headerlink" title="一、Docker 安装"></a>一、Docker 安装</h2><p>本示例采用sh脚本安装,其他方式参考<a href="https://docs.docker.com/install/linux/docker-ce/centos/#uninstall-docker-ce" target="_blank" rel="noopener">Docker CE</a>官网。<br><a id="more"></a></p><ul><li><p>0、root用户登陆</p></li><li><p>1、升级yum包：</p><blockquote><p>$ sudo yum update</p></blockquote></li><li><p>2、（可选）卸载旧的Docker</p><blockquote><p>$ sudo yum erase docker docker-common docker-client docker-compose</p></blockquote></li><li><p>4、执行 Docker 安装脚本</p><blockquote><p>$ curl -fsSL <a href="https://get.docker.com/" target="_blank" rel="noopener">https://get.docker.com/</a> | sh<br>或<br>$ wget -qO- <a href="https://get.docker.com/" target="_blank" rel="noopener">https://get.docker.com/</a> | sh</p></blockquote></li><li><p>5、测试Docker</p><blockquote><p>$ docker info</p></blockquote></li><li><p>6、设置Docker开机启动</p><blockquote><p>$ sudo systemctl enable docker.service</p></blockquote></li><li><p>7、开启Docker服务</p><blockquote><p>$ sudo systemctl start docker</p></blockquote></li></ul><h2 id="二、Docker-Compose-安装"><a href="#二、Docker-Compose-安装" class="headerlink" title="二、Docker Compose 安装"></a>二、Docker Compose 安装</h2><ul><li><p>1、下载安装脚本</p><blockquote><p>$ curl -L <a href="https://github.com/docker/compose/releases/download/1.21.1/docker-compose-`uname" target="_blank" rel="noopener">https://github.com/docker/compose/releases/download/1.21.1/docker-compose-`uname</a> -s<code>-</code>uname -m` -o /usr/local/bin/docker-compose</p></blockquote></li><li><p>2、添加执行权限</p><blockquote><p>$ chmod +x /usr/local/bin/docker-compose</p></blockquote></li></ul><h2 id="三、Docker-常用命令"><a href="#三、Docker-常用命令" class="headerlink" title="三、Docker 常用命令"></a>三、Docker 常用命令</h2><ul><li><p>Docker 启动</p><blockquote><p>$ sudo systemctl start docker</p></blockquote></li><li><p>docker 开机启动</p><blockquote><p>$ sudo systemctl enable docker.service</p></blockquote></li><li><p>docker 当前容器开机启动</p><blockquote><p>$ docker run -d –restart=always </p></blockquote></li><li><p>容器终端</p><blockquote><p>$ docker exec -it &lt;容器id&gt; /bin/bash</p></blockquote></li><li><p>挂载目录</p><blockquote><p>$ docker run -d -v &lt;主机目录路径&gt;:&lt;容器目录路径 &gt;</p></blockquote></li><li><p>示例：</p><blockquote><p>$ docker run -d –restart=always -v /root/notebooks:/notebooks -it -p 8888:8888 tensorflow/tensorflow:latest-py3</p></blockquote></li><li><p>拉取镜像</p><blockquote><p>$ docker pull &lt;镜像tag&gt;</p></blockquote></li><li><p>查看运行中的容器</p><blockquote><p>$ docker ps</p></blockquote></li><li><p>查看所有容器</p><blockquote><p>$ docker ps -a</p></blockquote></li><li><p>关闭容器</p><blockquote><p>$ docker stop &lt;容器id&gt;</p></blockquote></li><li><p>强制删除容器</p><blockquote><p>$ docker rm -f &lt;容器id&gt;</p></blockquote></li><li><p>查看镜像文件</p><blockquote><p>$ docker images</p></blockquote></li><li><p>删除镜像文件</p><blockquote><p>docker rmi &lt;镜像id&gt;</p></blockquote></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li>[1]、<a href="https://docs.docker.com/install/linux/docker-ce/centos/#uninstall-docker-ce" target="_blank" rel="noopener">Docker CE</a></li><li>[2]、<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">Docker Compose</a></li><li>[3]、<a href="https://www.jianshu.com/p/adaa34795e64" target="_blank" rel="noopener">Docker 常用命令与操作</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Docker-安装&quot;&gt;&lt;a href=&quot;#一、Docker-安装&quot; class=&quot;headerlink&quot; title=&quot;一、Docker 安装&quot;&gt;&lt;/a&gt;一、Docker 安装&lt;/h2&gt;&lt;p&gt;本示例采用sh脚本安装,其他方式参考&lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/centos/#uninstall-docker-ce&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker CE&lt;/a&gt;官网。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://tanjunze.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://tanjunze.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 整理</title>
    <link href="https://tanjunze.github.io/2018/07/13/Flutter%E6%95%B4%E7%90%862/"/>
    <id>https://tanjunze.github.io/2018/07/13/Flutter整理2/</id>
    <published>2018-07-12T21:22:10.000Z</published>
    <updated>2019-02-26T07:17:26.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dart-Package"><a href="#Dart-Package" class="headerlink" title="Dart Package"></a>Dart Package</h2><p><a href="https://www.dartlang.org/tools/pub" target="_blank" rel="noopener">https://www.dartlang.org/tools/pub</a></p><h4 id="创建dart-包"><a href="#创建dart-包" class="headerlink" title="创建dart 包"></a>创建dart 包</h4><p><a href="https://www.dartlang.org/guides/libraries/create-library-packages" target="_blank" rel="noopener">https://www.dartlang.org/guides/libraries/create-library-packages</a></p><h4 id="dart包依赖"><a href="#dart包依赖" class="headerlink" title="dart包依赖"></a>dart包依赖</h4><p><a href="https://www.dartlang.org/tools/pub/dependencies#path-packages" target="_blank" rel="noopener">https://www.dartlang.org/tools/pub/dependencies#path-packages</a></p><h5 id="依赖自建-pub-server"><a href="#依赖自建-pub-server" class="headerlink" title="依赖自建 pub server"></a>依赖自建 pub server</h5><p><a href="https://www.dartlang.org/tools/pub/dependencies#hosted-packages" target="_blank" rel="noopener">https://www.dartlang.org/tools/pub/dependencies#hosted-packages</a></p><p>自建私有服务器Github： <a href="https://github.com/dart-lang/pub_server" target="_blank" rel="noopener">pub server</a></p><h5 id="依赖Git仓库"><a href="#依赖Git仓库" class="headerlink" title="依赖Git仓库"></a>依赖Git仓库</h5><p><a href="https://www.dartlang.org/tools/pub/dependencies#git-packages" target="_blank" rel="noopener">https://www.dartlang.org/tools/pub/dependencies#git-packages</a></p><h5 id="本地仓库依赖"><a href="#本地仓库依赖" class="headerlink" title="本地仓库依赖"></a>本地仓库依赖</h5><p><a href="https://www.dartlang.org/tools/pub/dependencies#path-packages" target="_blank" rel="noopener">https://www.dartlang.org/tools/pub/dependencies#path-packages</a></p><h2 id="Flutter-Package"><a href="#Flutter-Package" class="headerlink" title="Flutter Package"></a>Flutter Package</h2><p><a href="https://flutter.io/docs/development/packages-and-plugins/using-packages" target="_blank" rel="noopener">https://flutter.io/docs/development/packages-and-plugins/using-packages</a></p><h4 id="开发Flutter包"><a href="#开发Flutter包" class="headerlink" title="开发Flutter包"></a>开发Flutter包</h4><p><a href="https://flutter.io/docs/development/packages-and-plugins/developing-packages" target="_blank" rel="noopener">https://flutter.io/docs/development/packages-and-plugins/developing-packages</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Dart-Package&quot;&gt;&lt;a href=&quot;#Dart-Package&quot; class=&quot;headerlink&quot; title=&quot;Dart Package&quot;&gt;&lt;/a&gt;Dart Package&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.dartlang.
      
    
    </summary>
    
      <category term="Flutter" scheme="https://tanjunze.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="https://tanjunze.github.io/tags/Flutter/"/>
    
      <category term="前端" scheme="https://tanjunze.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android Binder 机制</title>
    <link href="https://tanjunze.github.io/2018/06/18/Android%20Binder%20%E6%9C%BA%E5%88%B6/"/>
    <id>https://tanjunze.github.io/2018/06/18/Android Binder 机制/</id>
    <published>2018-06-17T16:22:04.000Z</published>
    <updated>2019-02-28T05:42:17.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Binder-机制"><a href="#Android-Binder-机制" class="headerlink" title="Android  Binder 机制"></a>Android  Binder 机制</h1><p>Binder 在Android是一个重要的机制。(待补充)</p><p><img src="/images/ams_ipc.jpg" alt></p><hr><p>参考：</p><p>[1]、<a href="http://gityuan.com/2016/09/04/binder-start-service/" target="_blank" rel="noopener">彻底理解Android Binder通信架构</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-Binder-机制&quot;&gt;&lt;a href=&quot;#Android-Binder-机制&quot; class=&quot;headerlink&quot; title=&quot;Android  Binder 机制&quot;&gt;&lt;/a&gt;Android  Binder 机制&lt;/h1&gt;&lt;p&gt;Binder 在
      
    
    </summary>
    
      <category term="Android" scheme="https://tanjunze.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://tanjunze.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 整理</title>
    <link href="https://tanjunze.github.io/2018/06/05/Flutter%E6%95%B4%E7%90%86/"/>
    <id>https://tanjunze.github.io/2018/06/05/Flutter整理/</id>
    <published>2018-06-04T21:00:05.000Z</published>
    <updated>2019-02-26T07:18:02.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p><strong>Flutter 官网</strong></p><p><code>https://flutter.io/</code></p><p><strong>Flutter 中文</strong></p><p><strong>官方：</strong><code>https://flutter-io.cn/</code> </p><p><strong>社区：</strong><code>https://flutterchina.club/</code> </p><p><strong>Dart官网</strong></p><p><code>https://www.dartlang.org/</code></p><p><strong>Dart包管理</strong></p><p><code>https://pub.dartlang.org/</code></p><p><code>https://pub.flutter-io.cn/</code></p><p><strong>Flutter 桌面版</strong></p><p><strong>社区：</strong><code>https://github.com/google/flutter-desktop-embedding</code></p><p><strong>其他：</strong><code>https://feather-apps.com/</code></p><p><strong>codelabs中文：</strong><code>https://codelabs.flutter-io.cn/</code></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><strong>json_serializable</strong></p><p><code>https://caijinglong.github.io/json2dart/index_ch.html</code></p><p><strong>动画</strong></p><p><code>https://www.2dimensions.com/runtimes</code></p><h3 id="博文"><a href="#博文" class="headerlink" title="博文"></a>博文</h3><p><strong>闲鱼</strong></p><p><code>https://www.yuque.com/xytech/flutter</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;文档&quot;&gt;&lt;a href=&quot;#文档&quot; class=&quot;headerlink&quot; title=&quot;文档&quot;&gt;&lt;/a&gt;文档&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Flutter 官网&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://flutter.io/&lt;/code&gt;&lt;/p
      
    
    </summary>
    
      <category term="Flutter" scheme="https://tanjunze.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="https://tanjunze.github.io/tags/Flutter/"/>
    
      <category term="前端" scheme="https://tanjunze.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记之ssh</title>
    <link href="https://tanjunze.github.io/2018/05/23/linux%E7%AC%94%E8%AE%B0%E4%B9%8Bssh/"/>
    <id>https://tanjunze.github.io/2018/05/23/linux笔记之ssh/</id>
    <published>2018-05-23T10:08:33.000Z</published>
    <updated>2019-02-26T06:30:22.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、ssh自动脚本登陆"><a href="#1、ssh自动脚本登陆" class="headerlink" title="1、ssh自动脚本登陆"></a>1、ssh自动脚本登陆</h2><ul><li><p>1.1、创建shell脚本，如脚本 login.sh内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/expect                   </span></span><br><span class="line"></span><br><span class="line">set timeout 3                     </span><br><span class="line">spawn ssh user@192.168.3.24       </span><br><span class="line">expect "*password*"                 </span><br><span class="line">send "youPassword\r"   </span><br><span class="line">interact</span><br></pre></td></tr></table></figure><a id="more"></a></li><li>1.2、为自动登陆脚本添加执行权限，如：<blockquote><p>$ sudo chmod +x ./login.sh</p></blockquote></li><li><p>1.3、（可选）为脚本添加别名<br> 打开用户目录下的.bash_profile文件</p><blockquote><p>$ vim ~/.bash_profile</p></blockquote><p>添加 <strong>别名（如：SSLogin）</strong>和 <strong>脚本路径（如：/Users/youAccount/home/login.sh）</strong>保存并退出， 如：</p><blockquote><p>$ alias SSLogin=’/Users/youAccount/home/login.sh’</p></blockquote><p>刷新环境变量</p><blockquote><p>$ source ~/.bash_profile</p></blockquote><p>在终端中直接使用别名 <strong>SSLogin</strong>去登陆了,如</p><blockquote><p>$ SSLogin</p></blockquote></li></ul><h2 id="2、ssh免密码登陆"><a href="#2、ssh免密码登陆" class="headerlink" title="2、ssh免密码登陆"></a>2、ssh免密码登陆</h2><p>   参考博文：<a href="https://www.jianshu.com/p/03effb53705c" target="_blank" rel="noopener">SSH免密码登陆和免ip连接</a></p><p>参考网址：<br>   [1]、<a href="http://xstarcd.github.io/wiki/shell/expect_handbook.html" target="_blank" rel="noopener">expect教程中文版</a><br>   [2]、<a href="https://www.cnblogs.com/zhenbianshu/p/5867440.html" target="_blank" rel="noopener">shell实现SSH自动登陆</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、ssh自动脚本登陆&quot;&gt;&lt;a href=&quot;#1、ssh自动脚本登陆&quot; class=&quot;headerlink&quot; title=&quot;1、ssh自动脚本登陆&quot;&gt;&lt;/a&gt;1、ssh自动脚本登陆&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.1、创建shell脚本，如脚本 login.sh内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;!/usr/bin/expect                   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set timeout 3                     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spawn ssh user@192.168.3.24       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expect &quot;*password*&quot;                 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send &quot;youPassword\r&quot;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;interact&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://tanjunze.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://tanjunze.github.io/tags/Linux/"/>
    
      <category term="SSH" scheme="https://tanjunze.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>MAC命令</title>
    <link href="https://tanjunze.github.io/2018/05/22/Mac%20%E5%91%BD%E4%BB%A4%E6%94%B6%E9%9B%86/"/>
    <id>https://tanjunze.github.io/2018/05/22/Mac 命令收集/</id>
    <published>2018-05-22T15:56:43.000Z</published>
    <updated>2019-02-26T06:29:55.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac-命令"><a href="#Mac-命令" class="headerlink" title="Mac 命令"></a>Mac 命令</h2><h3 id="打开关闭隐藏文件及目录"><a href="#打开关闭隐藏文件及目录" class="headerlink" title="打开关闭隐藏文件及目录"></a>打开关闭隐藏文件及目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shift   commond  .</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mac-命令&quot;&gt;&lt;a href=&quot;#Mac-命令&quot; class=&quot;headerlink&quot; title=&quot;Mac 命令&quot;&gt;&lt;/a&gt;Mac 命令&lt;/h2&gt;&lt;h3 id=&quot;打开关闭隐藏文件及目录&quot;&gt;&lt;a href=&quot;#打开关闭隐藏文件及目录&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Linux" scheme="https://tanjunze.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://tanjunze.github.io/tags/Linux/"/>
    
      <category term="SSH" scheme="https://tanjunze.github.io/tags/SSH/"/>
    
      <category term="Mac" scheme="https://tanjunze.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>树莓派笔记之自动挂载nfts移动硬盘</title>
    <link href="https://tanjunze.github.io/2018/05/21/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BDnfts%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98/"/>
    <id>https://tanjunze.github.io/2018/05/21/树莓派笔记之自动挂载nfts移动硬盘/</id>
    <published>2018-05-21T14:52:53.000Z</published>
    <updated>2018-10-26T05:52:43.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0、插入ntfs的存储设备如：移动硬盘"><a href="#0、插入ntfs的存储设备如：移动硬盘" class="headerlink" title="0、插入ntfs的存储设备如：移动硬盘"></a>0、插入ntfs的存储设备如：移动硬盘</h2><h2 id="1、安装ntfs-3g"><a href="#1、安装ntfs-3g" class="headerlink" title="1、安装ntfs-3g"></a>1、安装<a href="https://en.wikipedia.org/wiki/NTFS-3G" target="_blank" rel="noopener">ntfs-3g</a></h2><blockquote><p>$ sudo apt-get install ntfs-3g</p></blockquote><h2 id="2、查询外接存储目录权限和UUID"><a href="#2、查询外接存储目录权限和UUID" class="headerlink" title="2、查询外接存储目录权限和UUID"></a>2、查询外接存储目录权限和UUID</h2><blockquote><p>$ ls -l /dev/disk/by-uuid/</p></blockquote><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrwxrwxrwx 1 root root 10 Jan 1 1970 0AC4D607C4D5F543 - &gt; ../../sda1</span><br></pre></td></tr></table></figure></p><p>记下UUID - &gt; 0AC4D607C4D5F543的值<br><a id="more"></a></p><h2 id="3、创建挂载点并赋权"><a href="#3、创建挂载点并赋权" class="headerlink" title="3、创建挂载点并赋权"></a>3、创建挂载点并赋权</h2><blockquote><p>$ sudo mkdir /mnt/usbdrive</p></blockquote><blockquote><p>$ sudo chmod 770 /mnt/usbdrive</p></blockquote><h2 id="4、使用id命令获取uid，pi用户和组的gid（通常为1000）"><a href="#4、使用id命令获取uid，pi用户和组的gid（通常为1000）" class="headerlink" title="4、使用id命令获取uid，pi用户和组的gid（通常为1000）"></a>4、使用id命令获取uid，pi用户和组的gid（通常为1000）</h2><blockquote><p>$ id -u pi</p></blockquote><blockquote><p>$ id -g pi</p></blockquote><h2 id="5、挂载，然后检查-mnt-usbdrive是否可以访问它"><a href="#5、挂载，然后检查-mnt-usbdrive是否可以访问它" class="headerlink" title="5、挂载，然后检查/mnt/usbdrive是否可以访问它"></a>5、挂载，然后检查<strong>/mnt/usbdrive</strong>是否可以访问它</h2><blockquote><p>$ sudo mount -t ntfs-3g -o uid=1000，gid=1000，umask=007 /dev/sda1/mnt/usbdrive</p></blockquote><h2 id="6、备份驱动目录并插入新的挂载点"><a href="#6、备份驱动目录并插入新的挂载点" class="headerlink" title="6、备份驱动目录并插入新的挂载点"></a>6、备份驱动目录并插入新的挂载点</h2><p>备份：</p><blockquote><p>$ sudo cp /etc/fstab /etc/fstab.backup </p></blockquote><p>打开驱动目录文件并在最后一行写入新的驱动信息</p><blockquote><p>$ sudo nano /etc/fstab</p></blockquote><p>在fstab文件中添加安装信息（用您自己的UUID，uid，gid替换）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=0AC4D607C4D5F543 /mnt/usbdrive ntfs-3g uid=1000，gid=1000，umask=007 0 0</span><br></pre></td></tr></table></figure></p><h2 id="7、重新启动树莓派"><a href="#7、重新启动树莓派" class="headerlink" title="7、重新启动树莓派"></a>7、重新启动树莓派</h2><blockquote><p>sudo reboot</p></blockquote><h2 id="8、作为NextCloud的存储设备"><a href="#8、作为NextCloud的存储设备" class="headerlink" title="8、作为NextCloud的存储设备"></a>8、作为NextCloud的存储设备</h2><p>在/mnt/usbdrive驱动（移动硬盘）上配置NextCloud的数据目录，则它应该对www-data用户拥有770权限。您可以简单地将用户www-data添加到pi组中，因为它已经拥有770的权限，如上面在fstab中设置的那样。</p><blockquote><p>$ sudo usermod -a -G pi www-data</p></blockquote><p>参考网址：<br>  [1]、<a href="http://www.techjawab.com/2013/06/how-to-setup-mount-auto-mount-usb-hard.html" target="_blank" rel="noopener">How to setup mount / auto-mount USB Hard Drive on Raspberry Pi</a><br>  [2]、<a href="http://ja.cques.ca/blog/2013/09/25/ntfs-external-hd-with-owncloud-on-the-raspberry-pi/" target="_blank" rel="noopener">NTFS External HD With ownCloud on the Raspberry Pi</a><br>  [3]、<a href="https://raspberrypi.stackexchange.com/questions/10236/ntfs-3g-hdd-0770-and-0777-permissions-owncloud" target="_blank" rel="noopener">NTFS-3g HDD 0770 and 0777 permissions Owncloud</a><br>  [4]、<a href="https://www.liaronce.win/archives/776" target="_blank" rel="noopener">通过 NextCloudPi 为树莓派可视化搭建 NextCloud 网盘（并折腾无语的 NTFS 移动硬盘）</a><br>  [5]、<a href="http://shumeipai.nxez.com/2013/09/08/raspberry-pi-to-mount-the-removable-hard-disk.html" target="_blank" rel="noopener">给树莓派挂载移动硬盘或U盘</a><br>  [6]、<a href="http://www.freehao123.com/raspberry-pi-nas/" target="_blank" rel="noopener">树莓派Raspberry Pi 打造低成本NAS存储家庭服务器的十个问题整理</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0、插入ntfs的存储设备如：移动硬盘&quot;&gt;&lt;a href=&quot;#0、插入ntfs的存储设备如：移动硬盘&quot; class=&quot;headerlink&quot; title=&quot;0、插入ntfs的存储设备如：移动硬盘&quot;&gt;&lt;/a&gt;0、插入ntfs的存储设备如：移动硬盘&lt;/h2&gt;&lt;h2 id=&quot;1、安装ntfs-3g&quot;&gt;&lt;a href=&quot;#1、安装ntfs-3g&quot; class=&quot;headerlink&quot; title=&quot;1、安装ntfs-3g&quot;&gt;&lt;/a&gt;1、安装&lt;a href=&quot;https://en.wikipedia.org/wiki/NTFS-3G&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ntfs-3g&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;$ sudo apt-get install ntfs-3g&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2、查询外接存储目录权限和UUID&quot;&gt;&lt;a href=&quot;#2、查询外接存储目录权限和UUID&quot; class=&quot;headerlink&quot; title=&quot;2、查询外接存储目录权限和UUID&quot;&gt;&lt;/a&gt;2、查询外接存储目录权限和UUID&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;$ ls -l /dev/disk/by-uuid/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lrwxrwxrwx 1 root root 10 Jan 1 1970 0AC4D607C4D5F543 - &amp;gt; ../../sda1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;记下UUID - &amp;gt; 0AC4D607C4D5F543的值&lt;br&gt;
    
    </summary>
    
      <category term="树莓派" scheme="https://tanjunze.github.io/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="https://tanjunze.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>树莓派笔记之NextCloud安装</title>
    <link href="https://tanjunze.github.io/2018/05/21/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%AC%94%E8%AE%B0%E4%B9%8BNextCloud%E5%AE%89%E8%A3%85/"/>
    <id>https://tanjunze.github.io/2018/05/21/树莓派笔记之NextCloud安装/</id>
    <published>2018-05-21T13:32:27.000Z</published>
    <updated>2018-10-26T05:52:34.453Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/nextcloud/server" target="_blank" rel="noopener">Nextcloud</a> 是一个免费专业的私有云存储网盘「开源」项目，可以让你简单快速地在个人/公司电脑、服务器甚至是树莓派等设备上架设一套属于自己或团队专属的云同步网盘，从而实现跨平台跨设备文件同步、共享、版本控制、团队协作等功能。</p></blockquote><h2 id="1、NextCloud简单安装的三种方式总结"><a href="#1、NextCloud简单安装的三种方式总结" class="headerlink" title="1、NextCloud简单安装的三种方式总结"></a>1、NextCloud简单安装的三种方式总结</h2><ul><li><p>1.1、使用 docker 安装：<br>文档：<a href="https://github.com/nextcloud/docker" target="_blank" rel="noopener">https://github.com/nextcloud/docker</a></p></li><li><p>1.2、使用 nextcloud-snap 安装<br>文档：<a href="https://github.com/nextcloud/nextcloud-snap" target="_blank" rel="noopener">https://github.com/nextcloud/nextcloud-snap</a></p></li><li><p>1.3 使用VM安装<br>文档：<a href="https://github.com/nextcloud/vm" target="_blank" rel="noopener">https://github.com/nextcloud/vm</a></p><a id="more"></a><p>NextCloud安装官方文档：<a href="https://nextcloud.com/install/#instructions-server" target="_blank" rel="noopener">https://nextcloud.com/install/#instructions-server</a></p></li></ul><h2 id="2、NextCloud在树莓派上的安装方式"><a href="#2、NextCloud在树莓派上的安装方式" class="headerlink" title="2、NextCloud在树莓派上的安装方式"></a>2、NextCloud在树莓派上的安装方式</h2><p>NextCloudPI官方文档：<a href="https://github.com/nextcloud/nextcloudpi" target="_blank" rel="noopener">https://github.com/nextcloud/nextcloudpi</a></p><ul><li><p>2.1、自己构建环境和部署NextCloud<br>博文：<a href="http://unixetc.co.uk/2016/11/20/simple-nextcloud-installation-on-raspberry-pi/" target="_blank" rel="noopener">在Raspberry Pi上简单安装Nextcloud</a></p></li><li><p>2.1、自动脚本构建NextCloud<br>博文：<a href="http://unixetc.co.uk/2017/11/25/automatic-nextcloud-installation-on-raspberry-pi/" target="_blank" rel="noopener">在Raspberry Pi上自动安装Nextcloud</a></p></li><li><p>2.3、刷NextCloudPi镜像文件<br>博文：<a href="https://wzfou.com/raspberry-nextcloud/" target="_blank" rel="noopener">树莓派Raspberry Pi安装NextCloud教程-自建家庭私有云局域网共享</a></p></li><li><p>2.4 使用 docker 安装：<br>文档：<a href="https://github.com/nextcloud/nextcloudpi" target="_blank" rel="noopener">NextCloudPI Github</a></p></li></ul><h2 id="3、NextCloud快速安装笔记"><a href="#3、NextCloud快速安装笔记" class="headerlink" title="3、NextCloud快速安装笔记"></a>3、NextCloud快速安装笔记</h2><p>  这里记录我目前使用的安装方式 <strong>步骤2.1</strong>中关键命令，方便查阅：</p><ul><li><p>3.1、下载<a href="https://en.wikipedia.org/wiki/Ansible_(software" target="_blank" rel="noopener">Ansible</a></p><blockquote><p>$ sudo apt-get -y install ansible</p></blockquote></li><li><p>3.2、下载自动构建脚本</p><blockquote><p>$ wget <a href="https://raw.githubusercontent.com/webtaster/Nextcloud/master/build_nextcloud.yml" target="_blank" rel="noopener">https://raw.githubusercontent.com/webtaster/Nextcloud/master/build_nextcloud.yml</a></p></blockquote></li><li><p>3.3、(可选)使用 <strong>SQLite</strong>安装和配置Nextcloud</p><blockquote><p>$ sudo date ; ansible-playbook -s -c local -i “localhost,” build_nextcloud.yml</p></blockquote></li><li><p>3.4、(可选)使用 <strong>MySQL</strong>安装和配置Nextcloud</p><blockquote><p>$ date ; ansible-playbook -s -c local -i “localhost,” –extra-vars “DATABASE=mysql MYSQL_ROOT_PASSWORD=qwerty NCUSER_PASSWORD=raindrop” build_nextcloud.yml</p></blockquote><p>上面指令中MySQL用户密码（可以自定义）：<br>用户：root     密码：qwerty         对应命令：<strong>MYSQL_ROOT_PASSWORD = qwerty</strong><br>用户：ncuser   密码：rainindrop     对应命令：<strong>NCUSER_PASSWORD = raindrop</strong></p></li><li><p>3.5、初始化配置NextCloud<br>在浏览器中打开</p><blockquote><p>http://树莓派的IP地址/nextcloud</p></blockquote><p>例如：</p><blockquote><p><a href="http://192.168.1.99/nextcloud" target="_blank" rel="noopener">http://192.168.1.99/nextcloud</a></p></blockquote><p>然后根据NextCloud提示配置NextCloud就可以了。</p></li><li><p>3.6、(可选)配置树莓派目录读写权限<br>如果在浏览器中配置NextCloud过程中错误提示“无法创建var/www/html/nextcloud/data“时，ssh等登陆树莓派并赋予<strong>775权限</strong></p><blockquote><p>$ sudo chmod -R 775 /var/www/html/nextcloud/</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nextcloud/server&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nextcloud&lt;/a&gt; 是一个免费专业的私有云存储网盘「开源」项目，可以让你简单快速地在个人/公司电脑、服务器甚至是树莓派等设备上架设一套属于自己或团队专属的云同步网盘，从而实现跨平台跨设备文件同步、共享、版本控制、团队协作等功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、NextCloud简单安装的三种方式总结&quot;&gt;&lt;a href=&quot;#1、NextCloud简单安装的三种方式总结&quot; class=&quot;headerlink&quot; title=&quot;1、NextCloud简单安装的三种方式总结&quot;&gt;&lt;/a&gt;1、NextCloud简单安装的三种方式总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.1、使用 docker 安装：&lt;br&gt;文档：&lt;a href=&quot;https://github.com/nextcloud/docker&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/nextcloud/docker&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1.2、使用 nextcloud-snap 安装&lt;br&gt;文档：&lt;a href=&quot;https://github.com/nextcloud/nextcloud-snap&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/nextcloud/nextcloud-snap&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1.3 使用VM安装&lt;br&gt;文档：&lt;a href=&quot;https://github.com/nextcloud/vm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/nextcloud/vm&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="树莓派" scheme="https://tanjunze.github.io/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="https://tanjunze.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>树莓派笔记之安装配置</title>
    <link href="https://tanjunze.github.io/2018/05/21/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>https://tanjunze.github.io/2018/05/21/树莓派笔记之安装配置/</id>
    <published>2018-05-21T09:38:43.000Z</published>
    <updated>2018-10-26T05:52:39.303Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言： 这篇笔记记录不使用<strong>显示屏</strong>和<strong>网线</strong>来安装系统和配置环境</p></blockquote><h2 id="1、准备"><a href="#1、准备" class="headerlink" title="1、准备"></a>1、准备</h2><ul><li><p>树莓派3b+板子</p></li><li><p>SD存储卡和卡套</p></li><li><p>电源线和插头</p></li><li><p>路由器（有wifi就行）</p><a id="more"></a><h2 id="2、刻录系统"><a href="#2、刻录系统" class="headerlink" title="2、刻录系统"></a>2、刻录系统</h2></li><li><p>2.1、到<strong><a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener">树莓派官网</a></strong>下载系统系统文件并解压</p></li><li><p>2.2、下载安装镜像刻录软件如：Mac版<strong><a href="http://mac.softpedia.com/get/Utilities/Etcher.shtml" target="_blank" rel="noopener">Etcher</a></strong>和window版win32diskimager等</p></li><li><p>2.3、插入SD卡到电脑并打开刻录软件如：目前使用的Etcher（示例）<br><img src="/images/WX20180521-100451@2x.png" alt></p><ul><li><p>2.3.1、选择（<strong>Select image</strong>）从官网下载并解压后的<strong> NOOBS </strong>或<strong> RASPBIAN </strong> 镜像文件（<strong> xxx.img </strong>格式）</p></li><li><p>2.3.2、选择SD卡 (<strong>Select drive</strong>)</p></li><li><p>2.3.3 开始刻录镜像（<strong>Flash</strong>）并等待及几分钟至镜像刻录完成</p></li></ul></li></ul><h2 id="3、配置wifi和ssh"><a href="#3、配置wifi和ssh" class="headerlink" title="3、配置wifi和ssh"></a>3、配置wifi和ssh</h2><p>因为没有使用网线所以要在安装前配置好wifi和ssh，让板子在安装完系统后自动连接wifi并开启ssh。</p><ul><li><p>3.1、配置wifi</p><p>打开SD卡，创建文件并写入保存：<br>文件名：<strong>wpa_supplicant.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">country=CN</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">ssid=&quot;mywifi&quot;        #ssid（wifi名）</span><br><span class="line">psk=&quot;123456&quot;          #password（wifi密码）</span><br><span class="line">key_mgmt=WPA-PSK     #wifi加密方式</span><br><span class="line">priority=1           #优先级</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3.2、配置ssh</p><p>打开SD卡，创建文件ssh文件(不写入内容，无后缀)<br>文件名：<strong>ssh</strong></p></li></ul><h2 id="4、安装系统并ssh登陆"><a href="#4、安装系统并ssh登陆" class="headerlink" title="4、安装系统并ssh登陆"></a>4、安装系统并ssh登陆</h2><ul><li><p>4.1、将SD卡插入板子中并上电启动，如果<strong>绿灯不在闪烁</strong>且<strong>红灯常亮</strong>，那么系统安装并启动成功。</p></li><li><p>4.2、进入路由器查看名称为 <strong>raspberry</strong>设备的 <strong>IP地址</strong>，例如：设备：raspberry ，IP地址：192.168.1.56。<br>如果没有查看到 <strong>raspberry</strong>设备和IP，请确认 <strong>步骤3.1</strong> 中文件 <strong>wpa_supplicant.conf</strong>是否正确配置wifi名称和密码。如果错误请重新刻录系统并配置wifi。</p></li><li><p>4.3、确认到 <strong>raspberry</strong>的IP（例如：192.168.1.56）后在电脑中打开终端（window使用<strong>xshell</strong>）连接到 Raspberry PI 板子的 ssh服务，例如：</p><blockquote><p>ssh <a href="mailto:pi@192.168.1.56" target="_blank" rel="noopener">pi@192.168.1.56</a></p></blockquote><p>然后输入密码：<strong>raspberry</strong>(系统默认)</p></li><li><p>4.4、ssh登陆完成后就可以对板子操作了！</p></li></ul><h2 id="5、设置wifi在板子断电或重启后自动连接网络"><a href="#5、设置wifi在板子断电或重启后自动连接网络" class="headerlink" title="5、设置wifi在板子断电或重启后自动连接网络"></a>5、设置wifi在板子断电或重启后自动连接网络</h2><ul><li><p>5.1、ssh登陆后执行</p><blockquote><p>sudo nano /etc/network/interfaces</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">auto lo</span><br><span class="line"></span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">iface eth0 inet dhcp</span><br><span class="line"></span><br><span class="line">allow-hotplug wlan0</span><br><span class="line"></span><br><span class="line">iface wlan0 inet dhcp</span><br><span class="line"></span><br><span class="line">wpa-ssid &quot;mywifi&quot;</span><br><span class="line"></span><br><span class="line">wpa-psk &quot;123456&quot;</span><br></pre></td></tr></table></figure></li></ul><p>保存退出</p><p>参考博文：<a href="https://blog.csdn.net/shaopengf/article/details/52411926" target="_blank" rel="noopener">Raspberry Pi树莓派无线网卡配置[多重方法备选]</a></p><h2 id="6、安全管理"><a href="#6、安全管理" class="headerlink" title="6、安全管理"></a>6、安全管理</h2><p>  建议修改默认账户密码如：<br>  用户：pi<br>  密码：raspberry</p><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><ul><li><p>1、nano 编辑器 操作</p><blockquote><p>退出：<strong>control x</strong><br>保存并退出： <strong>control o</strong>  保存 <strong>enter</strong> q确认 <strong>control x</strong> 退出</p></blockquote></li><li><p>2、linxu c重启命令</p><blockquote><p>sudo reboot</p></blockquote></li></ul><p>参考博文：</p><ul><li>[1]、<a href="https://www.jianshu.com/p/f260967aefb1" target="_blank" rel="noopener">树莓派如何完全无头(无屏无网线无键盘鼠标)安装</a></li><li>[2]、<a href="https://blog.csdn.net/yoie01/article/details/45115067" target="_blank" rel="noopener">树莓派 - 修改pi账号密码,开启root账号</a></li><li>[3]、<a href="https://blog.csdn.net/shaopengf/article/details/52411926" target="_blank" rel="noopener">Raspberry Pi树莓派无线网卡配置[多重方法备选]</a></li><li>[4]、<a href="https://help.nextcloud.com/" target="_blank" rel="noopener">NextCloud论坛</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言： 这篇笔记记录不使用&lt;strong&gt;显示屏&lt;/strong&gt;和&lt;strong&gt;网线&lt;/strong&gt;来安装系统和配置环境&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、准备&quot;&gt;&lt;a href=&quot;#1、准备&quot; class=&quot;headerlink&quot; title=&quot;1、准备&quot;&gt;&lt;/a&gt;1、准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;树莓派3b+板子&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SD存储卡和卡套&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;电源线和插头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;路由器（有wifi就行）&lt;/p&gt;
    
    </summary>
    
      <category term="树莓派" scheme="https://tanjunze.github.io/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="https://tanjunze.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Mac使用Android代理翻墙记录</title>
    <link href="https://tanjunze.github.io/2018/05/17/Mac%E4%BD%BF%E7%94%A8Android%E4%BB%A3%E7%90%86%E7%BF%BB%E5%A2%99%E8%AE%B0%E5%BD%95/"/>
    <id>https://tanjunze.github.io/2018/05/17/Mac使用Android代理翻墙记录/</id>
    <published>2018-05-17T15:29:09.000Z</published>
    <updated>2018-10-26T05:51:01.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、下载Proxy-Server代理软件"><a href="#1、下载Proxy-Server代理软件" class="headerlink" title="1、下载Proxy Server代理软件"></a>1、下载<strong><a href="https://www.apk20.com/apk/141135/" target="_blank" rel="noopener">Proxy Server</a></strong>代理软件</h2><h2 id="2、创建一个代理服务（Proxy-Server）"><a href="#2、创建一个代理服务（Proxy-Server）" class="headerlink" title="2、创建一个代理服务（Proxy Server）"></a>2、创建一个代理服务（Proxy Server）</h2><p><img src="/images/WX20180517-155059@2x.png" alt><br><a id="more"></a></p><h2 id="3、设置服务名和端口并返回后点击Start按钮启动服务"><a href="#3、设置服务名和端口并返回后点击Start按钮启动服务" class="headerlink" title="3、设置服务名和端口并返回后点击Start按钮启动服务"></a>3、设置服务名和端口并返回后点击<strong>Start</strong>按钮启动服务</h2><p><img src="/images/WX20180517-155034@2x.png" alt></p><h2 id="4、打开FireFox浏览器并配置网络代理"><a href="#4、打开FireFox浏览器并配置网络代理" class="headerlink" title="4、打开FireFox浏览器并配置网络代理"></a>4、打开<strong>FireFox</strong>浏览器并配置<strong>网络代理</strong></h2><p><img src="/images/WX20180517-155633@2x.png" alt></p><h2 id="5、设置启动代理服务手机的Ip和上面填写端口"><a href="#5、设置启动代理服务手机的Ip和上面填写端口" class="headerlink" title="5、设置启动代理服务手机的Ip和上面填写端口"></a>5、设置启动代理服务手机的<strong>Ip</strong>和上面填写端口</h2><p><img src="/images/WX20180517-155841@2x.png" alt></p><p>到此 FireFox 可以使用手机的代理服务，如果手机已经翻墙了，那么FireFox就可以实现翻墙。</p><p>同样可以为电脑设置代理配置，实现全局代理。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、下载Proxy-Server代理软件&quot;&gt;&lt;a href=&quot;#1、下载Proxy-Server代理软件&quot; class=&quot;headerlink&quot; title=&quot;1、下载Proxy Server代理软件&quot;&gt;&lt;/a&gt;1、下载&lt;strong&gt;&lt;a href=&quot;https://www.apk20.com/apk/141135/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Proxy Server&lt;/a&gt;&lt;/strong&gt;代理软件&lt;/h2&gt;&lt;h2 id=&quot;2、创建一个代理服务（Proxy-Server）&quot;&gt;&lt;a href=&quot;#2、创建一个代理服务（Proxy-Server）&quot; class=&quot;headerlink&quot; title=&quot;2、创建一个代理服务（Proxy Server）&quot;&gt;&lt;/a&gt;2、创建一个代理服务（Proxy Server）&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/WX20180517-155059@2x.png&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
      <category term="杂记" scheme="https://tanjunze.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="代理" scheme="https://tanjunze.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>机器学习资料整理</title>
    <link href="https://tanjunze.github.io/2018/04/27/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    <id>https://tanjunze.github.io/2018/04/27/机器学习资料整理/</id>
    <published>2018-04-27T15:36:40.000Z</published>
    <updated>2018-10-26T05:52:14.126Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/tanjunze/ML-Note/blob/master/document/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86.md" target="_blank" rel="noopener">我的机器学习资料</a>，为了方便查询同步到笔记中。</p><h2 id="机器学习资料"><a href="#机器学习资料" class="headerlink" title="机器学习资料"></a>机器学习资料</h2><h3 id="文档资料"><a href="#文档资料" class="headerlink" title="文档资料"></a>文档资料</h3><ul><li><p><a href="https://github.com/ChristosChristofidis/awesome-deep-learning" target="_blank" rel="noopener">深度学习资料-Github</a></p></li><li><p><a href="http://neuralnetworksanddeeplearning.com/" target="_blank" rel="noopener">神经网络和深度学习•Michael Nielsen</a></p></li><li><p><a href="https://www.gitbook.com/book/hit-scir/neural-networks-and-deep-learning-zh_cn/details" target="_blank" rel="noopener">神经网络和深度学习•Michael Nielsen（翻译）</a></p><a id="more"></a></li><li><p><a href="http://www.deeplearningbook.org/" target="_blank" rel="noopener">深度学习•Bengio</a></p></li><li><p><a href="https://github.com/exacity/deeplearningbook-chinese" target="_blank" rel="noopener">深度学习•Bengio（翻译）</a></p></li><li><p><a href="https://tensorflow.google.cn/" target="_blank" rel="noopener">Tensorflow官网-国内</a></p></li><li><p><a href="https://www.tensorflowers.cn/" target="_blank" rel="noopener">Tensorflow社区-国内</a></p></li><li><p><a href="https://devopen.club/ai/" target="_blank" rel="noopener">深度学习资料整理1-国内</a></p></li><li><p><a href="https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap" target="_blank" rel="noopener">深度学习路线图</a></p></li><li><p><a href="http://colah.github.io/" target="_blank" rel="noopener">深度学习博文</a></p></li><li><p><a href="https://deeplearning4j.org/cn/" target="_blank" rel="noopener">深度学习Java框架</a></p></li></ul><h3 id="在线教育"><a href="#在线教育" class="headerlink" title="在线教育"></a>在线教育</h3><ul><li><p><a href="https://cn.udacity.com/course/deep-learning--ud730" target="_blank" rel="noopener">Google深度学习-Udacity课程</a></p></li><li><p><a href="https://developers.google.cn/machine-learning/crash-course/" target="_blank" rel="noopener">Google机器学习速成课程</a></p></li><li><p><a href="http://ufldl.stanford.edu/wiki/index.php/UFLDL%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">深度学习-Stanford-UFLDL</a></p></li><li><p><a href="http://deeplearning.stanford.edu/tutorial/" target="_blank" rel="noopener">深度学习-Stanford-Tutorial</a></p></li><li><p><a href="https://www.icourse163.org/learn/PKU-1002536002?tid=1002700003" target="_blank" rel="noopener">人工智能实践：Tensorflow笔记-慕课网</a></p></li><li><p><a href="https://morvanzhou.github.io/" target="_blank" rel="noopener">莫烦Python</a></p></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><p>python</p></li><li><p>jupyter notebook</p></li></ul><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul><li><p><a href="https://tensorflow.google.cn/" target="_blank" rel="noopener">Tensorflow</a></p></li><li><p><a href="http://wiki.jikexueyuan.com/project/tensorflow-zh/" target="_blank" rel="noopener">Tensorflow（极客学院-翻译）</a></p></li><li><p><a href="http://tensorlayercn.readthedocs.io/zh/latest/" target="_blank" rel="noopener">TensorLayer-中文</a></p></li><li><p><a href="http://tensorlayer.readthedocs.io/en/latest/" target="_blank" rel="noopener">TensorLayer</a></p></li><li><p><a href="https://github.com/scikit-learn/scikit-learn" target="_blank" rel="noopener">scikit-learn</a></p></li><li><p><a href="http://sklearn.apachecn.org" target="_blank" rel="noopener">scikit-learn 翻译</a></p></li><li><p><a href="http://caffe.berkeleyvision.org/" target="_blank" rel="noopener">caffe</a> 或 <a href="https://caffe2.ai/" target="_blank" rel="noopener">caffe2</a></p></li><li><p><a href="https://keras.io/" target="_blank" rel="noopener">Keras</a></p></li><li><p><a href="https://keras-cn.readthedocs.io/en/latest/" target="_blank" rel="noopener">keras 翻译</a></p></li><li><p><a href="http://deeplearning.net/software/theano/" target="_blank" rel="noopener">theano</a></p></li><li><p>…</p></li></ul><h2 id="其他文档"><a href="#其他文档" class="headerlink" title="其他文档"></a>其他文档</h2><ul><li><p><a href="https://deepmind.com/" target="_blank" rel="noopener">Deepmind</a></p></li><li><p><a href="http://cs231n.github.io/neural-networks-3/" target="_blank" rel="noopener">积卷神经网络-斯坦福</a></p></li><li><p><a href="https://github.com/llSourcell" target="_blank" rel="noopener">Siraj Raval-Gitub-Youtube</a></p></li><li><p><a href="https://cs231n.github.io/convolutional-networks/" target="_blank" rel="noopener">CS231n课程-积卷网络</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/22038289?refer=intelligentunit" target="_blank" rel="noopener">CS231n课程-积卷网络-中文翻译</a></p><h2 id="深度学习-开源项目"><a href="#深度学习-开源项目" class="headerlink" title="深度学习-开源项目"></a>深度学习-开源项目</h2></li></ul><ul><li><p><a href="https://github.com/CSTR-Edinburgh/merlin" target="_blank" rel="noopener">音频合成-Merlin</a></p></li><li><p><a href="https://github.com/ibab/tensorflow-wavenet" target="_blank" rel="noopener">音频合成-Wavenet</a></p></li><li><p><a href="https://github.com/udacity/deep-learning" target="_blank" rel="noopener">深度学习-Udacity-Code</a></p></li><li><p><a href="https://github.com/upul/Behavioral-Cloning" target="_blank" rel="noopener">无人驾驶-BehavioralCloning)</a></p></li><li><p><a href="https://github.com/udacity/self-driving-car-sim" target="_blank" rel="noopener">无人驾驶-udacity-sim</a></p></li><li><p><a href="https://blog.csdn.net/pengdali/article/details/79185757" target="_blank" rel="noopener">无人驾驶-CSDN博文</a></p></li></ul><h2 id="机器学习数据集"><a href="#机器学习数据集" class="headerlink" title="机器学习数据集"></a>机器学习数据集</h2><ul><li><a href="https://www.zhihu.com/question/63383992" target="_blank" rel="noopener">机器学习数据集1-知乎提问</a></li><li><a href="https://zhuanlan.zhihu.com/p/25138563" target="_blank" rel="noopener">机器学习数据集2-知乎博文</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/tanjunze/ML-Note/blob/master/document/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的机器学习资料&lt;/a&gt;，为了方便查询同步到笔记中。&lt;/p&gt;
&lt;h2 id=&quot;机器学习资料&quot;&gt;&lt;a href=&quot;#机器学习资料&quot; class=&quot;headerlink&quot; title=&quot;机器学习资料&quot;&gt;&lt;/a&gt;机器学习资料&lt;/h2&gt;&lt;h3 id=&quot;文档资料&quot;&gt;&lt;a href=&quot;#文档资料&quot; class=&quot;headerlink&quot; title=&quot;文档资料&quot;&gt;&lt;/a&gt;文档资料&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ChristosChristofidis/awesome-deep-learning&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深度学习资料-Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://neuralnetworksanddeeplearning.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;神经网络和深度学习•Michael Nielsen&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.gitbook.com/book/hit-scir/neural-networks-and-deep-learning-zh_cn/details&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;神经网络和深度学习•Michael Nielsen（翻译）&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="资料" scheme="https://tanjunze.github.io/categories/%E8%B5%84%E6%96%99/"/>
    
    
      <category term="机器学习" scheme="https://tanjunze.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="TensorFlow" scheme="https://tanjunze.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>Dart 之旅</title>
    <link href="https://tanjunze.github.io/2018/03/22/Dart%E4%B9%8B%E6%97%85/"/>
    <id>https://tanjunze.github.io/2018/03/22/Dart之旅/</id>
    <published>2018-03-21T20:10:13.000Z</published>
    <updated>2019-02-26T07:18:18.066Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://dartpad.dartlang.org/" target="_blank" rel="noopener">dartpad</a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>所有的变量引用都是对象，每个对象都是一个类的实例。在Dart 中甚至 <strong>数字（numbers）</strong>、<strong>方法（functions）</strong>和<strong>null</strong>都是对象。所有对象都继承<strong><a href="https://api.dartlang.org/stable/dart-core/Object-class.html" target="_blank" rel="noopener">Object</a></strong>类。</li><li>尽管Dart 是强类型语言，但是<strong>类型声明</strong>是可选的，因为Dart可以推断类型。如果要明确说明不需要任何类型， 则<a href="https://www.dartlang.org/guides/language/effective-dart/design#do-annotate-with-object-instead-of-dynamic-to-indicate-any-object-is-allowed" target="_blank" rel="noopener">使用特殊类型<code>dynamic</code></a>。</li><li>Dart 支持泛型，例如<strong>List<int></int></strong> 或<strong>List<dynamic></dynamic></strong>。</li><li>Dart 支持顶级方法（如<code>main()</code>），静态方法，实例方法和方法内方法（嵌套函数和本地函数）。</li><li>Dart 支持顶级变量，以及类中定义变量（静态变量和实例变量）。实例变量有时称为字段和属性。</li><li>与<strong>Java</strong>不同的是，Dart 中没有<code>public</code>,<code>private</code>,<code>protected</code>关键字，如果标识符已（<code>_</code>）开头，则其是私有的。</li><li><em>标识符</em>可以以字母或下划线（_）开头，后跟这些字符加数字的任意组合。</li><li>Dart有两个<em>表达式</em>（具有运行时值）和 <em>语句</em>（不具有）。例如，<a href="https://www.dartlang.org/guides/language/language-tour#conditional-expressions" target="_blank" rel="noopener">条件表达式</a> <code>condition ? expr1 : expr2</code>的值为<code>expr1</code>或<code>expr2</code>。将其与<a href="https://www.dartlang.org/guides/language/language-tour#if-and-else" target="_blank" rel="noopener">if-else语句</a>进行比较，该<a href="https://www.dartlang.org/guides/language/language-tour#if-and-else" target="_blank" rel="noopener">语句</a>没有任何值。语句通常包含一个或多个表达式，但表达式不能直接包含语句。</li><li>Dart工具可以报告两种问题：<em>警告</em>和<em>错误</em>。警告只是表明您的代码可能无法正常工作，但它们不会阻止您的程序执行。错误可以是编译时或运行时。编译时错误会阻止代码执行; 运行时错误导致 代码执行时引发<a href="https://www.dartlang.org/guides/language/language-tour#exceptions" target="_blank" rel="noopener">异常</a>。</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">'Bob'</span>;</span><br><span class="line"><span class="keyword">dynamic</span> name = <span class="string">'Bob'</span> ;</span><br></pre></td></tr></table></figure><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>未初始化的变量默认为<strong>null</strong>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> lineCount ; <span class="keyword">assert</span> （lineCount == <span class="keyword">null</span> ）;</span><br></pre></td></tr></table></figure><h3 id="final-和-const"><a href="#final-和-const" class="headerlink" title="final 和 const"></a>final 和 const</h3><p>如果不打算修改一个变量，使用<code>final</code>或<code>const</code>,final 修饰的变量只能赋值一次；一个const变量是编译时常量。（const变量同时也是final变量。）顶级的final 变量或类中的final变量在<strong>第一次使用时初始化</strong>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> name = <span class="string">'Bob'</span>; </span><br><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> nickname = <span class="string">'Bobby'</span>;</span><br><span class="line"><span class="keyword">const</span> bar = <span class="number">1000000</span>；</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> atm = <span class="number">1.01325</span> * bar;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">const</span> [];</span><br><span class="line"><span class="keyword">final</span> bar = <span class="keyword">const</span> [];</span><br><span class="line"><span class="keyword">const</span> baz = []; <span class="comment">// 等价于`const []`</span></span><br><span class="line"></span><br><span class="line">foo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//  const []</span></span><br><span class="line">baz = [<span class="number">42</span>];  <span class="comment">// 错误 不能赋值</span></span><br></pre></td></tr></table></figure><h2 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h2><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int 类型</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span> ;<span class="keyword">var</span> hex = <span class="number">0xDEADBEEF</span> ; </span><br><span class="line"><span class="comment">// double 类型</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">1.1</span> ; <span class="keyword">var</span> exponents = <span class="number">1.42e5</span> ; </span><br><span class="line"><span class="built_in">double</span> z = <span class="number">1</span> ; <span class="comment">//相当于double z = 1.0。  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line"><span class="comment">// String -&gt; int</span></span><br><span class="line"><span class="keyword">var</span> one = <span class="built_in">int</span>.parse(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">assert</span>(one == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// String -&gt; double</span></span><br><span class="line"><span class="keyword">var</span> onePointOne = <span class="built_in">double</span>.parse(<span class="string">'1.1'</span>);</span><br><span class="line"><span class="keyword">assert</span>(onePointOne == <span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// int -&gt; String</span></span><br><span class="line"><span class="built_in">String</span> oneAsString = <span class="number">1.</span>toString();</span><br><span class="line"><span class="keyword">assert</span>(oneAsString == <span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// double -&gt; String</span></span><br><span class="line"><span class="built_in">String</span> piAsString = <span class="number">3.14159</span>.toStringAsFixed(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">assert</span>(piAsString == <span class="string">'3.14'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> &lt;&lt; <span class="number">1</span>) == <span class="number">6</span>); <span class="comment">// 0011 &lt;&lt; 1 == 0110</span></span><br><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> &gt;&gt; <span class="number">1</span>) == <span class="number">1</span>); <span class="comment">// 0011 &gt;&gt; 1 == 0001</span></span><br><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> | <span class="number">4</span>) == <span class="number">7</span>); <span class="comment">// 0011 | 0100 == 0111</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> msPerSecond = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> secondsUntilRetry = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> msUntilRetry = secondsUntilRetry * msPerSecond;</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>Dart String 是UTF-16编码，可以使用<code>&#39;</code>或<code>&quot;</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">'Single quotes work well for string literals.'</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">"Double quotes work just as well."</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">'It\'s easy to escape the string delimiter.'</span>;</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="string">"It's even easier to use the other delimiter."</span>;</span><br></pre></td></tr></table></figure><p>字符串拼接</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'string interpolation'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">'Dart has $s, which is very handy.'</span> ==</span><br><span class="line">    <span class="string">'Dart has string interpolation, '</span> +</span><br><span class="line">        <span class="string">'which is very handy.'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">'That deserves all caps. '</span> +</span><br><span class="line">        <span class="string">'<span class="subst">$&#123;s.toUpperCase()&#125;</span> is very handy!'</span> ==</span><br><span class="line">    <span class="string">'That deserves all caps. '</span> +</span><br><span class="line">        <span class="string">'STRING INTERPOLATION is very handy!'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">'String '</span></span><br><span class="line">    <span class="string">'concatenation'</span></span><br><span class="line">    <span class="string">" works even over line breaks."</span>;</span><br><span class="line"><span class="keyword">assert</span>(s1 ==</span><br><span class="line">    <span class="string">'String concatenation works even over '</span></span><br><span class="line">    <span class="string">'line breaks.'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">'The + operator '</span> + <span class="string">'works, as well.'</span>;</span><br><span class="line"><span class="keyword">assert</span>(s2 == <span class="string">'The + operator works, as well.'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">r'In a raw string, not even \n gets special treatment.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// These work in a const string.</span></span><br><span class="line"><span class="keyword">const</span> aConstNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> aConstBool = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">const</span> aConstString = <span class="string">'a constant string'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// These do NOT work in a const string.</span></span><br><span class="line"><span class="keyword">var</span> aNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> aBool = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">var</span> aString = <span class="string">'a string'</span>;</span><br><span class="line"><span class="keyword">const</span> aConstList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> validConstString = <span class="string">'$aConstNum $aConstBool $aConstString'</span>;</span><br><span class="line"><span class="comment">// const invalidConstString = '$aNum $aBool $aString $aConstList';</span></span><br></pre></td></tr></table></figure><h3 id="Booleans"><a href="#Booleans" class="headerlink" title="Booleans"></a>Booleans</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check for an empty string.</span></span><br><span class="line"><span class="keyword">var</span> fullName = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">assert</span>(fullName.isEmpty);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for zero.</span></span><br><span class="line"><span class="keyword">var</span> hitPoints = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(hitPoints &lt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for null.</span></span><br><span class="line"><span class="keyword">var</span> unicorn;</span><br><span class="line"><span class="keyword">assert</span>(unicorn == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for NaN.</span></span><br><span class="line"><span class="keyword">var</span> iMeantToDoThis = <span class="number">0</span> / <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(iMeantToDoThis.isNaN);</span><br></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">assert</span>(list.length == <span class="number">3</span>);</span><br><span class="line"><span class="keyword">assert</span>(list[<span class="number">1</span>] == <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">list[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">assert</span>(list[<span class="number">1</span>] == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> constantList = <span class="keyword">const</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// constantList[1] = 1; // Uncommenting this causes an error.</span></span><br></pre></td></tr></table></figure><h3 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gifts = &#123;</span><br><span class="line">  <span class="comment">// Key:    Value</span></span><br><span class="line">  <span class="string">'first'</span>: <span class="string">'partridge'</span>,</span><br><span class="line">  <span class="string">'second'</span>: <span class="string">'turtledoves'</span>,</span><br><span class="line">  <span class="string">'fifth'</span>: <span class="string">'golden rings'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nobleGases = &#123;</span><br><span class="line">  <span class="number">2</span>: <span class="string">'helium'</span>,</span><br><span class="line">  <span class="number">10</span>: <span class="string">'neon'</span>,</span><br><span class="line">  <span class="number">18</span>: <span class="string">'argon'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gifts = <span class="built_in">Map</span>();</span><br><span class="line">gifts[<span class="string">'first'</span>] = <span class="string">'partridge'</span>;</span><br><span class="line">gifts[<span class="string">'second'</span>] = <span class="string">'turtledoves'</span>;</span><br><span class="line">gifts[<span class="string">'fifth'</span>] = <span class="string">'golden rings'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nobleGases = <span class="built_in">Map</span>();</span><br><span class="line">nobleGases[<span class="number">2</span>] = <span class="string">'helium'</span>;</span><br><span class="line">nobleGases[<span class="number">10</span>] = <span class="string">'neon'</span>;</span><br><span class="line">nobleGases[<span class="number">18</span>] = <span class="string">'argon'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gifts = &#123;<span class="string">'first'</span>: <span class="string">'partridge'</span>&#125;;</span><br><span class="line">gifts[<span class="string">'fourth'</span>] = <span class="string">'calling birds'</span>; <span class="comment">// Add a key-value pair</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gifts = &#123;<span class="string">'first'</span>: <span class="string">'partridge'</span>&#125;;</span><br><span class="line"><span class="keyword">assert</span>(gifts[<span class="string">'first'</span>] == <span class="string">'partridge'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gifts = &#123;<span class="string">'first'</span>: <span class="string">'partridge'</span>&#125;;</span><br><span class="line"><span class="keyword">assert</span>(gifts[<span class="string">'fifth'</span>] == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gifts = &#123;<span class="string">'first'</span>: <span class="string">'partridge'</span>&#125;;</span><br><span class="line">gifts[<span class="string">'fourth'</span>] = <span class="string">'calling birds'</span>;</span><br><span class="line"><span class="keyword">assert</span>(gifts.length == <span class="number">2</span>);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> constantMap = <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="number">2</span>: <span class="string">'helium'</span>,</span><br><span class="line">  <span class="number">10</span>: <span class="string">'neon'</span>,</span><br><span class="line">  <span class="number">18</span>: <span class="string">'argon'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// constantMap[2] = 'Helium'; // Uncommenting this causes an error.</span></span><br></pre></td></tr></table></figure><h3 id="Runes"><a href="#Runes" class="headerlink" title="Runes"></a>Runes</h3><p>表达Unicode代码的常用方法是 <code>\uXXXX</code>，其中XXXX是4位十六进制值。例如，心脏（♥）是<code>\u2665</code>。要是<strong>多于或少于4个十六进制数字</strong>，将<strong>值放在大括号</strong>中。例如，笑表情符号（😆）是<code>\u{1f600}</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> clapping = <span class="string">'\u&#123;1f44f&#125;'</span>;</span><br><span class="line">  <span class="built_in">print</span>(clapping);</span><br><span class="line">  <span class="built_in">print</span>(clapping.codeUnits);</span><br><span class="line">  <span class="built_in">print</span>(clapping.runes.toList());</span><br><span class="line"> <span class="comment">// 👏</span></span><br><span class="line"> <span class="comment">//[55357, 56399]</span></span><br><span class="line"> <span class="comment">//[128079]</span></span><br><span class="line"></span><br><span class="line">  Runes input = <span class="keyword">new</span> Runes(</span><br><span class="line">      <span class="string">'\u2665  \u&#123;1f605&#125;  \u&#123;1f60e&#125;  \u&#123;1f47b&#125;  \u&#123;1f596&#125;  \u&#123;1f44d&#125;'</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="keyword">new</span> <span class="built_in">String</span>.fromCharCodes(input));</span><br><span class="line">  <span class="comment">// ♥  😅  😎  👻  🖖  👍</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> isNoble(<span class="built_in">int</span> atomicNumber) &#123;</span><br><span class="line">  <span class="keyword">return</span> _nobleGases[atomicNumber] != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bool</span> isNoble(<span class="built_in">int</span> atomicNumber) =&gt; _nobleGases[atomicNumber] != <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>可选参数可以是命名参数或者基于位置的参数，但是这两种参数不能同时当做可选参数。</p><h4 id="Optional-named-parameters（可选命名参数）"><a href="#Optional-named-parameters（可选命名参数）" class="headerlink" title="Optional named parameters（可选命名参数）"></a>Optional named parameters（可选命名参数）</h4><p>调用函数时，可以使用指定命名参数 。例如：<code>*paramName*: *value*</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enableFlags （bold ：<span class="keyword">true</span> ，hidden ：<span class="keyword">false</span> ）;</span><br></pre></td></tr></table></figure><p>定义函数时，用于 <code>{param1, param2, …}</code>指定命名参数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> enableFlags(&#123;<span class="built_in">bool</span> bold, <span class="built_in">bool</span> hidden&#125;) &#123;...&#125;</span><br></pre></td></tr></table></figure><h4 id="Optional-positional-parameters（可选位置参数）"><a href="#Optional-positional-parameters（可选位置参数）" class="headerlink" title="Optional positional parameters（可选位置参数）"></a>Optional positional parameters（可选位置参数）</h4><p>把一些方法的参数放到 <code>[]</code> 中就变成可选 位置参数了：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> say(<span class="built_in">String</span> from, <span class="built_in">String</span> msg, [<span class="built_in">String</span> device]) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">'$from says $msg'</span>;</span><br><span class="line">  <span class="keyword">if</span> (device != <span class="keyword">null</span>) &#123;</span><br><span class="line">    result = <span class="string">'$result with a $device'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(say(<span class="string">'Bob'</span>, <span class="string">'Howdy'</span>) == <span class="string">'Bob says Howdy'</span>); <span class="comment">//true</span></span><br><span class="line"><span class="keyword">assert</span>(say(<span class="string">'Bob'</span>, <span class="string">'Howdy'</span>, <span class="string">'smoke signal'</span>) ==</span><br><span class="line">    <span class="string">'Bob says Howdy with a smoke signal'</span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Default-parameter-values（默认参数值）"><a href="#Default-parameter-values（默认参数值）" class="headerlink" title="Default parameter values（默认参数值）"></a>Default parameter values（默认参数值）</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/// Sets </span>the<span class="markdown"> [bold] and [hidden] flags ...</span></span></span><br><span class="line"><span class="keyword">void</span> enableFlags(&#123;<span class="built_in">bool</span> bold = <span class="keyword">false</span>, <span class="built_in">bool</span> hidden = <span class="keyword">false</span>&#125;) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bold will be true; hidden will be false.</span></span><br><span class="line">enableFlags(bold: <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> say(<span class="built_in">String</span> from, <span class="built_in">String</span> msg,</span><br><span class="line">    [<span class="built_in">String</span> device = <span class="string">'carrier pigeon'</span>, <span class="built_in">String</span> mood]) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">'$from says $msg'</span>;</span><br><span class="line">  <span class="keyword">if</span> (device != <span class="keyword">null</span>) &#123;</span><br><span class="line">    result = <span class="string">'$result with a $device'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (mood != <span class="keyword">null</span>) &#123;</span><br><span class="line">    result = <span class="string">'$result (in a $mood mood)'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(say(<span class="string">'Bob'</span>, <span class="string">'Howdy'</span>) ==</span><br><span class="line">    <span class="string">'Bob says Howdy with a carrier pigeon'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> doStuff(</span><br><span class="line">    &#123;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">const</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; gifts = <span class="keyword">const</span> &#123;</span><br><span class="line">      <span class="string">'first'</span>: <span class="string">'paper'</span>,</span><br><span class="line">      <span class="string">'second'</span>: <span class="string">'cotton'</span>,</span><br><span class="line">      <span class="string">'third'</span>: <span class="string">'leather'</span></span><br><span class="line">    &#125;&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'list:  $list'</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'gifts: $gifts'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://dartpad.dartlang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dartpad&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="Dart" scheme="https://tanjunze.github.io/categories/Dart/"/>
    
    
      <category term="Dart" scheme="https://tanjunze.github.io/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>Android AIDL 使用</title>
    <link href="https://tanjunze.github.io/2018/02/26/Android%20AIDL%20%E4%B8%80%20%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%20/"/>
    <id>https://tanjunze.github.io/2018/02/26/Android AIDL 一  基本使用 /</id>
    <published>2018-02-25T21:13:43.000Z</published>
    <updated>2019-02-26T07:22:00.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-AIDL"><a href="#Android-AIDL" class="headerlink" title="Android AIDL"></a>Android AIDL</h1><p><code>AIDL：Android Interface Definition Language</code> 。用于<code>IPC （Inter-Process Communication，进程间通信）</code>，如 多应用间的通信，应用中存在多进程间的通信等场景。</p><blockquote><p>只有允许不同应用的客户端用 IPC 方式访问服务，并且想要在服务中处理多线程时，才有必要使用 AIDL。 如果您不需要执行跨越不同应用的并发 IPC，就应该通过<a href="https://developer.android.com/guide/components/bound-services.html#Binder" target="_blank" rel="noopener">实现一个 Binder</a> 创建接口；或者，如果您想执行 IPC，但根本不需要处理多线程，则<a href="https://developer.android.com/guide/components/bound-services.html#Messenger" target="_blank" rel="noopener">使用 Messenger 类</a>来实现接口</p></blockquote><h2 id="一、定义AIDL接口"><a href="#一、定义AIDL接口" class="headerlink" title="一、定义AIDL接口"></a>一、定义AIDL接口</h2><h3 id="1、创建-aidl-文件"><a href="#1、创建-aidl-文件" class="headerlink" title="1、创建 .aidl 文件"></a>1、创建 .aidl 文件</h3><p>在<strong>src</strong> 文件夹内创建<code>IRemoteService.aidl</code> 文件，如下。编译工程，此时会在创建相同名称的 <code>IRemoteService.java</code>文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IRemoteService.aidl</span></span><br><span class="line"><span class="keyword">package</span> com.example.android;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare any non-default types here with import statements</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Example service interface */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IRemoteService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Request the process ID of this service, to do evil things with it. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPid</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Demonstrates some basic types that you can use as parameters</span></span><br><span class="line"><span class="comment">     * and return values in AIDL.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">double</span> aDouble, String aString)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、实现-aidl生成的-java接口"><a href="#2、实现-aidl生成的-java接口" class="headerlink" title="2、实现.aidl生成的.java接口"></a>2、实现.aidl生成的.java接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> IRemoteService.Stub mBinder = <span class="keyword">new</span> IRemoteService.Stub() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Process.myPid();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">float</span> aFloat, <span class="keyword">double</span> aDouble, String aString)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Does nothing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3、公开接口"><a href="#3、公开接口" class="headerlink" title="3、公开接口"></a>3、公开接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Return the interface</span></span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IRemoteService.Stub mBinder = <span class="keyword">new</span> IRemoteService.Stub() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPid</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Process.myPid();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">float</span> aFloat, <span class="keyword">double</span> aDouble, String aString)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Does nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、通过IPC-传递对象"><a href="#二、通过IPC-传递对象" class="headerlink" title="二、通过IPC 传递对象"></a>二、通过IPC 传递对象</h2><p>IPC 中传递的对象需要实现 <code>Parcelable</code> 接口 ，例如  <code>Rect.aidl</code> 文件可创建一个可打包的 <code>Rect</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> android.graphics;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare Rect so AIDL can find it and knows that it implements</span></span><br><span class="line"><span class="comment">// the parcelable protocol.</span></span><br><span class="line">parcelable Rect;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Parcel;</span><br><span class="line"><span class="keyword">import</span> android.os.Parcelable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Rect</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> left;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> top;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> right;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> bottom;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Rect&gt; CREATOR = <span class="keyword">new</span></span><br><span class="line">Parcelable.Creator&lt;Rect&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Rect <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rect(in);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Rect[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rect[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Rect</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">        readFromParcel(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel out)</span> </span>&#123;</span><br><span class="line">        out.writeInt(left);</span><br><span class="line">        out.writeInt(top);</span><br><span class="line">        out.writeInt(right);</span><br><span class="line">        out.writeInt(bottom);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">        left = in.readInt();</span><br><span class="line">        top = in.readInt();</span><br><span class="line">        right = in.readInt();</span><br><span class="line">        bottom = in.readInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、-调用-IPC-方法"><a href="#三、-调用-IPC-方法" class="headerlink" title="三、 调用 IPC 方法"></a>三、 调用 IPC 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Binding</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The primary interface we will be calling on the service. */</span></span><br><span class="line">    IRemoteService mService = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/** Another interface we use on the service. */</span></span><br><span class="line">    ISecondary mSecondaryService = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    Button mKillButton;</span><br><span class="line">    TextView mCallbackText;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsBound;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Standard initialization of this activity.  Set up the UI, then wait</span></span><br><span class="line"><span class="comment">     * for the user to poke it before doing anything.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        setContentView(R.layout.remote_service_binding);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Watch for button clicks.</span></span><br><span class="line">        Button button = (Button)findViewById(R.id.bind);</span><br><span class="line">        button.setOnClickListener(mBindListener);</span><br><span class="line">        button = (Button)findViewById(R.id.unbind);</span><br><span class="line">        button.setOnClickListener(mUnbindListener);</span><br><span class="line">        mKillButton = (Button)findViewById(R.id.kill);</span><br><span class="line">        mKillButton.setOnClickListener(mKillListener);</span><br><span class="line">        mKillButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        mCallbackText = (TextView)findViewById(R.id.callback);</span><br><span class="line">        mCallbackText.setText(<span class="string">"Not attached."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Class for interacting with the main interface of the service.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName className,</span></span></span><br><span class="line"><span class="function"><span class="params">                IBinder service)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// This is called when the connection with the service has been</span></span><br><span class="line">            <span class="comment">// established, giving us the service object we can use to</span></span><br><span class="line">            <span class="comment">// interact with the service.  We are communicating with our</span></span><br><span class="line">            <span class="comment">// service through an IDL interface, so get a client-side</span></span><br><span class="line">            <span class="comment">// representation of that from the raw service object.</span></span><br><span class="line">            mService = IRemoteService.Stub.asInterface(service);</span><br><span class="line">            mKillButton.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">            mCallbackText.setText(<span class="string">"Attached."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We want to monitor the service for as long as we are</span></span><br><span class="line">            <span class="comment">// connected to it.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mService.registerCallback(mCallback);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                <span class="comment">// In this case the service has crashed before we could even</span></span><br><span class="line">                <span class="comment">// do anything with it; we can count on soon being</span></span><br><span class="line">                <span class="comment">// disconnected (and then reconnected if it can be restarted)</span></span><br><span class="line">                <span class="comment">// so there is no need to do anything here.</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// As part of the sample, tell the user what happened.</span></span><br><span class="line">            Toast.makeText(Binding.<span class="keyword">this</span>, R.string.remote_service_connected,</span><br><span class="line">                    Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName className)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// This is called when the connection with the service has been</span></span><br><span class="line">            <span class="comment">// unexpectedly disconnected -- that is, its process crashed.</span></span><br><span class="line">            mService = <span class="keyword">null</span>;</span><br><span class="line">            mKillButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">            mCallbackText.setText(<span class="string">"Disconnected."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// As part of the sample, tell the user what happened.</span></span><br><span class="line">            Toast.makeText(Binding.<span class="keyword">this</span>, R.string.remote_service_disconnected,</span><br><span class="line">                    Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Class for interacting with the secondary interface of the service.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ServiceConnection mSecondaryConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName className,</span></span></span><br><span class="line"><span class="function"><span class="params">                IBinder service)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Connecting to a secondary interface is the same as any</span></span><br><span class="line">            <span class="comment">// other interface.</span></span><br><span class="line">            mSecondaryService = ISecondary.Stub.asInterface(service);</span><br><span class="line">            mKillButton.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName className)</span> </span>&#123;</span><br><span class="line">            mSecondaryService = <span class="keyword">null</span>;</span><br><span class="line">            mKillButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OnClickListener mBindListener = <span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Establish a couple connections with the service, binding</span></span><br><span class="line">            <span class="comment">// by interface names.  This allows other applications to be</span></span><br><span class="line">            <span class="comment">// installed that replace the remote service by implementing</span></span><br><span class="line">            <span class="comment">// the same interface.</span></span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(Binding.<span class="keyword">this</span>, RemoteService.class);</span><br><span class="line">            intent.setAction(IRemoteService.class.getName());</span><br><span class="line">            bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</span><br><span class="line">            intent.setAction(ISecondary.class.getName());</span><br><span class="line">            bindService(intent, mSecondaryConnection, Context.BIND_AUTO_CREATE);</span><br><span class="line">            mIsBound = <span class="keyword">true</span>;</span><br><span class="line">            mCallbackText.setText(<span class="string">"Binding."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OnClickListener mUnbindListener = <span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mIsBound) &#123;</span><br><span class="line">                <span class="comment">// If we have received the service, and hence registered with</span></span><br><span class="line">                <span class="comment">// it, then now is the time to unregister.</span></span><br><span class="line">                <span class="keyword">if</span> (mService != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        mService.unregisterCallback(mCallback);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                        <span class="comment">// There is nothing special we need to do if the service</span></span><br><span class="line">                        <span class="comment">// has crashed.</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Detach our existing connection.</span></span><br><span class="line">                unbindService(mConnection);</span><br><span class="line">                unbindService(mSecondaryConnection);</span><br><span class="line">                mKillButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">                mIsBound = <span class="keyword">false</span>;</span><br><span class="line">                mCallbackText.setText(<span class="string">"Unbinding."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OnClickListener mKillListener = <span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// To kill the process hosting our service, we need to know its</span></span><br><span class="line">            <span class="comment">// PID.  Conveniently our service has a call that will return</span></span><br><span class="line">            <span class="comment">// to us that information.</span></span><br><span class="line">            <span class="keyword">if</span> (mSecondaryService != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> pid = mSecondaryService.getPid();</span><br><span class="line">                    <span class="comment">// Note that, though this API allows us to request to</span></span><br><span class="line">                    <span class="comment">// kill any process based on its PID, the kernel will</span></span><br><span class="line">                    <span class="comment">// still impose standard restrictions on which PIDs you</span></span><br><span class="line">                    <span class="comment">// are actually able to kill.  Typically this means only</span></span><br><span class="line">                    <span class="comment">// the process running your application and any additional</span></span><br><span class="line">                    <span class="comment">// processes created by that app as shown here; packages</span></span><br><span class="line">                    <span class="comment">// sharing a common UID will also be able to kill each</span></span><br><span class="line">                    <span class="comment">// other's processes.</span></span><br><span class="line">                    Process.killProcess(pid);</span><br><span class="line">                    mCallbackText.setText(<span class="string">"Killed service process."</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">                    <span class="comment">// Recover gracefully from the process hosting the</span></span><br><span class="line">                    <span class="comment">// server dying.</span></span><br><span class="line">                    <span class="comment">// Just for purposes of the sample, put up a notification.</span></span><br><span class="line">                    Toast.makeText(Binding.<span class="keyword">this</span>,</span><br><span class="line">                            R.string.remote_call_failed,</span><br><span class="line">                            Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// Code showing how to deal with callbacks.</span></span><br><span class="line">    <span class="comment">// ----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This implementation is used to receive callbacks from the remote</span></span><br><span class="line"><span class="comment">     * service.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> IRemoteServiceCallback mCallback = <span class="keyword">new</span> IRemoteServiceCallback.Stub() &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This is called by the remote service regularly to tell us about</span></span><br><span class="line"><span class="comment">         * new values.  Note that IPC calls are dispatched through a thread</span></span><br><span class="line"><span class="comment">         * pool running in each process, so the code executing here will</span></span><br><span class="line"><span class="comment">         * NOT be running in our main thread like most other things -- so,</span></span><br><span class="line"><span class="comment">         * to update the UI, we need to use a Handler to hop over there.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueChanged</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            mHandler.sendMessage(mHandler.obtainMessage(BUMP_MSG, value, <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUMP_MSG = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> BUMP_MSG:</span><br><span class="line">                    mCallbackText.setText(<span class="string">"Received from service: "</span> + msg.arg1);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><p>[1]、<a href="https://developer.android.com/guide/components/aidl.html" target="_blank" rel="noopener">Android AIDL</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-AIDL&quot;&gt;&lt;a href=&quot;#Android-AIDL&quot; class=&quot;headerlink&quot; title=&quot;Android AIDL&quot;&gt;&lt;/a&gt;Android AIDL&lt;/h1&gt;&lt;p&gt;&lt;code&gt;AIDL：Android Interface D
      
    
    </summary>
    
      <category term="Android" scheme="https://tanjunze.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://tanjunze.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java 多线程</title>
    <link href="https://tanjunze.github.io/2018/02/10/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://tanjunze.github.io/2018/02/10/Java多线程/</id>
    <published>2018-02-09T23:38:33.000Z</published>
    <updated>2019-03-26T07:26:58.149Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java-线程"><a href="#Java-线程" class="headerlink" title="Java 线程"></a>Java 线程</h3><p><strong>进程：</strong>CPU资源的最小分配单元</p><p><strong>线程</strong>：CPU调度的最小单元</p><p>一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束</p><h4 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h4><p><img src="/images/java_theads.png" alt></p><ul><li><p>新建状态</p><p>使用使用 <strong>new</strong> 关键字和 <strong>Thread</strong> 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 <strong>start()</strong> 这个线程。</p></li><li><p>就绪状态</p><p>当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。</p></li><li><p>运行状态</p><p>如果就绪状态的线程获取 CPU 资源，就可以执行 <strong>run()</strong>，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。</p></li><li><p>阻塞状态</p><p>一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种</p><ul><li>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。</li><li>同步阻塞：线程在获取synchronized同步锁失败（被其他线程占用）</li><li>其他阻塞：通过调度线程的sleep()或join()发出了I/O请求时，线程就会进入到阻塞状态。当sleep()阻塞超时，join()等待线程终止或超时，或者I/O处理完毕，线程重新转入就绪状态。</li></ul></li><li><p>结束状态（死亡状态）</p><p>一个运行状态的线程完成任务或其他终止条件发生时，该线程就会切换到终止状态</p></li></ul><h4 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h4><p>Java 线程优先级使用 1 ~ 10 的整数表示：</p><ul><li>最低优先级 1：<code>Thread.MIN_PRIORITY</code></li><li>最高优先级 10：<code>Thread.MAX_PRIORITY</code></li><li>普通优先级 5：<code>Thread.NORM_PRIORITY</code></li></ul><h4 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h4><p>Java 提供了三种创建线程的方法：</p><ul><li><p>实现<strong>Runnable</strong>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ···</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">          t = <span class="keyword">new</span> Thread(<span class="keyword">this</span>, threadName);</span><br><span class="line">          t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;      </span><br><span class="line">      RunnableThread rthread = <span class="keyword">new</span> RunnableThread( <span class="string">"Thread-1"</span>);</span><br><span class="line">      rthread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>继承<strong>Thread</strong>类本身</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.run();</span><br><span class="line">      <span class="comment">// ····</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      ThreadTest tTest = <span class="keyword">new</span> ThreadTest( <span class="string">"Thread-1"</span>);</span><br><span class="line">      tTest.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>通过<strong>Callable</strong>和<strong>Future</strong>创建线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">// ···</span></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"> ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line">        Task task = <span class="keyword">new</span> Task();</span><br><span class="line">        Future&lt;Integer&gt; result = executor.submit(task);</span><br><span class="line">        executor.shutdown();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"task运行结果"</span>+result.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>使用多个线程来执行并行任务，当程序使用多线程时会产生一些的问题，如多线程频繁创建销毁产生的性能开销，当多个线程争夺同一个资源产生并发问题（死锁问题）等。</p><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>用于解决大量线程频繁创建销毁带来的性能开销，当一个线程任务完成时，在线程池中复用当前线程并执行新的任务。</p><p><strong>优点</strong></p><ul><li><p>减少频发创建销毁线程带来的线程开销。</p></li><li><p>复用线程可以提高响应速度</p></li><li><p>提高线程的可管理性</p><p>线程是一种稀缺的资源，若不加以限制，不仅占用大量的资源，而且会影响系统的稳定性。线程池可以对线程的创建于停止，线程数量等因素加以控制，使得线程在一种可控的范围内运行。</p></li></ul><p><strong>组成</strong></p><ul><li><p>工作线程</p><p>工作线程是一组已经处于运行中的线程，它们不断地向阻塞队列中领取任务执行。</p></li><li><p>阻塞队列</p><p>阻塞队列用于存储工作线程来不及处理的任务。当线程都在执行任务时，到来的新任务就只能暂时在阻塞队列中存储。</p></li></ul><p><strong>创建线程池</strong></p><p>java中通过Executors提供四种线程池</p><ul><li><p>newCachedThreadPool</p><p>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，无可回收，则新建线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService cachedThreadPool = Executors.newCachedThreadPool();  </span><br><span class="line">cachedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="comment">//···</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>newFixedThreadPool</p><p>创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定线程池大小为3</span></span><br><span class="line">ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>newScheduledThreadPool</p><p>创建定长的线程池，支持定时及周期性任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class="number">5</span>);  </span><br><span class="line">scheduledThreadPool.schedule(<span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">System.out.println(<span class="string">"delay 1 seconds, and excute every 3 seconds"</span>);  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;, <span class="number">1</span>, <span class="number">3</span>, TimeUnit.SECONDS);  <span class="comment">//延迟1秒后每3秒执行一次</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>newSingleThreadExecutor</p><p>创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定的顺序执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();  </span><br><span class="line"> singleThreadExecutor.execute(<span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//···</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>虽然java中提供了4中创建线程池的方式，但不推荐在开发中使用，因为ExecutorService 默认使用了最大长度为Integer.MAX_VALUE的<code>LinkedBlockingQueue</code>链表阻塞队列在Adroid开发中可能产生OOM。详细原因请移步<a href="https://www.hollischuang.com/archives/2888" target="_blank" rel="noopener">Java中线程池，你真的会用吗？</a>，推荐使用<code>ThreadPoolExecutor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">10</span>, <span class="number">10</span>,<span class="number">60L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p>什么是线程安全？在多线程执行的过程中虽然可以提高任务的处理，系统的响应速度也产生了线程之间的安全问题，如多线程之间可能抢占资源，导致了一些错误（卖票问题）。解决多线程下产生的问题就是线程安全。</p><p><strong>产生线程安全问题的原因</strong></p><p>首先在JVM中有2内存模型</p><ul><li><p>主内存</p><p>存放类的实例，静态数据等变量，是线程共享的。</p></li><li><p>工作内存</p><p>存放从主内存中拷贝的变量，每个线程都有自己的工作内存。</p></li></ul><p>java中线程不能直接操作主内存中的变量，只能将主内存中的变量拷贝至当前线程所在的工作内存中进行操作。线程间又不共享内存所以不能直接通信，需要接借助主内存进行线程间的通信。</p><p>工作内存与主内存的4中操作</p><ol><li>read:读取主内存的变量,并将其传送到工作内存</li><li>load:把read操作从主内存得到的变量值放入到工作内存的拷贝中</li><li>store:把工作内存中的一个变量值传送到主内存当中,以便用于后面的write操作</li><li>write:把store操作从工作内存中得到的变量的值放入主内存的变量中.</li></ol><p>由上可以了解到，当多个工作线程同时访问同一个变量时，每个线程都会将这个变量中拷贝到自己的工作内存进行修改操作再加载到主内存中又无法告知其他线程自己在操作（内存不可见性）。这种情况下，同一时刻一个变量可能会在<strong>同一个基础上进行了修改</strong>（共享变量 ‘10’，线程1减一同时线程2减一，可能造成变量变为‘9’，而实际应该为‘8’），从而产生一些同步问题。</p><p><img src="/images/jvm_thread_memory.png" alt></p><p><strong>实现线程安全的方式</strong></p><p>由上可以了解到线程产生的安全问题的原因，解决这个问题需要共享变量在同一个时刻只能有一个线程访问的机制，而java中就有这种机——锁机制。java内存模型中定义了2个原子操作</p><ol><li>lock:将主内存的变量标识为一条线程独占状态</li><li>unlock:解除主内存中变量的线程独占状态</li></ol><p>而在java代码层面上<strong>每个对象都有一个内置锁</strong>。锁的修饰体现为有 <strong>synchronized</strong>和<strong>volitate</strong>关键字。</p><ul><li><p>synchronized</p><p> synchronized用来解决多线程同步问题，根据修饰的位置不同分为：</p><ul><li><p>同步代码块</p><p>有synchronized关键字修饰的语句块。被该关键字修饰的语句块会自动被加上内置锁，从而实现同步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">      <span class="comment">// 同步代码块</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>同步方法</p><p>有synchronized关键字修饰的方法。内置锁会保护整个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">methodName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两者的区别：</p></li></ul><ol><li>修饰的位置不同。</li><li>作用范围不同</li><li>粒度大小不同。</li></ol><ul><li><p>volitate</p><p>使用 volitate 修饰变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> account = <span class="number">100</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>ReentrantLock</p><p>在JavaSE5.0中新增了一个java.util.concurrent包来支持同步。</p></li><li><p>其他线程同步方式</p><p><strong>final</strong> 修饰的变量不可写所以 final 也可以实现变量的同步。</p><p><strong>ThreadLocal</strong> </p><p>​        a.ThreadLocal与同步机制都是为了解决多线程中相同变量的访问冲突问题。<br>​        b.前者采用以”空间换时间”的方法，后者采用以”时间换空间”的方式</p></li></ul><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>乐观锁、CAS等</p><hr><p>参考：</p><ol><li><a href="http://www.runoob.com/java/java-multithreading.html" target="_blank" rel="noopener">Java 多线程编程</a></li><li><a href="https://zhuanlan.zhihu.com/p/33264000" target="_blank" rel="noopener">深入浅出Java线程池</a></li><li><a href="https://cuisuqiang.iteye.com/blog/2019372" target="_blank" rel="noopener"><a href="https://cuisuqiang.iteye.com/blog/2019372" target="_blank" rel="noopener">Java四种线程池的使用</a></a></li><li><a href="https://www.cnblogs.com/dolphin0520/p/3932921.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/dolphin0520/p/3932921.html" target="_blank" rel="noopener">Java并发编程：线程池的使用</a></a></li><li><a href="https://www.jianshu.com/p/ade771d2c9c0" target="_blank" rel="noopener">深入理解java线程池—ThreadPoolExecutor</a></li><li><a href="https://blog.csdn.net/dd864140130/article/details/58359102" target="_blank" rel="noopener">不一样的视角:从JVM内存模型谈线程安全</a></li><li><a href="https://juejin.im/post/5b35af3151882574aa5f69c5" target="_blank" rel="noopener">啃碎并发（五）：Java线程安全特性与问题</a></li><li><a href="https://juejin.im/entry/57339fe82e958a0066bf284f" target="_blank" rel="noopener">Java 中的多线程你只要看这一篇就够了</a></li><li><a href="https://droidyue.com/blog/2016/03/13/learning-threadlocal-in-java/" target="_blank" rel="noopener">理解Java中的ThreadLocal</a></li><li><a href="https://juejin.im/post/5a73cbbff265da4e807783f5" target="_blank" rel="noopener">Java CAS 原理剖析</a></li><li><a href="https://blog.csdn.net/javazejian/article/details/72772461" target="_blank" rel="noopener">全面理解Java内存模型(JMM)及volatile关键字</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java-线程&quot;&gt;&lt;a href=&quot;#Java-线程&quot; class=&quot;headerlink&quot; title=&quot;Java 线程&quot;&gt;&lt;/a&gt;Java 线程&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;进程：&lt;/strong&gt;CPU资源的最小分配单元&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程
      
    
    </summary>
    
      <category term="java" scheme="https://tanjunze.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://tanjunze.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Android ContentProvider</title>
    <link href="https://tanjunze.github.io/2018/01/26/Android%20ContentProvider/"/>
    <id>https://tanjunze.github.io/2018/01/26/Android ContentProvider/</id>
    <published>2018-01-25T23:27:04.000Z</published>
    <updated>2019-02-26T07:21:33.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-ContentProvider"><a href="#Android-ContentProvider" class="headerlink" title="Android  ContentProvider"></a>Android  ContentProvider</h1><p>ContentProvider（内容提供者）作为Android 四大组件之一主要用于为<strong>为其他应用提供复杂的数据或文件</strong>。</p><h3 id="内容-URI"><a href="#内容-URI" class="headerlink" title="内容 URI"></a>内容 URI</h3><p>是ContentProvider 的唯一表示,app 根据您 内容uri 查询操作数据。内容uri的结构如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content://authority/tablename/id</span><br></pre></td></tr></table></figure><table><thead><tr><th>标识</th><th>说明</th></tr></thead><tbody><tr><td>content</td><td>ContentProvider 前缀标识</td></tr><tr><td>authority</td><td>授权：指定内容提供者的名称，如：com.hello.provider</td></tr><tr><td>tablename</td><td>需要访问数据的名称，一般为数据库表名 如：user</td></tr><tr><td>id</td><td>数据表下 id 表示的行,如：1</td></tr></tbody></table><p>示例：<strong>content://com.hello.provider/user/1</strong> 访问  <strong>com.hello.provider</strong>数据<strong>user</strong> 表中<strong>1</strong>表示的行。</p><p><strong>内容url 的通配符</strong></p><p>​    <strong>*</strong>：匹配由任意长度的任何有效字符组成的字符串</p><p>​    <strong>#</strong>：匹配由任意长度的数字字符组成的字符串</p><h3 id="创建内容提供者"><a href="#创建内容提供者" class="headerlink" title="创建内容提供者"></a>创建内容提供者</h3><h4 id="1、实现ContentProvider"><a href="#1、实现ContentProvider" class="headerlink" title="1、实现ContentProvider"></a>1、实现ContentProvider</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BookProvider"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITY = <span class="string">"com.ryg.chapter_2.book.provider"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Uri BOOK_CONTENT_URI = Uri.parse(<span class="string">"content://"</span></span><br><span class="line">            + AUTHORITY + <span class="string">"/book"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Uri USER_CONTENT_URI = Uri.parse(<span class="string">"content://"</span></span><br><span class="line">            + AUTHORITY + <span class="string">"/user"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOK_URI_CODE = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> USER_URI_CODE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> UriMatcher sUriMatcher = <span class="keyword">new</span> UriMatcher(</span><br><span class="line">            UriMatcher.NO_MATCH);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        sUriMatcher.addURI(AUTHORITY, <span class="string">"book"</span>, BOOK_URI_CODE);</span><br><span class="line">        sUriMatcher.addURI(AUTHORITY, <span class="string">"user"</span>, USER_URI_CODE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> SQLiteDatabase mDb;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onCreate, current thread:"</span></span><br><span class="line">                + Thread.currentThread().getName());</span><br><span class="line">        mContext = getContext();</span><br><span class="line">        initProviderData();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initProviderData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mDb = <span class="keyword">new</span> DbOpenHelper(mContext).getWritableDatabase();</span><br><span class="line">        mDb.execSQL(<span class="string">"delete from "</span> + DbOpenHelper.BOOK_TABLE_NAME);</span><br><span class="line">        mDb.execSQL(<span class="string">"delete from "</span> + DbOpenHelper.USER_TALBE_NAME);</span><br><span class="line">        mDb.execSQL(<span class="string">"insert into book values(3,'Android');"</span>);</span><br><span class="line">        mDb.execSQL(<span class="string">"insert into book values(4,'Ios');"</span>);</span><br><span class="line">        mDb.execSQL(<span class="string">"insert into book values(5,'Html5');"</span>);</span><br><span class="line">        mDb.execSQL(<span class="string">"insert into user values(1,'jake',1);"</span>);</span><br><span class="line">        mDb.execSQL(<span class="string">"insert into user values(2,'jasmine',0);"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(Uri uri, String[] projection, String selection,</span></span></span><br><span class="line"><span class="function"><span class="params">            String[] selectionArgs, String sortOrder)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"query, current thread:"</span> + Thread.currentThread().getName());</span><br><span class="line">        String table = getTableName(uri);</span><br><span class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported URI: "</span> + uri);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mDb.query(table, projection, selection, selectionArgs, <span class="keyword">null</span>, <span class="keyword">null</span>, sortOrder, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"getType"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues values)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"insert"</span>);</span><br><span class="line">        String table = getTableName(uri);</span><br><span class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported URI: "</span> + uri);</span><br><span class="line">        &#125;</span><br><span class="line">        mDb.insert(table, <span class="keyword">null</span>, values);</span><br><span class="line">        mContext.getContentResolver().notifyChange(uri, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> uri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"delete"</span>);</span><br><span class="line">        String table = getTableName(uri);</span><br><span class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported URI: "</span> + uri);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count = mDb.delete(table, selection, selectionArgs);</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            getContext().getContentResolver().notifyChange(uri, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Uri uri, ContentValues values, String selection,</span></span></span><br><span class="line"><span class="function"><span class="params">            String[] selectionArgs)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"update"</span>);</span><br><span class="line">        String table = getTableName(uri);</span><br><span class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported URI: "</span> + uri);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> row = mDb.update(table, values, selection, selectionArgs);</span><br><span class="line">        <span class="keyword">if</span> (row &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            getContext().getContentResolver().notifyChange(uri, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> row;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getTableName</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        String tableName = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (sUriMatcher.match(uri)) &#123;</span><br><span class="line">        <span class="keyword">case</span> BOOK_URI_CODE:</span><br><span class="line">            tableName = DbOpenHelper.BOOK_TABLE_NAME;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> USER_URI_CODE:</span><br><span class="line">            tableName = DbOpenHelper.USER_TALBE_NAME;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tableName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册 ContentProvider</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:name</span>=<span class="string">".provider.BookProvider"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:authorities</span>=<span class="string">"com.ryg.chapter_2.book.provider"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、调用ContentProvider"><a href="#2、调用ContentProvider" class="headerlink" title="2、调用ContentProvider"></a>2、调用ContentProvider</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ProviderActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_provider);</span><br><span class="line">        </span><br><span class="line">        Uri bookUri = Uri.parse(<span class="string">"content://com.ryg.chapter_2.book.provider/book"</span>);</span><br><span class="line">        ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        values.put(<span class="string">"_id"</span>, <span class="number">6</span>);</span><br><span class="line">        values.put(<span class="string">"name"</span>, <span class="string">"程序设计的艺术"</span>);</span><br><span class="line">        getContentResolver().insert(bookUri, values);</span><br><span class="line">        Cursor bookCursor = getContentResolver().query(bookUri, <span class="keyword">new</span> String[]&#123;<span class="string">"_id"</span>, <span class="string">"name"</span>&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">while</span> (bookCursor.moveToNext()) &#123;</span><br><span class="line">            Book book = <span class="keyword">new</span> Book();</span><br><span class="line">            book.bookId = bookCursor.getInt(<span class="number">0</span>);</span><br><span class="line">            book.bookName = bookCursor.getString(<span class="number">1</span>);</span><br><span class="line">            Log.d(TAG, <span class="string">"query book:"</span> + book.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        bookCursor.close();</span><br><span class="line"></span><br><span class="line">        Uri userUri = Uri.parse(<span class="string">"content://com.ryg.chapter_2.book.provider/user"</span>);</span><br><span class="line">        Cursor userCursor = getContentResolver().query(userUri, <span class="keyword">new</span> String[]&#123;<span class="string">"_id"</span>, <span class="string">"name"</span>, <span class="string">"sex"</span>&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">while</span> (userCursor.moveToNext()) &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.userId = userCursor.getInt(<span class="number">0</span>);</span><br><span class="line">            user.userName = userCursor.getString(<span class="number">1</span>);</span><br><span class="line">            user.isMale = userCursor.getInt(<span class="number">2</span>) == <span class="number">1</span>;</span><br><span class="line">            Log.d(TAG, <span class="string">"query user:"</span> + user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        userCursor.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、添加自定义权限"><a href="#3、添加自定义权限" class="headerlink" title="3、添加自定义权限"></a>3、添加自定义权限</h4><p>ContentProvider 可以自定义权限来限制 数据共享的应用，</p><p>自定义权限：<a href="https://developer.android.com/guide/topics/manifest/permission-element.html" target="_blank" rel="noopener">https://developer.android.com/guide/topics/manifest/permission-element.html</a></p><hr><p>参考：</p><p>[1]、<a href="https://developer.android.com/guide/topics/providers/content-provider-creating?hl=zh-cn" target="_blank" rel="noopener">Android  ContentProvider </a></p><p>[2]、<a href="https://developer.android.com/guide/topics/manifest/permission-element.html" target="_blank" rel="noopener">Android Permission</a></p><p>[3]、<a href="https://github.com/singwhatiwanna/android-art-res" target="_blank" rel="noopener">《Android开发艺术探索》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-ContentProvider&quot;&gt;&lt;a href=&quot;#Android-ContentProvider&quot; class=&quot;headerlink&quot; title=&quot;Android  ContentProvider&quot;&gt;&lt;/a&gt;Android  Content
      
    
    </summary>
    
      <category term="Android" scheme="https://tanjunze.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://tanjunze.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
