<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2019/02/20/Untitled/"/>
      <url>/2019/02/20/Untitled/</url>
      
        <content type="html"><![CDATA[<h1 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h1><p><code>Service</code> 是一个可以在后台执行长时间运行操作而不提供用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行。</p><p>服务基本上分为两种形式：</p><ul><li><p>启动</p><p>当应用组件（如 Activity）通过调用 <code>startService()</code> 启动服务时，服务即处于“启动”状态。一旦启动，服务即可在后台无限期运行，即使启动服务的组件已被销毁也不受影响。 已启动的服务通常是执行单一操作，而且不会将结果返回给调用方。例如，它可能通过网络下载或上传文件。 操作完成后，服务会自行停止运行。</p></li><li><p>绑定</p><p>当应用组件通过调用 <code>bindService()</code> 绑定到服务时，服务即处于“绑定”状态。绑定服务提供了一个客户端-服务器接口，允许组件与服务进行交互、发送请求、获取结果，甚至是利用进程间通信 (IPC) 跨进程执行这些操作。 仅当与另一个应用组件绑定时，绑定服务才会运行。 多个组件可以同时绑定到该服务，但全部取消绑定后，该服务即会被销毁。</p></li></ul><p>虽然本文档是分开概括讨论这两种服务，但是您的服务可以同时以这两种方式运行，也就是说，它既可以是启动服务（以无限期运行），也允许绑定。问题只是在于您是否实现了一组回调方法：<code>onStartCommand()</code>（允许组件启动服务）和 <code>onBind()</code>（允许绑定服务）。</p><p>无论应用是处于启动状态还是绑定状态，抑或处于启动并且绑定状态，任何应用组件均可像使用 Activity 那样通过调用 <code>Intent</code> 来使用服务（即使此服务来自另一应用）。 不过，您可以通过清单文件将服务声明为私有服务，并阻止其他应用访问。 <a href="https://developer.android.com/guide/components/services?hl=zh-cn#Declaring" target="_blank" rel="noopener">使用清单文件声明服务</a>部分将对此做更详尽的阐述。</p><p><strong>注意：</strong>服务在其托管进程的主线程中运行，它既<strong>不</strong>创建自己的线程，也<strong>不</strong>在单独的进程中运行（除非另行指定）。 这意味着，如果服务将执行任何 CPU 密集型工作或阻止性操作（例如 MP3 播放或联网），则应在服务内创建新线程来完成这项工作。通过使用单独的线程，可以降低发生“应用无响应”(ANR) 错误的风险，而应用的主线程仍可继续专注于运行用户与 Activity 之间的交互。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="您应使用服务还是线程？"><a href="#您应使用服务还是线程？" class="headerlink" title="您应使用服务还是线程？"></a>您应使用服务还是线程？</h3><p>简单地说，服务是一种即使用户未与应用交互也可在后台运行的组件。 因此，您应仅在必要时才创建服务。</p><p>如需在主线程外部执行工作，不过只是在用户正在与应用交互时才有此需要，则应创建新线程而非服务。 例如，如果您只是想在 Activity 运行的同时播放一些音乐，则可在 <code>onCreate()</code> 中创建线程，在 <code>onStart()</code> 中启动线程，然后在 <code>onStop()</code> 中停止线程。您还可以考虑使用 <code>AsyncTask</code>或 <code>HandlerThread</code>，而非传统的 <code>Thread</code> 类。如需了解有关线程的详细信息，请参阅<a href="https://developer.android.com/guide/components/processes-and-threads.html?hl=zh-cn#Threads" target="_blank" rel="noopener">进程和线程</a>文档。</p><p>请记住，如果您确实要使用服务，则默认情况下，它仍会在应用的主线程中运行，因此，如果服务执行的是密集型或阻止性操作，则您仍应在服务内创建新线程。</p><p>要创建服务，您必须创建 <code>Service</code> 的子类（或使用它的一个现有子类）。在实现中，您需要重写一些回调方法，以处理服务生命周期的某些关键方面并提供一种机制将组件绑定到服务（如适用）。 应重写的最重要的回调方法包括：</p><ul><li><p><code>onStartCommand()</code></p><p>当另一个组件（如 Activity）通过调用 <code>startService()</code> 请求启动服务时，系统将调用此方法。一旦执行此方法，服务即会启动并可在后台无限期运行。 如果您实现此方法，则在服务工作完成后，需要由您通过调用 <code>stopSelf()</code> 或 <code>stopService()</code> 来停止服务。（如果您只想提供绑定，则无需实现此方法。）</p></li><li><p><code>onBind()</code></p><p>当另一个组件想通过调用 <code>bindService()</code> 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，您必须通过返回 <code>IBinder</code> 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 null。</p></li><li><p><code>onCreate()</code></p><p>首次创建服务时，系统将调用此方法来执行一次性设置程序（在调用 <code>onStartCommand()</code> 或<code>onBind()</code> 之前）。如果服务已在运行，则不会调用此方法。</p></li><li><p><code>onDestroy()</code></p><p>当服务不再使用且将被销毁时，系统将调用此方法。服务应该实现此方法来清理所有资源，如线程、注册的侦听器、接收器等。 这是服务接收的最后一个调用。</p></li></ul><p>如果组件通过调用 <code>startService()</code> 启动服务（这会导致对 <code>onStartCommand()</code> 的调用），则服务将一直运行，直到服务使用 <code>stopSelf()</code> 自行停止运行，或由其他组件通过调用 <code>stopService()</code> 停止它为止。</p><p>如果组件是通过调用 <code>bindService()</code> 来创建服务（且<em>未</em>调用 <code>onStartCommand()</code>，则服务只会在该组件与其绑定时运行。一旦该服务与所有客户端之间的绑定全部取消，系统便会销毁它。</p><p>仅当内存过低且必须回收系统资源以供具有用户焦点的 Activity 使用时，Android 系统才会强制停止服务。如果将服务绑定到具有用户焦点的 Activity，则它不太可能会终止；如果将服务声明为<a href="https://developer.android.com/guide/components/services?hl=zh-cn#Foreground" target="_blank" rel="noopener">在前台运行</a>（稍后讨论），则它几乎永远不会终止。或者，如果服务已启动并要长时间运行，则系统会随着时间的推移降低服务在后台任务列表中的位置，而服务也将随之变得非常容易被终止；如果服务是启动服务，则您必须将其设计为能够妥善处理系统对它的重启。 如果系统终止服务，那么一旦资源变得再次可用，系统便会重启服务（不过这还取决于从 <code>onStartCommand()</code> 返回的值，本文稍后会对此加以讨论）。如需了解有关系统会在何时销毁服务的详细信息，请参阅<a href="https://developer.android.com/guide/components/processes-and-threads.html?hl=zh-cn" target="_blank" rel="noopener">进程和线程</a>文档。</p><p>在下文中，您将了解如何创建各类服务以及如何从其他应用组件使用服务。</p><h3 id="使用清单文件声明服务"><a href="#使用清单文件声明服务" class="headerlink" title="使用清单文件声明服务"></a>使用清单文件声明服务</h3><p>如同 Activity（以及其他组件）一样，您必须在应用的清单文件中声明所有服务。</p><p>要声明服务，请添加 <a href="https://developer.android.com/guide/topics/manifest/service-element.html?hl=zh-cn" target="_blank" rel="noopener"><code></code></a> 元素作为 <a href="https://developer.android.com/guide/topics/manifest/application-element.html?hl=zh-cn" target="_blank" rel="noopener"><code></code></a> 元素的子元素。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest ... &gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;application ... &gt;</span><br><span class="line">      &lt;service android:name=&quot;.ExampleService&quot; /&gt;</span><br><span class="line">      ...</span><br><span class="line">  &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><p>如需了解有关使用清单文件声明服务的详细信息，请参阅 <a href="https://developer.android.com/guide/topics/manifest/service-element.html?hl=zh-cn" target="_blank" rel="noopener"><code></code></a> 元素参考文档。</p><p>您还可将其他属性包括在 <a href="https://developer.android.com/guide/topics/manifest/service-element.html?hl=zh-cn" target="_blank" rel="noopener"><code></code></a> 元素中，以定义一些特性，如启动服务及其运行所在进程所需的权限。<a href="https://developer.android.com/guide/topics/manifest/service-element.html?hl=zh-cn#nm" target="_blank" rel="noopener"><code>android:name</code></a> 属性是唯一必需的属性，用于指定服务的类名。应用一旦发布，即不应更改此类名，如若不然，可能会存在因依赖显式 Intent 启动或绑定服务而破坏代码的风险（请阅读博客文章<a href="http://android-developers.blogspot.com/2011/06/things-that-cannot-change.html" target="_blank" rel="noopener">Things That Cannot Change</a>[不能更改的内容]）。</p><p>为了确保应用的安全性，<strong>请始终使用显式 Intent 启动或绑定 Service</strong>，且不要为服务声明 Intent 过滤器。 启动哪个服务存在一定的不确定性，而如果对这种不确定性的考量非常有必要，则可为服务提供 Intent 过滤器并从 <code>Intent</code> 中排除相应的组件名称，但随后必须使用 <code>setPackage()</code> 方法设置 Intent 的软件包，这样可以充分消除目标服务的不确定性。</p><p>此外，还可以通过添加 <a href="https://developer.android.com/guide/topics/manifest/service-element.html?hl=zh-cn#exported" target="_blank" rel="noopener"><code>android:exported</code></a> 属性并将其设置为 <code>&quot;false&quot;</code>，确保服务仅适用于您的应用。这可以有效阻止其他应用启动您的服务，即便在使用显式 Intent 时也如此。</p><h2 id="创建启动服务"><a href="#创建启动服务" class="headerlink" title="创建启动服务"></a>创建启动服务</h2><p>启动服务由另一个组件通过调用 <code>startService()</code> 启动，这会导致调用服务的 <code>onStartCommand()</code> 方法。</p><p>服务启动之后，其生命周期即独立于启动它的组件，并且可以在后台无限期地运行，即使启动服务的组件已被销毁也不受影响。 因此，服务应通过调用 <code>stopSelf()</code> 结束工作来自行停止运行，或者由另一个组件通过调用 <code>stopService()</code> 来停止它。</p><p>应用组件（如 Activity）可以通过调用 <code>startService()</code> 方法并传递 <code>Intent</code> 对象（指定服务并包含待使用服务的所有数据）来启动服务。服务通过 <code>onStartCommand()</code> 方法接收此 <code>Intent</code>。</p><p>例如，假设某 Activity 需要将一些数据保存到在线数据库中。该 Activity 可以启动一个协同服务，并通过向 <code>startService()</code> 传递一个 Intent，为该服务提供要保存的数据。服务通过 <code>onStartCommand()</code> 接收 Intent，连接到互联网并执行数据库事务。事务完成之后，服务会自行停止运行并随即被销毁。</p><p><strong>注意：</strong>默认情况下，服务与服务声明所在的应用运行于同一进程，而且运行于该应用的主线程中。 因此，如果服务在用户与来自同一应用的 Activity 进行交互时执行密集型或阻止性操作，则会降低 Activity 性能。 为了避免影响应用性能，您应在服务内启动新线程。</p><p>从传统上讲，您可以扩展两个类来创建启动服务：</p><ul><li><p><code>Service</code></p><p>这是适用于所有服务的基类。扩展此类时，必须创建一个用于执行所有服务工作的新线程，因为默认情况下，服务将使用应用的主线程，这会降低应用正在运行的所有 Activity 的性能。</p></li><li><p><code>IntentService</code></p><p>这是 <code>Service</code> 的子类，它使用工作线程逐一处理所有启动请求。如果您不要求服务同时处理多个请求，这是最好的选择。 您只需实现 <code>onHandleIntent()</code> 方法即可，该方法会接收每个启动请求的 Intent，使您能够执行后台工作。</p></li></ul><p>下文介绍如何使用其中任一个类来实现服务。</p><h3 id="扩展-IntentService-类"><a href="#扩展-IntentService-类" class="headerlink" title="扩展 IntentService 类"></a>扩展 IntentService 类</h3><p>由于大多数启动服务都不必同时处理多个请求（实际上，这种多线程情况可能很危险），因此使用<code>IntentService</code> 类实现服务也许是最好的选择。</p><p><code>IntentService</code> 执行以下操作：</p><ul><li>创建默认的工作线程，用于在应用的主线程外执行传递给 <code>onStartCommand()</code> 的所有 Intent。</li><li>创建工作队列，用于将 Intent 逐一传递给 <code>onHandleIntent()</code> 实现，这样您就永远不必担心多线程问题。</li><li>在处理完所有启动请求后停止服务，因此您永远不必调用 <code>stopSelf()</code>。</li><li>提供 <code>onBind()</code> 的默认实现（返回 null）。</li><li>提供 <code>onStartCommand()</code> 的默认实现，可将 Intent 依次发送到工作队列和 <code>onHandleIntent()</code> 实现。</li></ul><p>综上所述，您只需实现 <code>onHandleIntent()</code> 来完成客户端提供的工作即可。（不过，您还需要为服务提供小型构造函数。）</p><p>以下是 <code>IntentService</code> 的实现示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class HelloIntentService extends IntentService &#123;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * A constructor is required, and must call the super IntentService(String)</span><br><span class="line">   * constructor with a name for the worker thread.</span><br><span class="line">   */</span><br><span class="line">  public HelloIntentService() &#123;</span><br><span class="line">      super(&quot;HelloIntentService&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * The IntentService calls this method from the default worker thread with</span><br><span class="line">   * the intent that started the service. When this method returns, IntentService</span><br><span class="line">   * stops the service, as appropriate.</span><br><span class="line">   */</span><br><span class="line">  @Override</span><br><span class="line">  protected void onHandleIntent(Intent intent) &#123;</span><br><span class="line">      // Normally we would do some work here, like download a file.</span><br><span class="line">      // For our sample, we just sleep for 5 seconds.</span><br><span class="line">      try &#123;</span><br><span class="line">          Thread.sleep(5000);</span><br><span class="line">      &#125; catch (InterruptedException e) &#123;</span><br><span class="line">          // Restore interrupt status.</span><br><span class="line">          Thread.currentThread().interrupt();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您只需要一个构造函数和一个 <code>onHandleIntent()</code> 实现即可。</p><p>如果您决定还重写其他回调方法（如 <code>onCreate()</code>、<code>onStartCommand()</code> 或 <code>onDestroy()</code>），请确保调用超类实现，以便 <code>IntentService</code> 能够妥善处理工作线程的生命周期。</p><p>例如，<code>onStartCommand()</code> 必须返回默认实现（即，如何将 Intent 传递给 <code>onHandleIntent()</code>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">    Toast.makeText(this, &quot;service starting&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    return super.onStartCommand(intent,flags,startId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除 <code>onHandleIntent()</code> 之外，您无需从中调用超类的唯一方法就是 <code>onBind()</code>（仅当服务允许绑定时，才需要实现该方法）。</p><p>在下一部分中，您将了解如何在扩展 <code>Service</code> 基类时实现同类服务。该基类包含更多代码，但如需同时处理多个启动请求，则更适合使用该基类。</p><h3 id="扩展服务类"><a href="#扩展服务类" class="headerlink" title="扩展服务类"></a>扩展服务类</h3><p>正如上一部分中所述，使用 <code>IntentService</code> 显著简化了启动服务的实现。但是，若要求服务执行多线程（而不是通过工作队列处理启动请求），则可扩展 <code>Service</code> 类来处理每个 Intent。</p><p>为了便于比较，以下提供了 <code>Service</code> 类实现的代码示例，该类执行的工作与上述使用 <code>IntentService</code>的示例完全相同。也就是说，对于每个启动请求，它均使用工作线程执行作业，且每次仅处理一个请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">public class HelloService extends Service &#123;</span><br><span class="line">  private Looper mServiceLooper;</span><br><span class="line">  private ServiceHandler mServiceHandler;</span><br><span class="line"></span><br><span class="line">  // Handler that receives messages from the thread</span><br><span class="line">  private final class ServiceHandler extends Handler &#123;</span><br><span class="line">      public ServiceHandler(Looper looper) &#123;</span><br><span class="line">          super(looper);</span><br><span class="line">      &#125;</span><br><span class="line">      @Override</span><br><span class="line">      public void handleMessage(Message msg) &#123;</span><br><span class="line">          // Normally we would do some work here, like download a file.</span><br><span class="line">          // For our sample, we just sleep for 5 seconds.</span><br><span class="line">          try &#123;</span><br><span class="line">              Thread.sleep(5000);</span><br><span class="line">          &#125; catch (InterruptedException e) &#123;</span><br><span class="line">              // Restore interrupt status.</span><br><span class="line">              Thread.currentThread().interrupt();</span><br><span class="line">          &#125;</span><br><span class="line">          // Stop the service using the startId, so that we don&apos;t stop</span><br><span class="line">          // the service in the middle of handling another job</span><br><span class="line">          stopSelf(msg.arg1);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void onCreate() &#123;</span><br><span class="line">    // Start up the thread running the service.  Note that we create a</span><br><span class="line">    // separate thread because the service normally runs in the process&apos;s</span><br><span class="line">    // main thread, which we don&apos;t want to block.  We also make it</span><br><span class="line">    // background priority so CPU-intensive work will not disrupt our UI.</span><br><span class="line">    HandlerThread thread = new HandlerThread(&quot;ServiceStartArguments&quot;,</span><br><span class="line">            Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">    thread.start();</span><br><span class="line"></span><br><span class="line">    // Get the HandlerThread&apos;s Looper and use it for our Handler</span><br><span class="line">    mServiceLooper = thread.getLooper();</span><br><span class="line">    mServiceHandler = new ServiceHandler(mServiceLooper);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">      Toast.makeText(this, &quot;service starting&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">      // For each start request, send a message to start a job and deliver the</span><br><span class="line">      // start ID so we know which request we&apos;re stopping when we finish the job</span><br><span class="line">      Message msg = mServiceHandler.obtainMessage();</span><br><span class="line">      msg.arg1 = startId;</span><br><span class="line">      mServiceHandler.sendMessage(msg);</span><br><span class="line"></span><br><span class="line">      // If we get killed, after returning from here, restart</span><br><span class="line">      return START_STICKY;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public IBinder onBind(Intent intent) &#123;</span><br><span class="line">      // We don&apos;t provide binding, so return null</span><br><span class="line">      return null;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void onDestroy() &#123;</span><br><span class="line">    Toast.makeText(this, &quot;service done&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如您所见，与使用 <code>IntentService</code> 相比，这需要执行更多工作。</p><p>但是，因为是由您自己处理对 <code>onStartCommand()</code> 的每个调用，因此可以同时执行多个请求。此示例并未这样做，但如果您希望如此，则可为每个请求创建一个新线程，然后立即运行这些线程（而不是等待上一个请求完成）。</p><p>请注意，<code>onStartCommand()</code> 方法必须返回整型数。整型数是一个值，用于描述系统应该如何在服务终止的情况下继续运行服务（如上所述，<code>IntentService</code> 的默认实现将为您处理这种情况，不过您可以对其进行修改）。从 <code>onStartCommand()</code> 返回的值必须是以下常量之一：</p><ul><li><p><code>START_NOT_STICKY</code></p><p>如果系统在 <code>onStartCommand()</code> 返回后终止服务，则除非有挂起 Intent 要传递，否则系统<em>不会</em>重建服务。这是最安全的选项，可以避免在不必要时以及应用能够轻松重启所有未完成的作业时运行服务。</p></li><li><p><code>START_STICKY</code></p><p>如果系统在 <code>onStartCommand()</code> 返回后终止服务，则会重建服务并调用 <code>onStartCommand()</code>，但<em>不会</em>重新传递最后一个 Intent。相反，除非有挂起 Intent 要启动服务（在这种情况下，将传递这些 Intent ），否则系统会通过空 Intent 调用 <code>onStartCommand()</code>。这适用于不执行命令、但无限期运行并等待作业的媒体播放器（或类似服务）。</p></li><li><p><code>START_REDELIVER_INTENT</code></p><p>如果系统在 <code>onStartCommand()</code> 返回后终止服务，则会重建服务，并通过传递给服务的最后一个 Intent 调用 <code>onStartCommand()</code>。任何挂起 Intent 均依次传递。这适用于主动执行应该立即恢复的作业（例如下载文件）的服务。</p></li></ul><p>有关这些返回值的更多详细信息，请查阅每个常量链接的参考文档。</p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>您可以通过将 <code>Intent</code>（指定要启动的服务）传递给 <code>startService()</code>，从 Activity 或其他应用组件启动服务。Android 系统调用服务的 <code>onStartCommand()</code> 方法，并向其传递 <code>Intent</code>。（切勿直接调用 <code>onStartCommand()</code>。）</p><p>例如，Activity 可以结合使用显式 Intent 与 <code>startService()</code>，启动上文中的示例服务 (<code>HelloService</code>)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent(this, HelloService.class);</span><br><span class="line">startService(intent);</span><br></pre></td></tr></table></figure><p><code>startService()</code> 方法将立即返回，且 Android 系统调用服务的 <code>onStartCommand()</code> 方法。如果服务尚未运行，则系统会先调用 <code>onCreate()</code>，然后再调用 <code>onStartCommand()</code>。</p><p>如果服务亦未提供绑定，则使用 <code>startService()</code> 传递的 Intent 是应用组件与服务之间唯一的通信模式。但是，如果您希望服务返回结果，则启动服务的客户端可以为广播创建一个 <code>PendingIntent</code> （使用 <code>getBroadcast()</code>），并通过启动服务的 <code>Intent</code> 传递给服务。然后，服务就可以使用广播传递结果。</p><p>多个服务启动请求会导致多次对服务的 <code>onStartCommand()</code> 进行相应的调用。但是，要停止服务，只需一个服务停止请求（使用 <code>stopSelf()</code> 或 <code>stopService()</code>）即可。</p><h3 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h3><p>启动服务必须管理自己的生命周期。也就是说，除非系统必须回收内存资源，否则系统不会停止或销毁服务，而且服务在 <code>onStartCommand()</code> 返回后会继续运行。因此，服务必须通过调用 <code>stopSelf()</code> 自行停止运行，或者由另一个组件通过调用 <code>stopService()</code> 来停止它。</p><p>一旦请求使用 <code>stopSelf()</code> 或 <code>stopService()</code> 停止服务，系统就会尽快销毁服务。</p><p>但是，如果服务同时处理多个 <code>onStartCommand()</code> 请求，则您不应在处理完一个启动请求之后停止服务，因为您可能已经收到了新的启动请求（在第一个请求结束时停止服务会终止第二个请求）。为了避免这一问题，您可以使用 <code>stopSelf(int)</code> 确保服务停止请求始终基于最近的启动请求。也就说，在调用<code>stopSelf(int)</code> 时，传递与停止请求的 ID 对应的启动请求的 ID（传递给 <code>onStartCommand()</code> 的 <code>startId</code>）。然后，如果在您能够调用 <code>stopSelf(int)</code> 之前服务收到了新的启动请求，ID 就不匹配，服务也就不会停止。</p><p><strong>注意：</strong>为了避免浪费系统资源和消耗电池电量，应用必须在工作完成之后停止其服务。 如有必要，其他组件可以通过调用 <code>stopService()</code> 来停止服务。即使为服务启用了绑定，一旦服务收到对<code>onStartCommand()</code> 的调用，您始终仍须亲自停止服务。</p><p>如需了解有关服务生命周期的详细信息，请参阅下面有关<a href="https://developer.android.com/guide/components/services?hl=zh-cn#Lifecycle" target="_blank" rel="noopener">管理服务生命周期</a>的部分。</p><h2 id="创建绑定服务"><a href="#创建绑定服务" class="headerlink" title="创建绑定服务"></a>创建绑定服务</h2><p>绑定服务允许应用组件通过调用 <code>bindService()</code> 与其绑定，以便创建长期连接（通常不允许组件通过调用 <code>startService()</code> 来<em>启动</em>它）。</p><p>如需与 Activity 和其他应用组件中的服务进行交互，或者需要通过进程间通信 (IPC) 向其他应用公开某些应用功能，则应创建绑定服务。</p><p>要创建绑定服务，必须实现 <code>onBind()</code> 回调方法以返回 <code>IBinder</code>，用于定义与服务通信的接口。然后，其他应用组件可以调用 <code>bindService()</code> 来检索该接口，并开始对服务调用方法。服务只用于与其绑定的应用组件，因此如果没有组件绑定到服务，则系统会销毁服务（您<em>不必</em>按通过 <code>onStartCommand()</code> 启动的服务那样来停止绑定服务）。</p><p>要创建绑定服务，首先必须定义指定客户端如何与服务通信的接口。 服务与客户端之间的这个接口必须是 <code>IBinder</code> 的实现，并且服务必须从 <code>onBind()</code> 回调方法返回它。一旦客户端收到 <code>IBinder</code>，即可开始通过该接口与服务进行交互。</p><p>多个客户端可以同时绑定到服务。客户端完成与服务的交互后，会调用 <code>unbindService()</code> 取消绑定。一旦没有客户端绑定到该服务，系统就会销毁它。</p><p>有多种方法实现绑定服务，其实现比启动服务更为复杂，因此绑定服务将在有关<a href="https://developer.android.com/guide/components/bound-services.html?hl=zh-cn" target="_blank" rel="noopener">绑定服务</a>的单独文档中专门讨论。</p><h2 id="向用户发送通知"><a href="#向用户发送通知" class="headerlink" title="向用户发送通知"></a>向用户发送通知</h2><p>一旦运行起来，服务即可使用 <a href="https://developer.android.com/guide/topics/ui/notifiers/toasts.html?hl=zh-cn" target="_blank" rel="noopener">Toast 通知</a>或<a href="https://developer.android.com/guide/topics/ui/notifiers/notifications.html?hl=zh-cn" target="_blank" rel="noopener">状态栏通知</a>来通知用户所发生的事件。</p><p>Toast 通知是指出现在当前窗口的表面、片刻随即消失不见的消息，而状态栏通知则在状态栏中随消息一起提供图标，用户可以选择该图标来采取操作（例如启动 Activity）。</p><p>通常，当某些后台工作已经完成（例如文件下载完成）且用户现在可以对其进行操作时，状态栏通知是最佳方法。 当用户从展开视图中选定通知时，通知即可启动 Activity（例如查看已下载的文件）。</p><p>如需了解详细信息，请参阅 <a href="https://developer.android.com/guide/topics/ui/notifiers/toasts.html?hl=zh-cn" target="_blank" rel="noopener">Toast 通知</a>或<a href="https://developer.android.com/guide/topics/ui/notifiers/notifications.html?hl=zh-cn" target="_blank" rel="noopener">状态栏通知</a>开发者指南。</p><h2 id="在前台运行服务"><a href="#在前台运行服务" class="headerlink" title="在前台运行服务"></a>在前台运行服务</h2><p>前台服务被认为是用户主动意识到的一种服务，因此在内存不足时，系统也不会考虑将其终止。 前台服务必须为状态栏提供通知，放在“正在进行”标题下方，这意味着除非服务停止或从前台移除，否则不能清除通知。</p><p>例如，应该将通过服务播放音乐的音乐播放器设置为在前台运行，这是因为用户明确意识到其操作。 状态栏中的通知可能表示正在播放的歌曲，并允许用户启动 Activity 来与音乐播放器进行交互。</p><p>要请求让服务运行于前台，请调用 <code>startForeground()</code>。此方法采用两个参数：唯一标识通知的整型数和状态栏的 <code>Notification</code>。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Notification notification = new Notification(R.drawable.icon, getText(R.string.ticker_text),</span><br><span class="line">        System.currentTimeMillis());</span><br><span class="line">Intent notificationIntent = new Intent(this, ExampleActivity.class);</span><br><span class="line">PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, notificationIntent, 0);</span><br><span class="line">notification.setLatestEventInfo(this, getText(R.string.notification_title),</span><br><span class="line">        getText(R.string.notification_message), pendingIntent);</span><br><span class="line">startForeground(ONGOING_NOTIFICATION_ID, notification);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>提供给 <code>startForeground()</code> 的整型 ID 不得为 0。</p><p>要从前台移除服务，请调用 <code>stopForeground()</code>。此方法采用一个布尔值，指示是否也移除状态栏通知。 此方法<em>不会</em>停止服务。 但是，如果您在服务正在前台运行时将其停止，则通知也会被移除。</p><p>如需了解有关通知的详细信息，请参阅<a href="https://developer.android.com/guide/topics/ui/notifiers/notifications.html?hl=zh-cn" target="_blank" rel="noopener">创建状态栏通知</a>。</p><h2 id="管理服务生命周期"><a href="#管理服务生命周期" class="headerlink" title="管理服务生命周期"></a>管理服务生命周期</h2><p>服务的生命周期比 Activity 的生命周期要简单得多。但是，密切关注如何创建和销毁服务反而更加重要，因为服务可以在用户没有意识到的情况下运行于后台。</p><p>服务生命周期（从创建到销毁）可以遵循两条不同的路径：</p><ul><li><p>启动服务</p><p>该服务在其他组件调用 <code>startService()</code> 时创建，然后无限期运行，且必须通过调用<code>stopSelf()</code> 来自行停止运行。此外，其他组件也可以通过调用 <code>stopService()</code> 来停止服务。服务停止后，系统会将其销毁。</p></li><li><p>绑定服务</p><p>该服务在另一个组件（客户端）调用 <code>bindService()</code> 时创建。然后，客户端通过 <code>IBinder</code> 接口与服务进行通信。客户端可以通过调用 <code>unbindService()</code> 关闭连接。多个客户端可以绑定到相同服务，而且当所有绑定全部取消后，系统即会销毁该服务。 （服务<em>不必</em>自行停止运行。）</p></li></ul><p>这两条路径并非完全独立。也就是说，您可以绑定到已经使用 <code>startService()</code> 启动的服务。例如，可以通过使用 <code>Intent</code>（标识要播放的音乐）调用 <code>startService()</code> 来启动后台音乐服务。随后，可能在用户需要稍加控制播放器或获取有关当前播放歌曲的信息时，Activity 可以通过调用 <code>bindService()</code> 绑定到服务。在这种情况下，除非所有客户端均取消绑定，否则 <code>stopService()</code> 或 <code>stopSelf()</code> 不会实际停止服务。</p><h3 id="实现生命周期回调"><a href="#实现生命周期回调" class="headerlink" title="实现生命周期回调"></a>实现生命周期回调</h3><p>与 Activity 类似，服务也拥有生命周期回调方法，您可以实现这些方法来监控服务状态的变化并适时执行工作。 以下框架服务展示了每种生命周期方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class ExampleService extends Service &#123;</span><br><span class="line">    int mStartMode;       // indicates how to behave if the service is killed</span><br><span class="line">    IBinder mBinder;      // interface for clients that bind</span><br><span class="line">    boolean mAllowRebind; // indicates whether onRebind should be used</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        // The service is being created</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">        // The service is starting, due to a call to startService()</span><br><span class="line">        return mStartMode;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        // A client is binding to the service with bindService()</span><br><span class="line">        return mBinder;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onUnbind(Intent intent) &#123;</span><br><span class="line">        // All clients have unbound with unbindService()</span><br><span class="line">        return mAllowRebind;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void onRebind(Intent intent) &#123;</span><br><span class="line">        // A client is binding to the service with bindService(),</span><br><span class="line">        // after onUnbind() has already been called</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void onDestroy() &#123;</span><br><span class="line">        // The service is no longer used and is being destroyed</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong>与 Activity 生命周期回调方法不同，您<em>不</em>需要调用这些回调方法的超类实现。</p><p><strong>图 2.</strong> 服务生命周期。左图显示了使用 <code>startService()</code> 所创建的服务的生命周期，右图显示了使用 <code>bindService()</code>所创建的服务的生命周期。</p><p>通过实现这些方法，您可以监控服务生命周期的两个嵌套循环：</p><ul><li><p>服务的</p><p>整个生命周期</p><p>从调用</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onCreate()</span><br></pre></td></tr></table></figure><p>  开始起，到</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onDestroy()</span><br></pre></td></tr></table></figure><p>  返回时结束。与 Activity 类似，服务也在</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onCreate()</span><br></pre></td></tr></table></figure><p>  中完成初始设置，并在</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onDestroy()</span><br></pre></td></tr></table></figure><p>  中释放所有剩余资源。例如，音乐播放服务可以在</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onCreate()</span><br></pre></td></tr></table></figure><p>  中创建用于播放音乐的线程，然后在</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onDestroy()</span><br></pre></td></tr></table></figure><p>  中停止该线程。</p><p>  无论服务是通过 <code>startService()</code> 还是 <code>bindService()</code> 创建，都会为所有服务调用 <code>onCreate()</code> 和 <code>onDestroy()</code> 方法。</p><ul><li><p>服务的</p><p>有效生命周期</p><p>从调用</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onStartCommand()</span><br></pre></td></tr></table></figure><p>  或</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onBind()</span><br></pre></td></tr></table></figure><p>  方法开始。每种方法均有</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Intent</span><br></pre></td></tr></table></figure><p>  对象，该对象分别传递到</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startService()</span><br></pre></td></tr></table></figure><p>  或</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindService()</span><br></pre></td></tr></table></figure><p>  。</p><p>  对于启动服务，有效生命周期与整个生命周期同时结束（即便是在 <code>onStartCommand()</code> 返回之后，服务仍然处于活动状态）。对于绑定服务，有效生命周期在 <code>onUnbind()</code> 返回时结束。</p><p><strong>注：</strong>尽管启动服务是通过调用 <code>stopSelf()</code> 或 <code>stopService()</code> 来停止，但是该服务并无相应的回调（没有 <code>onStop()</code> 回调）。因此，除非服务绑定到客户端，否则在服务停止时，系统会将其销毁 — <code>onDestroy()</code>是接收到的唯一回调。</p><p>图 2 说明了服务的典型回调方法。尽管该图分开介绍通过 <code>startService()</code> 创建的服务和通过<code>bindService()</code> 创建的服务，但是请记住，不管启动方式如何，任何服务均有可能允许客户端与其绑定。因此，最初使用 <code>onStartCommand()</code>（通过客户端调用 <code>startService()</code>）启动的服务仍可接收对<code>onBind()</code> 的调用（当客户端调用 <code>bindService()</code> 时）。</p><p>如需了解有关创建提供绑定的服务的详细信息，请参阅<a href="https://developer.android.com/guide/components/bound-services.html?hl=zh-cn" target="_blank" rel="noopener">绑定服务</a>文档，该文档的<a href="https://developer.android.com/guide/components/bound-services.html?hl=zh-cn#Lifecycle" target="_blank" rel="noopener">管理绑定服务的生命周期</a>部分提供了有关 <code>onRebind()</code> 回调方法的更多信息。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2019/02/11/Android%20Broadcasts/"/>
      <url>/2019/02/11/Android%20Broadcasts/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2019/02/11/Android%20Service/"/>
      <url>/2019/02/11/Android%20Service/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-Service"><a href="#Android-Service" class="headerlink" title="Android Service"></a>Android Service</h1><h4 id="一、Service"><a href="#一、Service" class="headerlink" title="一、Service"></a>一、Service</h4><p><code>Service</code> 是一个可以在后台执行长时间运行操作而不提供用户界面的应用组件。</p><p><code>Service</code>有2种启动方式：</p><p><strong><code>startService</code></strong></p><p>当应用组件（如 Activity）通过调用 <code>startService()</code> 启动服务时，服务即处于“启动”状态。一旦启动，服务即可在后台无限期运行，即使启动服务的组件已被销毁也不受影响。 已启动的服务通常是执行单一操作，而且不会将结果返回给调用方。例如，它可能通过网络下载或上传文件。 操作完成后，服务会自行停止运行。</p><p><strong><code>bindSevice</code></strong></p><p>当应用组件通过调用 <code>bindService()</code> 绑定到服务时，服务即处于“绑定”状态。绑定服务提供了一个客户端-服务器接口，允许组件与服务进行交互、发送请求、获取结果，甚至是利用进程间通信 (IPC) 跨进程执行这些操作。 仅当与另一个应用组件绑定时，绑定服务才会运行。 多个组件可以同时绑定到该服务，但全部取消绑定后，该服务即会被销毁。</p><p><code>onStartCommand()</code> 方法必须返回整型数。整型数是一个值，用于描述系统应该如何在服务终止的情况下继续运行服务（如上所述，<code>IntentService</code> 的默认实现将为您处理这种情况，不过您可以对其进行修改）。从 <code>onStartCommand()</code> 返回的值必须是以下常量之一：</p><ul><li><p><code>START_NOT_STICKY</code></p><p>如果系统在 <code>onStartCommand()</code> 返回后终止服务，则除非有挂起 Intent 要传递，否则系统<em>不会</em>重建服务。这是最安全的选项，可以避免在不必要时以及应用能够轻松重启所有未完成的作业时运行服务。</p></li><li><p><code>START_STICKY</code></p><p>如果系统在 <code>onStartCommand()</code> 返回后终止服务，则会重建服务并调用 <code>onStartCommand()</code>，但<em>不会</em>重新传递最后一个 Intent。相反，除非有挂起 Intent 要启动服务（在这种情况下，将传递这些 Intent ），否则系统会通过空 Intent 调用 <code>onStartCommand()</code>。这适用于不执行命令、但无限期运行并等待作业的媒体播放器（或类似服务）。</p></li><li><p><code>START_REDELIVER_INTENT</code></p><p>如果系统在 <code>onStartCommand()</code> 返回后终止服务，则会重建服务，并通过传递给服务的最后一个 Intent 调用 <code>onStartCommand()</code>。任何挂起 Intent 均依次传递。这适用于主动执行应该立即恢复的作业（例如下载文件）的服务。</p></li></ul><h4 id="二、Server的生命周期"><a href="#二、Server的生命周期" class="headerlink" title="二、Server的生命周期"></a>二、Server的生命周期</h4><p><img src="/Users/tanjz/SoftDevelop/Hexo/source/_posts/images/service_lifecycle.png" alt=""></p><p><img src="/Users/tanjz/SoftDevelop/Hexo/source/_posts/images/service_binding_tree_lifecycle.png" alt=""></p><p><strong>注</strong>：官网更详细（<a href="https://developer.android.com/reference/android/app/IntentService.html" target="_blank" rel="noopener">IntentServie</a>,<a href="https://developer.android.com/training/run-background-service/report-status" target="_blank" rel="noopener">JobIntentService</a>,<a href="https://developer.android.com/guide/components/bound-services" target="_blank" rel="noopener">binderService</a>,），这里只做抛砖引玉的作用。</p><p>参考：</p><p>[1]、<a href="https://developer.android.com/guide/components/services?hl=zh-cn" target="_blank" rel="noopener">android services</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>在Blog中添加背景图和动效</title>
      <link href="/2018/10/26/%E5%9C%A8Blog%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E5%9B%BE%E5%92%8C%E5%8A%A8%E6%95%88/"/>
      <url>/2018/10/26/%E5%9C%A8Blog%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E5%9B%BE%E5%92%8C%E5%8A%A8%E6%95%88/</url>
      
        <content type="html"><![CDATA[<p>记录一次在Blog中添加动态效果。</p><p>参考网址：<a href="https://www.wushile.top/article/201810212028.html" target="_blank" rel="noopener">网站动态背景（动态图）和静态背景（背景图片）的主题美化</a><br><a id="more"></a></p><h2 id="添加蜘蛛网动效"><a href="#添加蜘蛛网动效" class="headerlink" title="添加蜘蛛网动效"></a>添加蜘蛛网动效</h2><p>需要在html页面的<code>&lt;body&gt;&lt;/body&gt;</code>标签中添加下面的js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    ! <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">w, v, i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> w.getAttribute(v) || i</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">j</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">document</span>.getElementsByTagName(i)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> i = j(<span class="string">"script"</span>),</span><br><span class="line">                w = i.length,</span><br><span class="line">                v = i[w - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                l: w,</span><br><span class="line">                z: o(v, <span class="string">"zIndex"</span>, <span class="number">-1</span>), <span class="comment">//设置动态图显示的层位，一般-1就行，不用改</span></span><br><span class="line">                o: o(v, <span class="string">"opacity"</span>, <span class="number">0.5</span>), <span class="comment">//0.5显示的是线条的透明度，可以自行调整</span></span><br><span class="line">                c: o(v, <span class="string">"color"</span>, <span class="string">"0,0,0"</span>), <span class="comment">//设置线条的颜色，三个0,0,0分别代表RGB颜色数值，不知道的可以打开PS里的拾色器就可以看到RGB数值了</span></span><br><span class="line">                n: o(v, <span class="string">"count"</span>, <span class="number">120</span>), <span class="comment">//设置线条显示的数量，有密集恐惧症的朋友可别把数值设置太大哦</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">k</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            r = u.width = <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth, n = u.height = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            e.clearRect(<span class="number">0</span>, <span class="number">0</span>, r, n);</span><br><span class="line">            <span class="keyword">var</span> w = [f].concat(t);</span><br><span class="line">            <span class="keyword">var</span> x, v, A, B, z, y;</span><br><span class="line">            t.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">                i.x += i.xa, i.y += i.ya, i.xa *= i.x &gt; r || i.x &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>, i.ya *= i.y &gt; n || i.y &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>, e.fillRect(i.x - <span class="number">0.5</span>, i.y - <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">for</span> (v = <span class="number">0</span>; v &lt; w.length; v++) &#123;</span><br><span class="line">                    x = w[v];</span><br><span class="line">                    <span class="keyword">if</span> (i !== x &amp;&amp; <span class="literal">null</span> !== x.x &amp;&amp; <span class="literal">null</span> !== x.y) &#123;</span><br><span class="line">                        B = i.x - x.x, z = i.y - x.y, y = B * B + z * z;</span><br><span class="line">                        y &lt; x.max &amp;&amp; (x === f &amp;&amp; y &gt;= x.max / <span class="number">2</span> &amp;&amp; (i.x -= <span class="number">0.03</span> * B, i.y -= <span class="number">0.03</span> * z), A = (x.max - y) / x.max, e.beginPath(), e.lineWidth = A / <span class="number">2</span>, e.strokeStyle = <span class="string">"rgba("</span> + s.c + <span class="string">","</span> + (A + <span class="number">0.2</span>) + <span class="string">")"</span>, e.moveTo(i.x, i.y), e.lineTo(x.x, x.y), e.stroke())</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                w.splice(w.indexOf(i), <span class="number">1</span>)</span><br><span class="line">            &#125;), m(b)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> u = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>),</span><br><span class="line">            s = l(),</span><br><span class="line">            c = <span class="string">"c_n"</span> + s.l,</span><br><span class="line">            e = u.getContext(<span class="string">"2d"</span>),</span><br><span class="line">            r, n, m = <span class="built_in">window</span>.requestAnimationFrame || <span class="built_in">window</span>.webkitRequestAnimationFrame || <span class="built_in">window</span>.mozRequestAnimationFrame || <span class="built_in">window</span>.oRequestAnimationFrame || <span class="built_in">window</span>.msRequestAnimationFrame || <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">window</span>.setTimeout(i, <span class="number">1000</span> / <span class="number">45</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            a = <span class="built_in">Math</span>.random,</span><br><span class="line">            f = &#123;</span><br><span class="line">                x: <span class="literal">null</span>,</span><br><span class="line">                y: <span class="literal">null</span>,</span><br><span class="line">                max: <span class="number">20000</span></span><br><span class="line">            &#125;;</span><br><span class="line">        u.id = c;</span><br><span class="line">        u.style.cssText = <span class="string">"position:fixed;top:0;left:0;z-index:"</span> + s.z + <span class="string">";opacity:"</span> + s.o;</span><br><span class="line">        j(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(u);</span><br><span class="line">        k(), <span class="built_in">window</span>.onresize = k;</span><br><span class="line">        <span class="built_in">window</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">            i = i || <span class="built_in">window</span>.event, f.x = i.clientX, f.y = i.clientY</span><br><span class="line">        &#125;, <span class="built_in">window</span>.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            f.x = <span class="literal">null</span>, f.y = <span class="literal">null</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = [], p = <span class="number">0</span>; s.n &gt; p; p++) &#123;</span><br><span class="line">            <span class="keyword">var</span> h = a() * r,</span><br><span class="line">                g = a() * n,</span><br><span class="line">                q = <span class="number">2</span> * a() - <span class="number">1</span>,</span><br><span class="line">                d = <span class="number">2</span> * a() - <span class="number">1</span>;</span><br><span class="line">            t.push(&#123;</span><br><span class="line">                x: h,</span><br><span class="line">                y: g,</span><br><span class="line">                xa: q,</span><br><span class="line">                ya: d,</span><br><span class="line">                max: <span class="number">6000</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            b()</span><br><span class="line">        &#125;, <span class="number">100</span>)</span><br><span class="line">    &#125;();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加背景图"><a href="#添加背景图" class="headerlink" title="添加背景图"></a>添加背景图</h2><p>我的blog的样式有点差异，这记录一下。</p><p>在css样式文件中添加一下css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>:auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(背景图路径) no-repeat fixed;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong>背景图片最好是：1920x1080</p><p>背景图片素材网：<a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank" rel="noopener">Toptal</a></p><p>好了，通过以上2步操作就可以实现看的蜘蛛网效果</p><p>本blog使用<code>hexo</code> +<code>material-x</code> 搭建，<br><code>body 标签</code>文件在 <code>&lt;hexo blog path&gt;\themes\material-x\layout\layout.ejs</code><br><code>body CSS</code>文件在 <code>&lt;hexo blog path&gt;\themes\material-x\source\less\_base.less</code>中添加</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>私有Dart Package Sever</title>
      <link href="/2018/10/12/Dart%20Package%20Server/"/>
      <url>/2018/10/12/Dart%20Package%20Server/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建私有-Dart-Package-Server"><a href="#搭建私有-Dart-Package-Server" class="headerlink" title="搭建私有 Dart Package Server"></a>搭建私有 Dart Package Server</h2><h3 id="1、搭建Dart-Package-Server"><a href="#1、搭建Dart-Package-Server" class="headerlink" title="1、搭建Dart Package Server"></a>1、搭建Dart Package Server</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Activity</title>
      <link href="/2018/06/18/Android%20Activity/"/>
      <url>/2018/06/18/Android%20Activity/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-Activity"><a href="#Android-Activity" class="headerlink" title="Android Activity"></a>Android Activity</h1><h4 id="一、Activity-的生命周期"><a href="#一、Activity-的生命周期" class="headerlink" title="一、Activity 的生命周期"></a>一、Activity 的生命周期</h4><p><img src="/images/activity_lifecycle.png" alt=""></p><p>（1）如果打开新的Activity并且新的Activity使用透明主题，那么当前Activity不会调用onStop。</p><p>（2）打开新的Activity时，当前Activity及新Activity生命周期顺序如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MainActivity----onPause</span><br><span class="line"></span><br><span class="line">SecondActivity----onCreate</span><br><span class="line"></span><br><span class="line">SecondActivity----onStart</span><br><span class="line"></span><br><span class="line">SecondActivity----onResume</span><br><span class="line"></span><br><span class="line">MainActivity----onStop</span><br></pre></td></tr></table></figure><p>2.异常生命周期</p><p><strong>原因：</strong></p><p>（1）资源相关的系统配置发生改变导致的Activity被杀死并重新创建。<br>如：旋转屏幕，键盘改变等..…</p><p>（2) 资源内存不足导致低优先级的Activity被杀死。</p><p> <strong>Activty优先级顺序</strong></p><p> 1、前台Activty,正在和用户交互的Activity，优先级最高。</p><p> 2、可见但非前台Activity，如在Activity中弹出对话框。</p><p> 3、后台Activity，如执行了<strong>onStop()</strong>，优先级最低。</p><p>​    </p><p><strong>解决</strong></p><p> （1）在<strong>onSaveInstanceState()</strong>,<strong>onRestoreInstanceState()</strong>保存恢复数据<br> （2）在android 工程目录下<strong>AndroidManifest</strong>中配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:configChanges=&quot;screenSize|orientation&quot;</span><br></pre></td></tr></table></figure><p> configChanges：如下</p><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:left">mcc</td><td style="text-align:center">IMSI(国际移动用户识别码)发生改变，检测到SIM卡，或者更新MCC</td></tr><tr><td style="text-align:left">mnc</td><td style="text-align:center">IMSI网络发生改变,检测到SIM卡，或者更新MCC</td></tr><tr><td style="text-align:left">locale</td><td style="text-align:center">语言发生改变，用户选择了一个新的语言，文字应该重新显示</td></tr><tr><td style="text-align:left">touchscreen</td><td style="text-align:center">触摸屏发生改变，这通常是不应该发生的</td></tr><tr><td style="text-align:left">keyboard</td><td style="text-align:center">键盘类型发生改变，例如，用户使用了外部键盘</td></tr><tr><td style="text-align:left">keyboardHidden</td><td style="text-align:center">键盘发生改变，例如，用户使用了硬件键盘</td></tr><tr><td style="text-align:left">navigation</td><td style="text-align:center">导航发生改变</td></tr><tr><td style="text-align:left">screenLayout</td><td style="text-align:center">屏幕的布局发生改变，这可能导致激活不同的显示</td></tr><tr><td style="text-align:left">fontScale</td><td style="text-align:center">全局字体大小缩放发生改变</td></tr><tr><td style="text-align:left">orientation</td><td style="text-align:center">设备旋转，横向显示和竖向显示模式切换</td></tr><tr><td style="text-align:left">screenSize</td><td style="text-align:center">屏幕大小改变了</td></tr><tr><td style="text-align:left">smallestScreenSize</td><td style="text-align:center">屏幕的物理大小改变了，如：连接到一个外部的屏幕上</td></tr></tbody></table><h4 id="二、Acitvity-LaunchMode-启动模式"><a href="#二、Acitvity-LaunchMode-启动模式" class="headerlink" title="二、Acitvity LaunchMode( 启动模式)"></a>二、Acitvity LaunchMode( 启动模式)</h4><p><strong>四大启动模式</strong></p><p>1，standard 标准模式</p><p>   每启动一个Activity都会重新创建一个新的Activity实例。当一个Activity启动这种模式下新的Activity，新的Activity就会进入启动它Activity的任务栈中。</p><p>2，singleTop 栈定复用模式</p><p>这种模式下，如果新的Activity的实例已经位于任务栈的栈顶，那么新的Activity就不会重新创建，此时它的<strong>onNewIntent()</strong>被调用。如果新的Activity的实例不位于栈顶，那么就会重新创建。</p><p>3，singleTask 栈内复用模式</p><p>这是一种单一任务栈。，系统会创建一个新的任务，并将启动的Activity放入这个新任务的栈底位置。但是，如果现有任务当中已经存在一个该Activity的实例了，那么系统就不会再创建一次它的实例，而是复用这个已经存在的activity，调用 onNewIntent() 方法，并且清空这个activity任务栈上面所有的activity</p><p>4，singleInstance 单实例模式</p><p>单实例模式。这种模式下的Activity只单独的位于独立的任务栈中。整个手机操作系统里面只有一个实例存在。不同的应用去打开这个activity共享 公用的同一个activity。他会运行在自己单独，独立的任务栈里面，并且任务栈里面只有他一个实例存在</p><p><strong>Activity的Flage</strong></p><p>1.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">新启动Activity就会被放置到一个新的任务当中(与“singleTask”有点类似）。</span><br><span class="line"></span><br><span class="line">2.```FLAGE_ACTIVITY_SINGLE_TOP</span><br></pre></td></tr></table></figure></p><p> 作用于<strong>singleTop</strong>启动模式效果一样</p><p> 3.<code>FLAGE_ACTIVITY_CLEAR_TOP</code></p><p> 如果要启动的Activity在当前任务中已经存在了，就不会再次创建这个Activity的实例，而是会把这个Activity之上的所有Activity全部关闭掉</p><p> <strong>处理affinity</strong><br> affinity可以用于指定一个Activity更加愿意依附于哪一个任务，在默认情况下，同一个应用程序中的所有Activity都具有相同的affinity，所以，这些Activity都更加倾向于运行在相同的任务当中。当然了，你也可以去改变每个Activity的affinity值，通过<activity>元素的taskAffinity属性就可以实现了</activity></p><p> <strong>清空返回栈</strong></p><p><strong>alwaysRetainTaskState</strong><br>如果将最底层的那个Activity的这个属性设置为true，那么上面所描述的默认行为就将不会发生，任务中所有的Activity即使过了很长一段时间之后仍然会被继续保留。</p><p><strong>clearTaskOnLaunch</strong><br>如果将最底层的那个Activity的这个属性设置为true，那么只要用户离开了当前任务，再次返回的时候就会将最底层Activity之上的所有其它Activity全部清除掉。简单来讲，就是一种和alwaysRetainTaskState完全相反的工作模式，它保证每次返回任务的时候都会是一种初始化状态，即使用户仅仅离开了很短的一段时间。</p><p><strong>finishOnTaskLaunch</strong><br>这个属性和clearTaskOnLaunch是比较类似的，不过它不是作用于整个任务上的，而是作用于单个Activity上。如果某个Activity将这个属性设置成true，那么用户一旦离开了当前任务，再次返回时这个Activity就会被清除掉。</p><h4 id="三、Activity启动方式"><a href="#三、Activity启动方式" class="headerlink" title="三、Activity启动方式"></a>三、Activity启动方式</h4><p>1，显示启动</p><p> 显示启动需要明确的指定被启动对象的组件信息，包括包名和类名</p><p>2，隐式启动</p><p> 隐式启动的<strong>Intent</strong>能够匹配目标组件的一组<strong>IntentFilter</strong>中的信息（即匹配一组<strong>IntentFilter的 Action,Category,Data</strong>）。<br> 在<strong>AndroidManifest.xml</strong>中一个activity 可以有多个<strong>IntentFilter</strong> 在<strong>IntentFilter</strong>中也可以有多组<strong>Action,Category,Data</strong><br> IntentFilter中匹配规则</p><p><strong>IntentFilter</strong>有“<strong>Action,Category,Data</strong>”的三种匹配方式</p><p>参考：</p><p>[1]、<a href="https://developer.android.com/guide/components/activities/activity-lifecycle" target="_blank" rel="noopener">Activity Lifecycle</a></p><p>[2]、<a href="https://developer.android.com/guide/components/activities/tasks-and-back-stack" target="_blank" rel="noopener">Android Tasks and Back Stack</a></p><p>[3]、<a href="https://developer.android.com/guide/components/activities/intro-activities?hl=zh-cn" target="_blank" rel="noopener">Android Activities</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker命令笔记</title>
      <link href="/2018/06/05/Docker%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/06/05/Docker%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Docker-安装"><a href="#一、Docker-安装" class="headerlink" title="一、Docker 安装"></a>一、Docker 安装</h2><p>本示例采用sh脚本安装,其他方式参考<a href="https://docs.docker.com/install/linux/docker-ce/centos/#uninstall-docker-ce" target="_blank" rel="noopener">Docker CE</a>官网。<br><a id="more"></a></p><ul><li><p>0、root用户登陆</p></li><li><p>1、升级yum包：</p><blockquote><p>$ sudo yum update</p></blockquote></li><li><p>2、（可选）卸载旧的Docker</p><blockquote><p>$ sudo yum erase docker docker-common docker-client docker-compose</p></blockquote></li><li><p>4、执行 Docker 安装脚本</p><blockquote><p>$ curl -fsSL <a href="https://get.docker.com/" target="_blank" rel="noopener">https://get.docker.com/</a> | sh<br>或<br>$ wget -qO- <a href="https://get.docker.com/" target="_blank" rel="noopener">https://get.docker.com/</a> | sh</p></blockquote></li><li><p>5、测试Docker</p><blockquote><p>$ docker info</p></blockquote></li><li><p>6、设置Docker开机启动</p><blockquote><p>$ sudo systemctl enable docker.service</p></blockquote></li><li><p>7、开启Docker服务</p><blockquote><p>$ sudo systemctl start docker</p></blockquote></li></ul><h2 id="二、Docker-Compose-安装"><a href="#二、Docker-Compose-安装" class="headerlink" title="二、Docker Compose 安装"></a>二、Docker Compose 安装</h2><ul><li><p>1、下载安装脚本</p><blockquote><p>$ curl -L <a href="https://github.com/docker/compose/releases/download/1.21.1/docker-compose-`uname" target="_blank" rel="noopener">https://github.com/docker/compose/releases/download/1.21.1/docker-compose-`uname</a> -s<code>-</code>uname -m` -o /usr/local/bin/docker-compose</p></blockquote></li><li><p>2、添加执行权限</p><blockquote><p>$ chmod +x /usr/local/bin/docker-compose</p></blockquote></li></ul><h2 id="三、Docker-常用命令"><a href="#三、Docker-常用命令" class="headerlink" title="三、Docker 常用命令"></a>三、Docker 常用命令</h2><ul><li><p>Docker 启动</p><blockquote><p>$ sudo systemctl start docker</p></blockquote></li><li><p>docker 开机启动</p><blockquote><p>$ sudo systemctl enable docker.service</p></blockquote></li><li><p>docker 当前容器开机启动</p><blockquote><p>$ docker run -d –restart=always </p></blockquote></li><li><p>容器终端</p><blockquote><p>$ docker exec -it &lt;容器id&gt; /bin/bash</p></blockquote></li><li><p>挂载目录</p><blockquote><p>$ docker run -d -v &lt;主机目录路径&gt;:&lt;容器目录路径 &gt;</p></blockquote></li><li><p>示例：</p><blockquote><p>$ docker run -d –restart=always -v /root/notebooks:/notebooks -it -p 8888:8888 tensorflow/tensorflow:latest-py3</p></blockquote></li><li><p>拉取镜像</p><blockquote><p>$ docker pull &lt;镜像tag&gt;</p></blockquote></li><li><p>查看运行中的容器</p><blockquote><p>$ docker ps</p></blockquote></li><li><p>查看所有容器</p><blockquote><p>$ docker ps -a</p></blockquote></li><li><p>关闭容器</p><blockquote><p>$ docker stop &lt;容器id&gt;</p></blockquote></li><li><p>强制删除容器</p><blockquote><p>$ docker rm -f &lt;容器id&gt;</p></blockquote></li><li><p>查看镜像文件</p><blockquote><p>$ docker images</p></blockquote></li><li><p>删除镜像文件</p><blockquote><p>docker rmi &lt;镜像id&gt;</p></blockquote></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li>[1]、<a href="https://docs.docker.com/install/linux/docker-ce/centos/#uninstall-docker-ce" target="_blank" rel="noopener">Docker CE</a></li><li>[2]、<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">Docker Compose</a></li><li>[3]、<a href="https://www.jianshu.com/p/adaa34795e64" target="_blank" rel="noopener">Docker 常用命令与操作</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Frp内网穿透笔记</title>
      <link href="/2018/05/24/Frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/05/24/Frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/fatedier/frp/issues/176" target="_blank" rel="noopener">https://github.com/fatedier/frp/issues/176</a><br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux笔记之ssh</title>
      <link href="/2018/05/22/linux%E7%AC%94%E8%AE%B0%E4%B9%8Bssh/"/>
      <url>/2018/05/22/linux%E7%AC%94%E8%AE%B0%E4%B9%8Bssh/</url>
      
        <content type="html"><![CDATA[<h2 id="1、ssh自动脚本登陆"><a href="#1、ssh自动脚本登陆" class="headerlink" title="1、ssh自动脚本登陆"></a>1、ssh自动脚本登陆</h2><ul><li><p>1.1、创建shell脚本，如脚本 login.sh内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/expect                   </span></span><br><span class="line"></span><br><span class="line">set timeout 3                     </span><br><span class="line">spawn ssh user@192.168.3.24       </span><br><span class="line">expect "*password*"                 </span><br><span class="line">send "youPassword\r"   </span><br><span class="line">interact</span><br></pre></td></tr></table></figure><a id="more"></a></li><li>1.2、为自动登陆脚本添加执行权限，如：<blockquote><p>$ sudo chmod +x ./login.sh</p></blockquote></li><li><p>1.3、（可选）为脚本添加别名<br>打开用户目录下的.bash_profile文件</p><blockquote><p>$ vim ~/.bash_profile</p></blockquote><p>添加 <strong>别名（如：SSLogin）</strong>和 <strong>脚本路径（如：/Users/youAccount/home/login.sh）</strong>保存并退出， 如：</p><blockquote><p>$ alias SSLogin=’/Users/youAccount/home/login.sh’</p></blockquote><p>刷新环境变量</p><blockquote><p>$ source ~/.bash_profile</p></blockquote><p>在终端中直接使用别名 <strong>SSLogin</strong>去登陆了,如</p><blockquote><p>$ SSLogin</p></blockquote></li></ul><h2 id="2、ssh免密码登陆"><a href="#2、ssh免密码登陆" class="headerlink" title="2、ssh免密码登陆"></a>2、ssh免密码登陆</h2><p>   参考博文：<a href="https://www.jianshu.com/p/03effb53705c" target="_blank" rel="noopener">SSH免密码登陆和免ip连接</a></p><p>参考网址：<br>   [1]、<a href="http://xstarcd.github.io/wiki/shell/expect_handbook.html" target="_blank" rel="noopener">expect教程中文版</a><br>   [2]、<a href="https://www.cnblogs.com/zhenbianshu/p/5867440.html" target="_blank" rel="noopener">shell实现SSH自动登陆</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用ngrok实现内网穿透</title>
      <link href="/2018/05/22/%E4%BD%BF%E7%94%A8ngrok%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2018/05/22/%E4%BD%BF%E7%94%A8ngrok%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>树莓派笔记之自动挂载nfts移动硬盘</title>
      <link href="/2018/05/21/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BDnfts%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98/"/>
      <url>/2018/05/21/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BDnfts%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h2 id="0、插入ntfs的存储设备如：移动硬盘"><a href="#0、插入ntfs的存储设备如：移动硬盘" class="headerlink" title="0、插入ntfs的存储设备如：移动硬盘"></a>0、插入ntfs的存储设备如：移动硬盘</h2><h2 id="1、安装ntfs-3g"><a href="#1、安装ntfs-3g" class="headerlink" title="1、安装ntfs-3g"></a>1、安装<a href="https://en.wikipedia.org/wiki/NTFS-3G" target="_blank" rel="noopener">ntfs-3g</a></h2><blockquote><p>$ sudo apt-get install ntfs-3g</p></blockquote><h2 id="2、查询外接存储目录权限和UUID"><a href="#2、查询外接存储目录权限和UUID" class="headerlink" title="2、查询外接存储目录权限和UUID"></a>2、查询外接存储目录权限和UUID</h2><blockquote><p>$ ls -l /dev/disk/by-uuid/</p></blockquote><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrwxrwxrwx 1 root root 10 Jan 1 1970 0AC4D607C4D5F543 - &gt; ../../sda1</span><br></pre></td></tr></table></figure></p><p>记下UUID - &gt; 0AC4D607C4D5F543的值<br><a id="more"></a></p><h2 id="3、创建挂载点并赋权"><a href="#3、创建挂载点并赋权" class="headerlink" title="3、创建挂载点并赋权"></a>3、创建挂载点并赋权</h2><blockquote><p>$ sudo mkdir /mnt/usbdrive</p></blockquote><blockquote><p>$ sudo chmod 770 /mnt/usbdrive</p></blockquote><h2 id="4、使用id命令获取uid，pi用户和组的gid（通常为1000）"><a href="#4、使用id命令获取uid，pi用户和组的gid（通常为1000）" class="headerlink" title="4、使用id命令获取uid，pi用户和组的gid（通常为1000）"></a>4、使用id命令获取uid，pi用户和组的gid（通常为1000）</h2><blockquote><p>$ id -u pi</p></blockquote><blockquote><p>$ id -g pi</p></blockquote><h2 id="5、挂载，然后检查-mnt-usbdrive是否可以访问它"><a href="#5、挂载，然后检查-mnt-usbdrive是否可以访问它" class="headerlink" title="5、挂载，然后检查/mnt/usbdrive是否可以访问它"></a>5、挂载，然后检查<strong>/mnt/usbdrive</strong>是否可以访问它</h2><blockquote><p>$ sudo mount -t ntfs-3g -o uid=1000，gid=1000，umask=007 /dev/sda1/mnt/usbdrive</p></blockquote><h2 id="6、备份驱动目录并插入新的挂载点"><a href="#6、备份驱动目录并插入新的挂载点" class="headerlink" title="6、备份驱动目录并插入新的挂载点"></a>6、备份驱动目录并插入新的挂载点</h2><p>备份：</p><blockquote><p>$ sudo cp /etc/fstab /etc/fstab.backup </p></blockquote><p>打开驱动目录文件并在最后一行写入新的驱动信息</p><blockquote><p>$ sudo nano /etc/fstab</p></blockquote><p>在fstab文件中添加安装信息（用您自己的UUID，uid，gid替换）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=0AC4D607C4D5F543 /mnt/usbdrive ntfs-3g uid=1000，gid=1000，umask=007 0 0</span><br></pre></td></tr></table></figure></p><h2 id="7、重新启动树莓派"><a href="#7、重新启动树莓派" class="headerlink" title="7、重新启动树莓派"></a>7、重新启动树莓派</h2><blockquote><p>sudo reboot</p></blockquote><h2 id="8、作为NextCloud的存储设备"><a href="#8、作为NextCloud的存储设备" class="headerlink" title="8、作为NextCloud的存储设备"></a>8、作为NextCloud的存储设备</h2><p>在/mnt/usbdrive驱动（移动硬盘）上配置NextCloud的数据目录，则它应该对www-data用户拥有770权限。您可以简单地将用户www-data添加到pi组中，因为它已经拥有770的权限，如上面在fstab中设置的那样。</p><blockquote><p>$ sudo usermod -a -G pi www-data</p></blockquote><p>参考网址：<br>  [1]、<a href="http://www.techjawab.com/2013/06/how-to-setup-mount-auto-mount-usb-hard.html" target="_blank" rel="noopener">How to setup mount / auto-mount USB Hard Drive on Raspberry Pi</a><br>  [2]、<a href="http://ja.cques.ca/blog/2013/09/25/ntfs-external-hd-with-owncloud-on-the-raspberry-pi/" target="_blank" rel="noopener">NTFS External HD With ownCloud on the Raspberry Pi</a><br>  [3]、<a href="https://raspberrypi.stackexchange.com/questions/10236/ntfs-3g-hdd-0770-and-0777-permissions-owncloud" target="_blank" rel="noopener">NTFS-3g HDD 0770 and 0777 permissions Owncloud</a><br>  [4]、<a href="https://www.liaronce.win/archives/776" target="_blank" rel="noopener">通过 NextCloudPi 为树莓派可视化搭建 NextCloud 网盘（并折腾无语的 NTFS 移动硬盘）</a><br>  [5]、<a href="http://shumeipai.nxez.com/2013/09/08/raspberry-pi-to-mount-the-removable-hard-disk.html" target="_blank" rel="noopener">给树莓派挂载移动硬盘或U盘</a><br>  [6]、<a href="http://www.freehao123.com/raspberry-pi-nas/" target="_blank" rel="noopener">树莓派Raspberry Pi 打造低成本NAS存储家庭服务器的十个问题整理</a></p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>树莓派笔记之NextCloud安装</title>
      <link href="/2018/05/21/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%AC%94%E8%AE%B0%E4%B9%8BNextCloud%E5%AE%89%E8%A3%85/"/>
      <url>/2018/05/21/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%AC%94%E8%AE%B0%E4%B9%8BNextCloud%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/nextcloud/server" target="_blank" rel="noopener">Nextcloud</a> 是一个免费专业的私有云存储网盘「开源」项目，可以让你简单快速地在个人/公司电脑、服务器甚至是树莓派等设备上架设一套属于自己或团队专属的云同步网盘，从而实现跨平台跨设备文件同步、共享、版本控制、团队协作等功能。</p></blockquote><h2 id="1、NextCloud简单安装的三种方式总结"><a href="#1、NextCloud简单安装的三种方式总结" class="headerlink" title="1、NextCloud简单安装的三种方式总结"></a>1、NextCloud简单安装的三种方式总结</h2><ul><li><p>1.1、使用 docker 安装：<br>文档：<a href="https://github.com/nextcloud/docker" target="_blank" rel="noopener">https://github.com/nextcloud/docker</a></p></li><li><p>1.2、使用 nextcloud-snap 安装<br>文档：<a href="https://github.com/nextcloud/nextcloud-snap" target="_blank" rel="noopener">https://github.com/nextcloud/nextcloud-snap</a></p></li><li><p>1.3 使用VM安装<br>文档：<a href="https://github.com/nextcloud/vm" target="_blank" rel="noopener">https://github.com/nextcloud/vm</a></p><a id="more"></a><p>NextCloud安装官方文档：<a href="https://nextcloud.com/install/#instructions-server" target="_blank" rel="noopener">https://nextcloud.com/install/#instructions-server</a></p></li></ul><h2 id="2、NextCloud在树莓派上的安装方式"><a href="#2、NextCloud在树莓派上的安装方式" class="headerlink" title="2、NextCloud在树莓派上的安装方式"></a>2、NextCloud在树莓派上的安装方式</h2><p>NextCloudPI官方文档：<a href="https://github.com/nextcloud/nextcloudpi" target="_blank" rel="noopener">https://github.com/nextcloud/nextcloudpi</a></p><ul><li><p>2.1、自己构建环境和部署NextCloud<br>博文：<a href="http://unixetc.co.uk/2016/11/20/simple-nextcloud-installation-on-raspberry-pi/" target="_blank" rel="noopener">在Raspberry Pi上简单安装Nextcloud</a></p></li><li><p>2.1、自动脚本构建NextCloud<br>博文：<a href="http://unixetc.co.uk/2017/11/25/automatic-nextcloud-installation-on-raspberry-pi/" target="_blank" rel="noopener">在Raspberry Pi上自动安装Nextcloud</a></p></li><li><p>2.3、刷NextCloudPi镜像文件<br>博文：<a href="https://wzfou.com/raspberry-nextcloud/" target="_blank" rel="noopener">树莓派Raspberry Pi安装NextCloud教程-自建家庭私有云局域网共享</a></p></li><li><p>2.4 使用 docker 安装：<br>文档：<a href="https://github.com/nextcloud/nextcloudpi" target="_blank" rel="noopener">NextCloudPI Github</a></p></li></ul><h2 id="3、NextCloud快速安装笔记"><a href="#3、NextCloud快速安装笔记" class="headerlink" title="3、NextCloud快速安装笔记"></a>3、NextCloud快速安装笔记</h2><p>  这里记录我目前使用的安装方式 <strong>步骤2.1</strong>中关键命令，方便查阅：</p><ul><li><p>3.1、下载<a href="https://en.wikipedia.org/wiki/Ansible_(software" target="_blank" rel="noopener">Ansible</a></p><blockquote><p>$ sudo apt-get -y install ansible</p></blockquote></li><li><p>3.2、下载自动构建脚本</p><blockquote><p>$ wget <a href="https://raw.githubusercontent.com/webtaster/Nextcloud/master/build_nextcloud.yml" target="_blank" rel="noopener">https://raw.githubusercontent.com/webtaster/Nextcloud/master/build_nextcloud.yml</a></p></blockquote></li><li><p>3.3、(可选)使用 <strong>SQLite</strong>安装和配置Nextcloud</p><blockquote><p>$ sudo date ; ansible-playbook -s -c local -i “localhost,” build_nextcloud.yml</p></blockquote></li><li><p>3.4、(可选)使用 <strong>MySQL</strong>安装和配置Nextcloud</p><blockquote><p>$ date ; ansible-playbook -s -c local -i “localhost,” –extra-vars “DATABASE=mysql MYSQL_ROOT_PASSWORD=qwerty NCUSER_PASSWORD=raindrop” build_nextcloud.yml</p></blockquote><p>上面指令中MySQL用户密码（可以自定义）：<br>用户：root     密码：qwerty         对应命令：<strong>MYSQL_ROOT_PASSWORD = qwerty</strong><br>用户：ncuser   密码：rainindrop     对应命令：<strong>NCUSER_PASSWORD = raindrop</strong></p></li><li><p>3.5、初始化配置NextCloud<br>在浏览器中打开</p><blockquote><p>http://树莓派的IP地址/nextcloud</p></blockquote><p>例如：</p><blockquote><p><a href="http://192.168.1.99/nextcloud" target="_blank" rel="noopener">http://192.168.1.99/nextcloud</a></p></blockquote><p>然后根据NextCloud提示配置NextCloud就可以了。</p></li><li><p>3.6、(可选)配置树莓派目录读写权限<br>如果在浏览器中配置NextCloud过程中错误提示“无法创建var/www/html/nextcloud/data“时，ssh等登陆树莓派并赋予<strong>775权限</strong></p><blockquote><p>$ sudo chmod -R 775 /var/www/html/nextcloud/</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>树莓派笔记之安装配置</title>
      <link href="/2018/05/21/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/05/21/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言： 这篇笔记记录不使用<strong>显示屏</strong>和<strong>网线</strong>来安装系统和配置环境</p></blockquote><h2 id="1、准备"><a href="#1、准备" class="headerlink" title="1、准备"></a>1、准备</h2><ul><li><p>树莓派3b+板子</p></li><li><p>SD存储卡和卡套</p></li><li><p>电源线和插头</p></li><li><p>路由器（有wifi就行）</p><a id="more"></a><h2 id="2、刻录系统"><a href="#2、刻录系统" class="headerlink" title="2、刻录系统"></a>2、刻录系统</h2></li><li><p>2.1、到<strong><a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener">树莓派官网</a></strong>下载系统系统文件并解压</p></li><li><p>2.2、下载安装镜像刻录软件如：Mac版<strong><a href="http://mac.softpedia.com/get/Utilities/Etcher.shtml" target="_blank" rel="noopener">Etcher</a></strong>和window版win32diskimager等</p></li><li><p>2.3、插入SD卡到电脑并打开刻录软件如：目前使用的Etcher（示例）<br><img src="/images/WX20180521-100451@2x.png" alt=""></p><ul><li><p>2.3.1、选择（<strong>Select image</strong>）从官网下载并解压后的<strong> NOOBS </strong>或<strong> RASPBIAN </strong> 镜像文件（<strong> xxx.img </strong>格式）</p></li><li><p>2.3.2、选择SD卡 (<strong>Select drive</strong>)</p></li><li><p>2.3.3 开始刻录镜像（<strong>Flash</strong>）并等待及几分钟至镜像刻录完成</p></li></ul></li></ul><h2 id="3、配置wifi和ssh"><a href="#3、配置wifi和ssh" class="headerlink" title="3、配置wifi和ssh"></a>3、配置wifi和ssh</h2><p>因为没有使用网线所以要在安装前配置好wifi和ssh，让板子在安装完系统后自动连接wifi并开启ssh。</p><ul><li><p>3.1、配置wifi</p><p>打开SD卡，创建文件并写入保存：<br>文件名：<strong>wpa_supplicant.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">country=CN</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">ssid=&quot;mywifi&quot;        #ssid（wifi名）</span><br><span class="line">psk=&quot;123456&quot;          #password（wifi密码）</span><br><span class="line">key_mgmt=WPA-PSK     #wifi加密方式</span><br><span class="line">priority=1           #优先级</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3.2、配置ssh</p><p>打开SD卡，创建文件ssh文件(不写入内容，无后缀)<br>文件名：<strong>ssh</strong></p></li></ul><h2 id="4、安装系统并ssh登陆"><a href="#4、安装系统并ssh登陆" class="headerlink" title="4、安装系统并ssh登陆"></a>4、安装系统并ssh登陆</h2><ul><li><p>4.1、将SD卡插入板子中并上电启动，如果<strong>绿灯不在闪烁</strong>且<strong>红灯常亮</strong>，那么系统安装并启动成功。</p></li><li><p>4.2、进入路由器查看名称为 <strong>raspberry</strong>设备的 <strong>IP地址</strong>，例如：设备：raspberry ，IP地址：192.168.1.56。<br>如果没有查看到 <strong>raspberry</strong>设备和IP，请确认 <strong>步骤3.1</strong> 中文件 <strong>wpa_supplicant.conf</strong>是否正确配置wifi名称和密码。如果错误请重新刻录系统并配置wifi。</p></li><li><p>4.3、确认到 <strong>raspberry</strong>的IP（例如：192.168.1.56）后在电脑中打开终端（window使用<strong>xshell</strong>）连接到 Raspberry PI 板子的 ssh服务，例如：</p><blockquote><p>ssh <a href="mailto:pi@192.168.1.56" target="_blank" rel="noopener">pi@192.168.1.56</a></p></blockquote><p>然后输入密码：<strong>raspberry</strong>(系统默认)</p></li><li><p>4.4、ssh登陆完成后就可以对板子操作了！</p></li></ul><h2 id="5、设置wifi在板子断电或重启后自动连接网络"><a href="#5、设置wifi在板子断电或重启后自动连接网络" class="headerlink" title="5、设置wifi在板子断电或重启后自动连接网络"></a>5、设置wifi在板子断电或重启后自动连接网络</h2><ul><li><p>5.1、ssh登陆后执行</p><blockquote><p>sudo nano /etc/network/interfaces</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">auto lo</span><br><span class="line"></span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">iface eth0 inet dhcp</span><br><span class="line"></span><br><span class="line">allow-hotplug wlan0</span><br><span class="line"></span><br><span class="line">iface wlan0 inet dhcp</span><br><span class="line"></span><br><span class="line">wpa-ssid &quot;mywifi&quot;</span><br><span class="line"></span><br><span class="line">wpa-psk &quot;123456&quot;</span><br></pre></td></tr></table></figure></li></ul><p>保存退出</p><p>参考博文：<a href="https://blog.csdn.net/shaopengf/article/details/52411926" target="_blank" rel="noopener">Raspberry Pi树莓派无线网卡配置[多重方法备选]</a></p><h2 id="6、安全管理"><a href="#6、安全管理" class="headerlink" title="6、安全管理"></a>6、安全管理</h2><p>  建议修改默认账户密码如：<br>  用户：pi<br>  密码：raspberry</p><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><ul><li><p>1、nano 编辑器 操作</p><blockquote><p>退出：<strong>control x</strong><br>保存并退出： <strong>control o</strong>  保存 <strong>enter</strong> q确认 <strong>control x</strong> 退出</p></blockquote></li><li><p>2、linxu c重启命令</p><blockquote><p>sudo reboot</p></blockquote></li></ul><p>参考博文：</p><ul><li>[1]、<a href="https://www.jianshu.com/p/f260967aefb1" target="_blank" rel="noopener">树莓派如何完全无头(无屏无网线无键盘鼠标)安装</a></li><li>[2]、<a href="https://blog.csdn.net/yoie01/article/details/45115067" target="_blank" rel="noopener">树莓派 - 修改pi账号密码,开启root账号</a></li><li>[3]、<a href="https://blog.csdn.net/shaopengf/article/details/52411926" target="_blank" rel="noopener">Raspberry Pi树莓派无线网卡配置[多重方法备选]</a></li><li>[4]、<a href="https://help.nextcloud.com/" target="_blank" rel="noopener">NextCloud论坛</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android手机搭建Linux环境</title>
      <link href="/2018/05/18/Android%E6%89%8B%E6%9C%BA%E6%90%AD%E5%BB%BALinux%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/05/18/Android%E6%89%8B%E6%9C%BA%E6%90%AD%E5%BB%BALinux%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="Termux介绍"><a href="#Termux介绍" class="headerlink" title="Termux介绍"></a><strong><a href="https://wiki.termux.com/wiki/Main_Page" target="_blank" rel="noopener">Termux</a></strong>介绍</h2><blockquote><p>Termux是Android，Chromebook和Fire OS的终端模拟器和Linux环境。<br><a id="more"></a><br>官网：<a href="https://wiki.termux.com" target="_blank" rel="noopener">https://wiki.termux.com</a><br>github：<a href="https://github.com/termux/termux-app" target="_blank" rel="noopener">https://github.com/termux/termux-app</a></p></blockquote><h2 id="1、配置Termux。"><a href="#1、配置Termux。" class="headerlink" title="1、配置Termux。"></a>1、配置Termux。</h2><h3 id="1-1-升级-apt-否则无法安装软件"><a href="#1-1-升级-apt-否则无法安装软件" class="headerlink" title="1.1 升级 apt(否则无法安装软件)"></a>1.1 升级 apt(否则无法安装软件)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><h3 id="1-2-安装openssh"><a href="#1-2-安装openssh" class="headerlink" title="1.2 安装openssh"></a>1.2 安装openssh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt intall openssh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac使用Android代理翻墙记录</title>
      <link href="/2018/05/17/Mac%E4%BD%BF%E7%94%A8Android%E4%BB%A3%E7%90%86%E7%BF%BB%E5%A2%99%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/05/17/Mac%E4%BD%BF%E7%94%A8Android%E4%BB%A3%E7%90%86%E7%BF%BB%E5%A2%99%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1、下载Proxy-Server代理软件"><a href="#1、下载Proxy-Server代理软件" class="headerlink" title="1、下载Proxy Server代理软件"></a>1、下载<strong><a href="https://www.apk20.com/apk/141135/" target="_blank" rel="noopener">Proxy Server</a></strong>代理软件</h2><h2 id="2、创建一个代理服务（Proxy-Server）"><a href="#2、创建一个代理服务（Proxy-Server）" class="headerlink" title="2、创建一个代理服务（Proxy Server）"></a>2、创建一个代理服务（Proxy Server）</h2><p><img src="/images/WX20180517-155059@2x.png" alt=""><br><a id="more"></a></p><h2 id="3、设置服务名和端口并返回后点击Start按钮启动服务"><a href="#3、设置服务名和端口并返回后点击Start按钮启动服务" class="headerlink" title="3、设置服务名和端口并返回后点击Start按钮启动服务"></a>3、设置服务名和端口并返回后点击<strong>Start</strong>按钮启动服务</h2><p><img src="/images/WX20180517-155034@2x.png" alt=""></p><h2 id="4、打开FireFox浏览器并配置网络代理"><a href="#4、打开FireFox浏览器并配置网络代理" class="headerlink" title="4、打开FireFox浏览器并配置网络代理"></a>4、打开<strong>FireFox</strong>浏览器并配置<strong>网络代理</strong></h2><p><img src="/images/WX20180517-155633@2x.png" alt=""></p><h2 id="5、设置启动代理服务手机的Ip和上面填写端口"><a href="#5、设置启动代理服务手机的Ip和上面填写端口" class="headerlink" title="5、设置启动代理服务手机的Ip和上面填写端口"></a>5、设置启动代理服务手机的<strong>Ip</strong>和上面填写端口</h2><p><img src="/images/WX20180517-155841@2x.png" alt=""></p><p>到此 FireFox 可以使用手机的代理服务，如果手机已经翻墙了，那么FireFox就可以实现翻墙。</p><p>同样可以为电脑设置代理配置，实现全局代理。</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>机器学习资料整理</title>
      <link href="/2018/04/27/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
      <url>/2018/04/27/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/tanjunze/ML-Note/blob/master/document/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86.md" target="_blank" rel="noopener">我的机器学习资料</a>，为了方便查询同步到笔记中。</p><h2 id="机器学习资料"><a href="#机器学习资料" class="headerlink" title="机器学习资料"></a>机器学习资料</h2><h3 id="文档资料"><a href="#文档资料" class="headerlink" title="文档资料"></a>文档资料</h3><ul><li><p><a href="https://github.com/ChristosChristofidis/awesome-deep-learning" target="_blank" rel="noopener">深度学习资料-Github</a></p></li><li><p><a href="http://neuralnetworksanddeeplearning.com/" target="_blank" rel="noopener">神经网络和深度学习•Michael Nielsen</a></p></li><li><p><a href="https://www.gitbook.com/book/hit-scir/neural-networks-and-deep-learning-zh_cn/details" target="_blank" rel="noopener">神经网络和深度学习•Michael Nielsen（翻译）</a></p><a id="more"></a></li><li><p><a href="http://www.deeplearningbook.org/" target="_blank" rel="noopener">深度学习•Bengio</a></p></li><li><p><a href="https://github.com/exacity/deeplearningbook-chinese" target="_blank" rel="noopener">深度学习•Bengio（翻译）</a></p></li><li><p><a href="https://tensorflow.google.cn/" target="_blank" rel="noopener">Tensorflow官网-国内</a></p></li><li><p><a href="https://www.tensorflowers.cn/" target="_blank" rel="noopener">Tensorflow社区-国内</a></p></li><li><p><a href="https://devopen.club/ai/" target="_blank" rel="noopener">深度学习资料整理1-国内</a></p></li><li><p><a href="https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap" target="_blank" rel="noopener">深度学习路线图</a></p></li><li><p><a href="http://colah.github.io/" target="_blank" rel="noopener">深度学习博文</a></p></li><li><p><a href="https://deeplearning4j.org/cn/" target="_blank" rel="noopener">深度学习Java框架</a></p></li></ul><h3 id="在线教育"><a href="#在线教育" class="headerlink" title="在线教育"></a>在线教育</h3><ul><li><p><a href="https://cn.udacity.com/course/deep-learning--ud730" target="_blank" rel="noopener">Google深度学习-Udacity课程</a></p></li><li><p><a href="https://developers.google.cn/machine-learning/crash-course/" target="_blank" rel="noopener">Google机器学习速成课程</a></p></li><li><p><a href="http://ufldl.stanford.edu/wiki/index.php/UFLDL%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">深度学习-Stanford-UFLDL</a></p></li><li><p><a href="http://deeplearning.stanford.edu/tutorial/" target="_blank" rel="noopener">深度学习-Stanford-Tutorial</a></p></li><li><p><a href="https://www.icourse163.org/learn/PKU-1002536002?tid=1002700003" target="_blank" rel="noopener">人工智能实践：Tensorflow笔记-慕课网</a></p></li><li><p><a href="https://morvanzhou.github.io/" target="_blank" rel="noopener">莫烦Python</a></p></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><p>python</p></li><li><p>jupyter notebook</p></li></ul><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul><li><p><a href="https://tensorflow.google.cn/" target="_blank" rel="noopener">Tensorflow</a></p></li><li><p><a href="http://wiki.jikexueyuan.com/project/tensorflow-zh/" target="_blank" rel="noopener">Tensorflow（极客学院-翻译）</a></p></li><li><p><a href="http://tensorlayercn.readthedocs.io/zh/latest/" target="_blank" rel="noopener">TensorLayer-中文</a></p></li><li><p><a href="http://tensorlayer.readthedocs.io/en/latest/" target="_blank" rel="noopener">TensorLayer</a></p></li><li><p><a href="https://github.com/scikit-learn/scikit-learn" target="_blank" rel="noopener">scikit-learn</a></p></li><li><p><a href="http://sklearn.apachecn.org" target="_blank" rel="noopener">scikit-learn 翻译</a></p></li><li><p><a href="http://caffe.berkeleyvision.org/" target="_blank" rel="noopener">caffe</a> 或 <a href="https://caffe2.ai/" target="_blank" rel="noopener">caffe2</a></p></li><li><p><a href="https://keras.io/" target="_blank" rel="noopener">Keras</a></p></li><li><p><a href="https://keras-cn.readthedocs.io/en/latest/" target="_blank" rel="noopener">keras 翻译</a></p></li><li><p><a href="http://deeplearning.net/software/theano/" target="_blank" rel="noopener">theano</a></p></li><li><p>…</p></li></ul><h2 id="其他文档"><a href="#其他文档" class="headerlink" title="其他文档"></a>其他文档</h2><ul><li><p><a href="https://deepmind.com/" target="_blank" rel="noopener">Deepmind</a></p></li><li><p><a href="http://cs231n.github.io/neural-networks-3/" target="_blank" rel="noopener">积卷神经网络-斯坦福</a></p></li><li><p><a href="https://github.com/llSourcell" target="_blank" rel="noopener">Siraj Raval-Gitub-Youtube</a></p></li><li><p><a href="https://cs231n.github.io/convolutional-networks/" target="_blank" rel="noopener">CS231n课程-积卷网络</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/22038289?refer=intelligentunit" target="_blank" rel="noopener">CS231n课程-积卷网络-中文翻译</a></p><h2 id="深度学习-开源项目"><a href="#深度学习-开源项目" class="headerlink" title="深度学习-开源项目"></a>深度学习-开源项目</h2></li></ul><ul><li><p><a href="https://github.com/CSTR-Edinburgh/merlin" target="_blank" rel="noopener">音频合成-Merlin</a></p></li><li><p><a href="https://github.com/ibab/tensorflow-wavenet" target="_blank" rel="noopener">音频合成-Wavenet</a></p></li><li><p><a href="https://github.com/udacity/deep-learning" target="_blank" rel="noopener">深度学习-Udacity-Code</a></p></li><li><p><a href="https://github.com/upul/Behavioral-Cloning" target="_blank" rel="noopener">无人驾驶-BehavioralCloning)</a></p></li><li><p><a href="https://github.com/udacity/self-driving-car-sim" target="_blank" rel="noopener">无人驾驶-udacity-sim</a></p></li><li><p><a href="https://blog.csdn.net/pengdali/article/details/79185757" target="_blank" rel="noopener">无人驾驶-CSDN博文</a></p></li></ul><h2 id="机器学习数据集"><a href="#机器学习数据集" class="headerlink" title="机器学习数据集"></a>机器学习数据集</h2><ul><li><a href="https://www.zhihu.com/question/63383992" target="_blank" rel="noopener">机器学习数据集1-知乎提问</a></li><li><a href="https://zhuanlan.zhihu.com/p/25138563" target="_blank" rel="noopener">机器学习数据集2-知乎博文</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo/GitHub Pages搭建个人博客</title>
      <link href="/2018/04/27/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/04/27/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好久没有在github pages 中更新笔记了，刚把旧的github仓库重新整理了。<br>在此记录一下，日后逐渐将旧笔记往这里迁移。<br><a id="more"></a></p><h2 id="1、配置环境"><a href="#1、配置环境" class="headerlink" title="1、配置环境"></a>1、配置环境</h2><p>Hexo官方文档: <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo wiki</a></p><p>首先安装:</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>再安装 Hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>到此Hexo安装完成，如果失败请参考官网，这里只记录简单流程。</p><h2 id="2、搭建站点"><a href="#2、搭建站点" class="headerlink" title="2、搭建站点"></a>2、搭建站点</h2><p>执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><h2 id="3、配置站点"><a href="#3、配置站点" class="headerlink" title="3、配置站点"></a>3、配置站点</h2><p>打开 <strong>folder/_config.yml</strong> 文件修改配置即可</p><h2 id="4、启动服务"><a href="#4、启动服务" class="headerlink" title="4、启动服务"></a>4、启动服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>简写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p><p>此时控制台中打印出 <strong><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></strong> ,再使用浏览器打开你就可以看到Hello world页面了。</p><h2 id="5、发布到github上"><a href="#5、发布到github上" class="headerlink" title="5、发布到github上"></a>5、发布到github上</h2><p>参考：<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">Hexo 部署</a></p><p><font color="red">注意：</font>首先你需要创建github账户，gtihub的仓库并push、pull仓库已验证你的github配置完成。</p><p>再创建一个仓库命名为<strong>&lt;你的用户名&gt;.github.io</strong>,如：</p><blockquote><p>tanjunze.github.io</p></blockquote><p>打开本地&lt;<strong>folder</strong>&gt; Hexo工程安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line"></span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>打开本地<strong>folder/_config.yml</strong>找到<strong>Deployment</strong>选项，并修改：<br><img src="/images/2018_4_27_14_41.png" alt=""><br>其中将<strong>repo</strong>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@github.com:&lt;你的账户名&gt;/&lt;你的账户名&gt;.github.io.git</span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><p>如果push成功，打开<strong>https://&lt;你的用户名&gt;.github.io</strong>,例如：</p><blockquote><p><a href="https://tanjunze.github.io/">https://tanjunze.github.io/</a></p></blockquote><p>恭喜你成功搭建了在Hexo + Gtihub Pages 的个人免费站点了。</p><p>参考网址：<a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="noopener">http://www.cnblogs.com/zhcncn/p/4097881.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dart 之旅</title>
      <link href="/2018/03/22/Dart%E4%B9%8B%E6%97%85/"/>
      <url>/2018/03/22/Dart%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<p><a href="https://dartpad.dartlang.org/" target="_blank" rel="noopener">dartpad</a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>所有的变量引用都是对象，每个对象都是一个类的实例。在Dart 中甚至 <strong>数字（numbers）</strong>、<strong>方法（functions）</strong>和<strong>null</strong>都是对象。所有对象都继承<strong><a href="https://api.dartlang.org/stable/dart-core/Object-class.html" target="_blank" rel="noopener">Object</a></strong>类。</li><li>尽管Dart 是强类型语言，但是<strong>类型声明</strong>是可选的，因为Dart可以推断类型。如果要明确说明不需要任何类型， 则<a href="https://www.dartlang.org/guides/language/effective-dart/design#do-annotate-with-object-instead-of-dynamic-to-indicate-any-object-is-allowed" target="_blank" rel="noopener">使用特殊类型<code>dynamic</code></a>。</li><li>Dart 支持泛型，例如<strong>List<int></int></strong> 或<strong>List<dynamic></dynamic></strong>。</li><li>Dart 支持顶级方法（如<code>main()</code>），静态方法，实例方法和方法内方法（嵌套函数和本地函数）。</li><li>Dart 支持顶级变量，以及类中定义变量（静态变量和实例变量）。实例变量有时称为字段和属性。</li><li>与<strong>Java</strong>不同的是，Dart 中没有<code>public</code>,<code>private</code>,<code>protected</code>关键字，如果标识符已（<code>_</code>）开头，则其是私有的。</li><li><em>标识符</em>可以以字母或下划线（_）开头，后跟这些字符加数字的任意组合。</li><li>Dart有两个<em>表达式</em>（具有运行时值）和 <em>语句</em>（不具有）。例如，<a href="https://www.dartlang.org/guides/language/language-tour#conditional-expressions" target="_blank" rel="noopener">条件表达式</a> <code>condition ? expr1 : expr2</code>的值为<code>expr1</code>或<code>expr2</code>。将其与<a href="https://www.dartlang.org/guides/language/language-tour#if-and-else" target="_blank" rel="noopener">if-else语句</a>进行比较，该<a href="https://www.dartlang.org/guides/language/language-tour#if-and-else" target="_blank" rel="noopener">语句</a>没有任何值。语句通常包含一个或多个表达式，但表达式不能直接包含语句。</li><li>Dart工具可以报告两种问题：<em>警告</em>和<em>错误</em>。警告只是表明您的代码可能无法正常工作，但它们不会阻止您的程序执行。错误可以是编译时或运行时。编译时错误会阻止代码执行; 运行时错误导致 代码执行时引发<a href="https://www.dartlang.org/guides/language/language-tour#exceptions" target="_blank" rel="noopener">异常</a>。</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">'Bob'</span>;</span><br><span class="line"><span class="keyword">dynamic</span> name = <span class="string">'Bob'</span> ;</span><br></pre></td></tr></table></figure><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>未初始化的变量默认为<strong>null</strong>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> lineCount ; <span class="keyword">assert</span> （lineCount == <span class="keyword">null</span> ）;</span><br></pre></td></tr></table></figure><h3 id="final-和-const"><a href="#final-和-const" class="headerlink" title="final 和 const"></a>final 和 const</h3><p>如果不打算修改一个变量，使用<code>final</code>或<code>const</code>,final 修饰的变量只能赋值一次；一个const变量是编译时常量。（const变量同时也是final变量。）顶级的final 变量或类中的final变量在<strong>第一次使用时初始化</strong>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> name = <span class="string">'Bob'</span>; </span><br><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> nickname = <span class="string">'Bobby'</span>;</span><br><span class="line"><span class="keyword">const</span> bar = <span class="number">1000000</span>；</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> atm = <span class="number">1.01325</span> * bar;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">const</span> [];</span><br><span class="line"><span class="keyword">final</span> bar = <span class="keyword">const</span> [];</span><br><span class="line"><span class="keyword">const</span> baz = []; <span class="comment">// 等价于`const []`</span></span><br><span class="line"></span><br><span class="line">foo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//  const []</span></span><br><span class="line">baz = [<span class="number">42</span>];  <span class="comment">// 错误 不能赋值</span></span><br></pre></td></tr></table></figure><h2 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h2><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int 类型</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span> ;<span class="keyword">var</span> hex = <span class="number">0xDEADBEEF</span> ; </span><br><span class="line"><span class="comment">// double 类型</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">1.1</span> ; <span class="keyword">var</span> exponents = <span class="number">1.42e5</span> ; </span><br><span class="line"><span class="built_in">double</span> z = <span class="number">1</span> ; <span class="comment">//相当于double z = 1.0。  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line"><span class="comment">// String -&gt; int</span></span><br><span class="line"><span class="keyword">var</span> one = <span class="built_in">int</span>.parse(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">assert</span>(one == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// String -&gt; double</span></span><br><span class="line"><span class="keyword">var</span> onePointOne = <span class="built_in">double</span>.parse(<span class="string">'1.1'</span>);</span><br><span class="line"><span class="keyword">assert</span>(onePointOne == <span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// int -&gt; String</span></span><br><span class="line"><span class="built_in">String</span> oneAsString = <span class="number">1.</span>toString();</span><br><span class="line"><span class="keyword">assert</span>(oneAsString == <span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// double -&gt; String</span></span><br><span class="line"><span class="built_in">String</span> piAsString = <span class="number">3.14159</span>.toStringAsFixed(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">assert</span>(piAsString == <span class="string">'3.14'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> &lt;&lt; <span class="number">1</span>) == <span class="number">6</span>); <span class="comment">// 0011 &lt;&lt; 1 == 0110</span></span><br><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> &gt;&gt; <span class="number">1</span>) == <span class="number">1</span>); <span class="comment">// 0011 &gt;&gt; 1 == 0001</span></span><br><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> | <span class="number">4</span>) == <span class="number">7</span>); <span class="comment">// 0011 | 0100 == 0111</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> msPerSecond = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> secondsUntilRetry = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> msUntilRetry = secondsUntilRetry * msPerSecond;</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>Dart String 是UTF-16编码，可以使用<code>&#39;</code>或<code>&quot;</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">'Single quotes work well for string literals.'</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">"Double quotes work just as well."</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">'It\'s easy to escape the string delimiter.'</span>;</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="string">"It's even easier to use the other delimiter."</span>;</span><br></pre></td></tr></table></figure><p>字符串拼接</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'string interpolation'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">'Dart has $s, which is very handy.'</span> ==</span><br><span class="line">    <span class="string">'Dart has string interpolation, '</span> +</span><br><span class="line">        <span class="string">'which is very handy.'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">'That deserves all caps. '</span> +</span><br><span class="line">        <span class="string">'<span class="subst">$&#123;s.toUpperCase()&#125;</span> is very handy!'</span> ==</span><br><span class="line">    <span class="string">'That deserves all caps. '</span> +</span><br><span class="line">        <span class="string">'STRING INTERPOLATION is very handy!'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">'String '</span></span><br><span class="line">    <span class="string">'concatenation'</span></span><br><span class="line">    <span class="string">" works even over line breaks."</span>;</span><br><span class="line"><span class="keyword">assert</span>(s1 ==</span><br><span class="line">    <span class="string">'String concatenation works even over '</span></span><br><span class="line">    <span class="string">'line breaks.'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">'The + operator '</span> + <span class="string">'works, as well.'</span>;</span><br><span class="line"><span class="keyword">assert</span>(s2 == <span class="string">'The + operator works, as well.'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">r'In a raw string, not even \n gets special treatment.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// These work in a const string.</span></span><br><span class="line"><span class="keyword">const</span> aConstNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> aConstBool = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">const</span> aConstString = <span class="string">'a constant string'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// These do NOT work in a const string.</span></span><br><span class="line"><span class="keyword">var</span> aNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> aBool = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">var</span> aString = <span class="string">'a string'</span>;</span><br><span class="line"><span class="keyword">const</span> aConstList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> validConstString = <span class="string">'$aConstNum $aConstBool $aConstString'</span>;</span><br><span class="line"><span class="comment">// const invalidConstString = '$aNum $aBool $aString $aConstList';</span></span><br></pre></td></tr></table></figure><h3 id="Booleans"><a href="#Booleans" class="headerlink" title="Booleans"></a>Booleans</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check for an empty string.</span></span><br><span class="line"><span class="keyword">var</span> fullName = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">assert</span>(fullName.isEmpty);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for zero.</span></span><br><span class="line"><span class="keyword">var</span> hitPoints = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(hitPoints &lt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for null.</span></span><br><span class="line"><span class="keyword">var</span> unicorn;</span><br><span class="line"><span class="keyword">assert</span>(unicorn == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for NaN.</span></span><br><span class="line"><span class="keyword">var</span> iMeantToDoThis = <span class="number">0</span> / <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(iMeantToDoThis.isNaN);</span><br></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">assert</span>(list.length == <span class="number">3</span>);</span><br><span class="line"><span class="keyword">assert</span>(list[<span class="number">1</span>] == <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">list[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">assert</span>(list[<span class="number">1</span>] == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> constantList = <span class="keyword">const</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// constantList[1] = 1; // Uncommenting this causes an error.</span></span><br></pre></td></tr></table></figure><h3 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gifts = &#123;</span><br><span class="line">  <span class="comment">// Key:    Value</span></span><br><span class="line">  <span class="string">'first'</span>: <span class="string">'partridge'</span>,</span><br><span class="line">  <span class="string">'second'</span>: <span class="string">'turtledoves'</span>,</span><br><span class="line">  <span class="string">'fifth'</span>: <span class="string">'golden rings'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nobleGases = &#123;</span><br><span class="line">  <span class="number">2</span>: <span class="string">'helium'</span>,</span><br><span class="line">  <span class="number">10</span>: <span class="string">'neon'</span>,</span><br><span class="line">  <span class="number">18</span>: <span class="string">'argon'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gifts = <span class="built_in">Map</span>();</span><br><span class="line">gifts[<span class="string">'first'</span>] = <span class="string">'partridge'</span>;</span><br><span class="line">gifts[<span class="string">'second'</span>] = <span class="string">'turtledoves'</span>;</span><br><span class="line">gifts[<span class="string">'fifth'</span>] = <span class="string">'golden rings'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nobleGases = <span class="built_in">Map</span>();</span><br><span class="line">nobleGases[<span class="number">2</span>] = <span class="string">'helium'</span>;</span><br><span class="line">nobleGases[<span class="number">10</span>] = <span class="string">'neon'</span>;</span><br><span class="line">nobleGases[<span class="number">18</span>] = <span class="string">'argon'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gifts = &#123;<span class="string">'first'</span>: <span class="string">'partridge'</span>&#125;;</span><br><span class="line">gifts[<span class="string">'fourth'</span>] = <span class="string">'calling birds'</span>; <span class="comment">// Add a key-value pair</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gifts = &#123;<span class="string">'first'</span>: <span class="string">'partridge'</span>&#125;;</span><br><span class="line"><span class="keyword">assert</span>(gifts[<span class="string">'first'</span>] == <span class="string">'partridge'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gifts = &#123;<span class="string">'first'</span>: <span class="string">'partridge'</span>&#125;;</span><br><span class="line"><span class="keyword">assert</span>(gifts[<span class="string">'fifth'</span>] == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gifts = &#123;<span class="string">'first'</span>: <span class="string">'partridge'</span>&#125;;</span><br><span class="line">gifts[<span class="string">'fourth'</span>] = <span class="string">'calling birds'</span>;</span><br><span class="line"><span class="keyword">assert</span>(gifts.length == <span class="number">2</span>);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> constantMap = <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="number">2</span>: <span class="string">'helium'</span>,</span><br><span class="line">  <span class="number">10</span>: <span class="string">'neon'</span>,</span><br><span class="line">  <span class="number">18</span>: <span class="string">'argon'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// constantMap[2] = 'Helium'; // Uncommenting this causes an error.</span></span><br></pre></td></tr></table></figure><h3 id="Runes"><a href="#Runes" class="headerlink" title="Runes"></a>Runes</h3><p>表达Unicode代码的常用方法是 <code>\uXXXX</code>，其中XXXX是4位十六进制值。例如，心脏（♥）是<code>\u2665</code>。要是<strong>多于或少于4个十六进制数字</strong>，将<strong>值放在大括号</strong>中。例如，笑表情符号（😆）是<code>\u{1f600}</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> clapping = <span class="string">'\u&#123;1f44f&#125;'</span>;</span><br><span class="line">  <span class="built_in">print</span>(clapping);</span><br><span class="line">  <span class="built_in">print</span>(clapping.codeUnits);</span><br><span class="line">  <span class="built_in">print</span>(clapping.runes.toList());</span><br><span class="line"> <span class="comment">// 👏</span></span><br><span class="line"> <span class="comment">//[55357, 56399]</span></span><br><span class="line"> <span class="comment">//[128079]</span></span><br><span class="line"></span><br><span class="line">  Runes input = <span class="keyword">new</span> Runes(</span><br><span class="line">      <span class="string">'\u2665  \u&#123;1f605&#125;  \u&#123;1f60e&#125;  \u&#123;1f47b&#125;  \u&#123;1f596&#125;  \u&#123;1f44d&#125;'</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="keyword">new</span> <span class="built_in">String</span>.fromCharCodes(input));</span><br><span class="line">  <span class="comment">// ♥  😅  😎  👻  🖖  👍</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> isNoble(<span class="built_in">int</span> atomicNumber) &#123;</span><br><span class="line">  <span class="keyword">return</span> _nobleGases[atomicNumber] != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bool</span> isNoble(<span class="built_in">int</span> atomicNumber) =&gt; _nobleGases[atomicNumber] != <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>可选参数可以是命名参数或者基于位置的参数，但是这两种参数不能同时当做可选参数。</p><h4 id="Optional-named-parameters（可选命名参数）"><a href="#Optional-named-parameters（可选命名参数）" class="headerlink" title="Optional named parameters（可选命名参数）"></a>Optional named parameters（可选命名参数）</h4><p>调用函数时，可以使用指定命名参数 。例如：<code>*paramName*: *value*</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enableFlags （bold ：<span class="keyword">true</span> ，hidden ：<span class="keyword">false</span> ）;</span><br></pre></td></tr></table></figure><p>定义函数时，用于 <code>{param1, param2, …}</code>指定命名参数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> enableFlags(&#123;<span class="built_in">bool</span> bold, <span class="built_in">bool</span> hidden&#125;) &#123;...&#125;</span><br></pre></td></tr></table></figure><h4 id="Optional-positional-parameters（可选位置参数）"><a href="#Optional-positional-parameters（可选位置参数）" class="headerlink" title="Optional positional parameters（可选位置参数）"></a>Optional positional parameters（可选位置参数）</h4><p>把一些方法的参数放到 <code>[]</code> 中就变成可选 位置参数了：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> say(<span class="built_in">String</span> from, <span class="built_in">String</span> msg, [<span class="built_in">String</span> device]) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">'$from says $msg'</span>;</span><br><span class="line">  <span class="keyword">if</span> (device != <span class="keyword">null</span>) &#123;</span><br><span class="line">    result = <span class="string">'$result with a $device'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(say(<span class="string">'Bob'</span>, <span class="string">'Howdy'</span>) == <span class="string">'Bob says Howdy'</span>); <span class="comment">//true</span></span><br><span class="line"><span class="keyword">assert</span>(say(<span class="string">'Bob'</span>, <span class="string">'Howdy'</span>, <span class="string">'smoke signal'</span>) ==</span><br><span class="line">    <span class="string">'Bob says Howdy with a smoke signal'</span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Default-parameter-values（默认参数值）"><a href="#Default-parameter-values（默认参数值）" class="headerlink" title="Default parameter values（默认参数值）"></a>Default parameter values（默认参数值）</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Sets the [bold] and [hidden] flags ...</span></span><br><span class="line"><span class="keyword">void</span> enableFlags(&#123;<span class="built_in">bool</span> bold = <span class="keyword">false</span>, <span class="built_in">bool</span> hidden = <span class="keyword">false</span>&#125;) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bold will be true; hidden will be false.</span></span><br><span class="line">enableFlags(bold: <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> say(<span class="built_in">String</span> from, <span class="built_in">String</span> msg,</span><br><span class="line">    [<span class="built_in">String</span> device = <span class="string">'carrier pigeon'</span>, <span class="built_in">String</span> mood]) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">'$from says $msg'</span>;</span><br><span class="line">  <span class="keyword">if</span> (device != <span class="keyword">null</span>) &#123;</span><br><span class="line">    result = <span class="string">'$result with a $device'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (mood != <span class="keyword">null</span>) &#123;</span><br><span class="line">    result = <span class="string">'$result (in a $mood mood)'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(say(<span class="string">'Bob'</span>, <span class="string">'Howdy'</span>) ==</span><br><span class="line">    <span class="string">'Bob says Howdy with a carrier pigeon'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> doStuff(</span><br><span class="line">    &#123;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">const</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; gifts = <span class="keyword">const</span> &#123;</span><br><span class="line">      <span class="string">'first'</span>: <span class="string">'paper'</span>,</span><br><span class="line">      <span class="string">'second'</span>: <span class="string">'cotton'</span>,</span><br><span class="line">      <span class="string">'third'</span>: <span class="string">'leather'</span></span><br><span class="line">    &#125;&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'list:  $list'</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'gifts: $gifts'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flutter 整理</title>
      <link href="/2017/10/05/Flutter%E6%95%B4%E7%90%862/"/>
      <url>/2017/10/05/Flutter%E6%95%B4%E7%90%862/</url>
      
        <content type="html"><![CDATA[<h2 id="Dart-Package"><a href="#Dart-Package" class="headerlink" title="Dart Package"></a>Dart Package</h2><p><a href="https://www.dartlang.org/tools/pub" target="_blank" rel="noopener">https://www.dartlang.org/tools/pub</a></p><h4 id="创建dart-包"><a href="#创建dart-包" class="headerlink" title="创建dart 包"></a>创建dart 包</h4><p><a href="https://www.dartlang.org/guides/libraries/create-library-packages" target="_blank" rel="noopener">https://www.dartlang.org/guides/libraries/create-library-packages</a></p><h4 id="dart包依赖"><a href="#dart包依赖" class="headerlink" title="dart包依赖"></a>dart包依赖</h4><p><a href="https://www.dartlang.org/tools/pub/dependencies#path-packages" target="_blank" rel="noopener">https://www.dartlang.org/tools/pub/dependencies#path-packages</a></p><h5 id="依赖自建-pub-server"><a href="#依赖自建-pub-server" class="headerlink" title="依赖自建 pub server"></a>依赖自建 pub server</h5><p><a href="https://www.dartlang.org/tools/pub/dependencies#hosted-packages" target="_blank" rel="noopener">https://www.dartlang.org/tools/pub/dependencies#hosted-packages</a></p><p>自建私有服务器Github： <a href="https://github.com/dart-lang/pub_server" target="_blank" rel="noopener">pub server</a></p><h5 id="依赖Git仓库"><a href="#依赖Git仓库" class="headerlink" title="依赖Git仓库"></a>依赖Git仓库</h5><p><a href="https://www.dartlang.org/tools/pub/dependencies#git-packages" target="_blank" rel="noopener">https://www.dartlang.org/tools/pub/dependencies#git-packages</a></p><h5 id="本地仓库依赖"><a href="#本地仓库依赖" class="headerlink" title="本地仓库依赖"></a>本地仓库依赖</h5><p><a href="https://www.dartlang.org/tools/pub/dependencies#path-packages" target="_blank" rel="noopener">https://www.dartlang.org/tools/pub/dependencies#path-packages</a></p><h2 id="Flutter-Package"><a href="#Flutter-Package" class="headerlink" title="Flutter Package"></a>Flutter Package</h2><p><a href="https://flutter.io/docs/development/packages-and-plugins/using-packages" target="_blank" rel="noopener">https://flutter.io/docs/development/packages-and-plugins/using-packages</a></p><h4 id="开发Flutter包"><a href="#开发Flutter包" class="headerlink" title="开发Flutter包"></a>开发Flutter包</h4><p><a href="https://flutter.io/docs/development/packages-and-plugins/developing-packages" target="_blank" rel="noopener">https://flutter.io/docs/development/packages-and-plugins/developing-packages</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flutter 整理</title>
      <link href="/2017/10/05/Flutter%E6%95%B4%E7%90%86/"/>
      <url>/2017/10/05/Flutter%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p><strong>Flutter 官网</strong></p><p><code>https://flutter.io/</code></p><p><strong>Flutter 中文</strong></p><p><strong>官方：</strong><code>https://flutter-io.cn/</code> </p><p><strong>社区：</strong><code>https://flutterchina.club/</code> </p><p><strong>Dart官网</strong></p><p><code>https://www.dartlang.org/</code></p><p><strong>Dart包管理</strong></p><p><code>https://pub.dartlang.org/</code></p><p><code>https://pub.flutter-io.cn/</code></p><p><strong>Flutter 桌面版</strong></p><p><strong>社区：</strong><code>https://github.com/google/flutter-desktop-embedding</code></p><p><strong>其他：</strong><code>https://feather-apps.com/</code></p><p><strong>codelabs中文：</strong><code>https://codelabs.flutter-io.cn/</code></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><strong>json_serializable</strong></p><p><code>https://caijinglong.github.io/json2dart/index_ch.html</code></p><p><strong>动画</strong></p><p><code>https://www.2dimensions.com/runtimes</code></p><h3 id="博文"><a href="#博文" class="headerlink" title="博文"></a>博文</h3><p><strong>闲鱼</strong></p><p><code>https://www.yuque.com/xytech/flutter</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Marketdown 语法</title>
      <link href="/2017/08/22/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2017/08/22/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><h3 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h3><p><strong><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">Markdown</a></strong> 是由 <a href="http://daringfireball.net/" target="_blank" rel="noopener">Daring Fireball</a> 创建的轻量级标记语言</p><h3 id="段落和换行符"><a href="#段落和换行符" class="headerlink" title="段落和换行符"></a>段落和换行符</h3><p>段落由多个空行分隔</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题在行的开头使用 1-6 个  <code>#</code>  对应标题1-6个级别，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题 H1</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 二级标题 H2</span></span><br><span class="line"></span><br><span class="line"><span class="section">###### 六级标题 H6</span></span><br></pre></td></tr></table></figure><p>另一种使用方式, 在一行中使用多个连续的 <code>#</code>表示 <strong>一级标题</strong> ，使用连续的<code>-</code>表示 <strong>二级标题</strong>。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一级标题</span><br><span class="line">===============</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">二级标题</span><br><span class="line">---------------</span><br></pre></td></tr></table></figure><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>使用 <code>***</code> 或 <code>---</code> 表示分割线，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">----</span><br></pre></td></tr></table></figure><p>显示如下：</p><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p> 使用 <code>&gt;</code>  表示引用。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 引用1</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 引用2</span></span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>使用 <code>*</code> 表示无序列表，或者使用 <code>+</code> 或 <code>-</code> 替代。</p><p>使用数字如<code>1.</code> 表示有序列表。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 无序列表</span></span><br><span class="line"><span class="bullet">*   </span>Red</span><br><span class="line"><span class="bullet">*   </span>Green</span><br><span class="line"><span class="bullet">*   </span>Blue</span><br><span class="line"></span><br><span class="line"><span class="section">## 有序列表</span></span><br><span class="line"><span class="bullet">1.  </span>Red</span><br><span class="line"><span class="bullet">2. </span>Green</span><br><span class="line"><span class="bullet">3.</span>Blue</span><br></pre></td></tr></table></figure><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>任务列表使用<code>- [ ]</code> 或<code>- [x]</code> 表示任务的<code>未完成</code> 或 <code>完成</code> 状态。 例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] 未完成 任务选项</span><br><span class="line"><span class="bullet">- </span>[x] 完成 任务选项</span><br></pre></td></tr></table></figure><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>使用 一对  <code>`</code> 表示单行代码，使用一对 <code></code> <figure class="highlight plain"><figcaption><span>多行代码。 例如：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">~~~ gfm</span><br><span class="line">单行代码示例：</span><br><span class="line">my function name is ` test() `</span><br><span class="line"></span><br><span class="line">多行代码示例：</span><br></pre></td></tr></table></figure></p><p>function test() {<br>  console.log(“notice the blank line before this function?”);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">代码高亮（代码类型）:</span><br><span class="line">```ruby</span><br><span class="line">require &apos;redcarpet&apos;</span><br><span class="line">markdown = Redcarpet.new(&quot;Hello World!&quot;)</span><br><span class="line">puts markdown.to_html</span><br></pre></td></tr></table></figure></p><p>~~~</p><p>如果需要在代码中使用单引号，需要使用<strong><code></code></strong>来规避，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">``这个 `代码` 是错误的``</span><br></pre></td></tr></table></figure><p>显示如下：</p><p><code>这个 `代码` 是错误的</code></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>示例: </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 标题1  | 标题1 |</span><br><span class="line">| ----- | ----- |</span><br><span class="line">| 内容1  | 内容2 |</span><br></pre></td></tr></table></figure><p>在标题和内容间的<code>——</code> 添加 <code>:</code> 表示对齐方式，如<code>:-----</code> 左对齐、<code>:-----:</code>居中对齐，<code>-----:</code>右对齐，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 居中对齐  | 右对齐 |</span><br><span class="line">| :----- |:-----:| -----:|</span><br><span class="line">| col 3 is | some wordy text | $1600 |</span><br><span class="line">| col 2 is | centered        |   $12 |</span><br><span class="line">| zebra stripes | are neat        |    $1 |</span><br></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>使用<code>[]()</code>组成。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">示例网址</span>](<span class="link">http://example.com/</span>)</span><br></pre></td></tr></table></figure><p>显示如下：</p><p><a href="http://example.com/" target="_blank" rel="noopener">示例网址</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>使用<code>![]()</code>组成。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 图片相对路径</span></span><br><span class="line">![<span class="string">本地图片</span>](<span class="link">/path/img.png</span>)</span><br><span class="line"><span class="section"># 图片http 路径</span></span><br><span class="line">![<span class="string">网络图片</span>](<span class="link">https://d33wubrfki0l68.cloudfront.net/e7ed9fe4bafe46e275c807d63591f85f9ab246ba/e2d28/assets/images/tux.png</span>)</span><br></pre></td></tr></table></figure><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>使用 单个<code>*</code> 或单个 (<code>_</code>) 表示斜体，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体1*</span></span><br></pre></td></tr></table></figure><p>显示如下： </p><p><em>斜体1</em></p><h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><p>使用一对<code>**</code>表示粗体，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**粗体**</span></span><br></pre></td></tr></table></figure><p><strong>粗体</strong></p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>使用一对<code>~~</code> 表示删除线（非标准语法，GFM中使用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~不要了~~</span><br></pre></td></tr></table></figure><p>显示如下：</p><p><del>不要了</del></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>可以使用html标签<code>&lt;u&gt; &lt;/u&gt;</code>表示，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt; 下划线 &lt;/u&gt;</span><br></pre></td></tr></table></figure><p>显示如下：</p><p><u>下划线</u></p><h3 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h3><p>使用 <code>~</code>表示下标， 例如: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">H~2~O    X~long\ text~</span><br></pre></td></tr></table></figure><p>显示如下：</p><p>H~2~O</p><p>X~long\ text~</p><h3 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h3><p>使用 <code>^</code> 表示上标, 例如: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X^2^</span><br></pre></td></tr></table></figure><p>显示如下：</p><p>X^2^</p><h3 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h3><p>使用 <code>==</code> 表示高亮， 例如: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==高亮文字==</span><br></pre></td></tr></table></figure><p>显示如下：</p><p>==高亮文字==</p><h3 id="Html-片段"><a href="#Html-片段" class="headerlink" title="Html 片段"></a>Html 片段</h3><p>例如 ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style=&quot;color:red&quot;&gt;红色文字&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><p>显示如下：</p><p><span style="color:red">红色文字</span></p><h3 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h3><p>使用<code>\</code> 反义 markdown中的关键字，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\* 如果没有反斜杠,这将是无序列表</span><br></pre></td></tr></table></figure><p>显示如下：</p><p>* 如果没有反斜杠,这将是无序列表</p><p><strong>可以使用反义的关键字</strong></p><table><thead><tr><th>字符</th><th>名称</th></tr></thead><tbody><tr><td><code>\</code></td><td>反斜线</td></tr><tr><td><code>`</code></td><td>刻度线</td></tr><tr><td><code>*</code></td><td>星号</td></tr><tr><td><code>_</code></td><td>下划线</td></tr><tr><td><code>{}</code></td><td>大括号</td></tr><tr><td><code>[]</code></td><td>括号</td></tr><tr><td><code>()</code></td><td>括弧</td></tr><tr><td><code>#</code></td><td>英镑符号</td></tr><tr><td><code>+</code></td><td>加号</td></tr><tr><td><code>-</code></td><td>减号（连字符）</td></tr><tr><td><code>.</code></td><td>点</td></tr><tr><td><code>!</code></td><td>感叹号</td></tr></tbody></table><p>参考网址：</p><p>[1]、<a href="https://www.markdownguide.org/basic-syntax" target="_blank" rel="noopener">markdownguide</a></p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React Native 整理</title>
      <link href="/2017/03/22/react%20native%E6%95%B4%E7%90%86/"/>
      <url>/2017/03/22/react%20native%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p><strong>react-native 官网</strong></p><p><code>https://facebook.github.io/react-native/</code></p><p><strong>react-native 中文</strong></p><p><code>https://reactnative.cn/</code></p><p><strong>react-native-community</strong></p><p><code>https://github.com/react-native-community</code></p><p><strong>ReactNative指南</strong></p><p><code>https://github.com/reactnativecn/react-native-guide</code></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><strong>Expo</strong></p><p><code>https://expo.io/</code></p><p><strong>react-native-code-push</strong></p><p><code>https://github.com/Microsoft/react-native-code-push</code></p><h3 id="UI-框架-组件"><a href="#UI-框架-组件" class="headerlink" title="UI 框架/组件"></a>UI 框架/组件</h3><p><strong>轮播组件</strong></p><p><code>https://github.com/leecade/react-native-swiper</code></p><p><strong>跨平台UI 组件NativeBase</strong></p><p><code>https://github.com/GeekyAnts/NativeBase</code></p><p><strong>跨平台UI 组件ReactNativeElements</strong></p><p><code>https://github.com/react-native-training/react-native-elements</code></p><p><code>https://react-native-training.github.io/react-native-elements/</code></p><p><strong>跨平台UI 组件Shoutem</strong></p><p><code>https://shoutem.github.io/docs/ui-toolkit/introduction</code></p><p><strong>跨平台UI 组件kitten</strong></p><p><code>https://github.com/akveo/react-native-ui-kitten</code></p><p><code>https://akveo.github.io/react-native-ui-kitten/#/home</code></p><p><strong>跨平台UI 组件MaterialUI</strong></p><p><code>https://github.com/xotahal/react-native-material-ui</code></p><p><strong>图标库VectorIcons</strong></p><p><code>https://github.com/oblador/react-native-vector-icons</code></p><h3 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h3><p><strong>ChartsWrapper</strong></p><p><code>https://github.com/wuxudong/react-native-charts-wrapper</code></p><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p><strong>Lottie</strong></p><p><code>https://github.com/react-native-community/lottie-react-native</code></p><p><strong>Spinkit</strong></p><p><code>https://github.com/maxs15/react-native-spinkit</code></p><h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><p><strong>F8App</strong></p><p><code>https://github.com/fbsamples/f8app</code></p><p><code>http://makeitopen.com/</code></p><p><strong>Reading</strong></p><p><code>https://github.com/attentiveness/reading</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
